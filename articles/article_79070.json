{
  "id": 79070,
  "type": 1,
  "status": 2,
  "agent_id": 3763909,
  "created_at": "2013-04-25T09:42:20Z",
  "category_id": 82218,
  "folder_id": 134765,
  "title": "TTS Translation guide for developer",
  "updated_at": "2021-06-25T08:57:15Z",
  "description": "<div>Translation of phrases in the IVR applications is almost the same as for the usual applications using gettext. But gettext is not simple package and there are so many utilities in it that it's worth to create this small manual.<h3><br></h3><h3><span style=\"font-size: 18px;\">Helper scripts</span></h3><p><br></p><p>To simplify the translation process the <em>po</em> directory is present in the <em>ivrd</em> folder which contains several helper scripts.</p><ul><li><strong>ivrd/po/xgetpo.sh</strong> - the script gathers all the phrases from all the python source files in the <em>ivrd</em> directory and its subfolders and merges all new changes into the <em>ivrd/po/ivrd.pot</em> file.</li><li><strong>ivrd/po/mergepo.sh</strong> - this script merges changes from the <em>ivrd/po/ivrd.pot</em> file into <em>ivrd/po/${LANG}.po</em> file. The script requires a parameter - two-letter language code.</li><li><strong>ivrd/compilepo.sh</strong> - the script compiles translated <em>ivrd/po/${LANG}.po</em> file into <em>ssp/locale/${LANG}/LC_MESSAGES/ivrd.mo</em> file. The script requires a parameter - two-letter language code.</li><li><strong>ivrd/prompt_utils.py</strong> - the script can make several useful tests and can gather some statistics on prompt sets</li></ul><h3><br></h3><h3><span style=\"font-size: 18px;\">Preparing for translation to a new language</span></h3><p><br></p><p>Imagine that the ivrd applications is to be translated into the Turkish language (language code is <strong>tr</strong>). This assumption will be used in the all the text below.</p><p><br></p><p>First of all the translation file is to be created. This can be achieved by running:</p><p><br></p><table id=\"table42529\"><tbody><tr><td class=\"current\"><pre>  $ cd ivrd/po\n  $ ./mergepo.sh tr</pre></td></tr></tbody></table><p><br></p><p>This will create <em>ivrd/po/tr.po</em> file. This file is plain text file so it can be edited by any text editor.</p><h3><br></h3><h3><span style=\"font-size: 18px;\">Translating the translation file</span></h3><p><br></p><p>Now when you have the <em>tr.po</em> the translation can be done. The file contains header like this:</p><br><table id=\"table20764\"><tbody><tr><td class=\"current\"><pre>msgid \"\"\nmsgstr \"\"\n\"Project-Id-Version: PACKAGE VERSION\\n\"\n\"Report-Msgid-Bugs-To: \\n\"\n\"POT-Creation-Date: 2007-08-23 12:44+0300\\n\"\n\"PO-Revision-Date: 2007-08-23 12:44+0300\\n\"\n\"Last-Translator: Automatically generated\\n\"\n\"Language-Team: none\\n\"\n\"MIME-Version: 1.0\\n\"\n\"Content-Type: text/plain; charset=ASCII\\n\"\n\"Content-Transfer-Encoding: 8bit\\n\"\n\"Plural-Forms: nplurals=1; plural=0;\\n\"</pre></td></tr></tbody></table><p><br></p><p>Note that you <em>must</em> change the <strong>Project-Id-Version</strong> value. Otherwise compiler will annoy you with warning.</p><p>The rest of the file is the phrases to translate. The phrases are of two forms - for simple phrases:</p><p><br></p><table id=\"table81100\"><tbody><tr><td class=\"current\"><pre>msgid \"Some English text\"\nmsgstr \"\"</pre></td></tr></tbody></table><pre></pre><p>and for plural forms:</p><p><br></p><table id=\"table6675\"><tbody><tr><td><pre>msgid \"There is one apple\"\nmsgid_plural \"There are %n apples\"\nmsgstr[0] \"\"</pre></td></tr></tbody></table><pre></pre>The <em>msgid*</em> are the phrases to translate and <em>msgstr*</em>are the translations (they are empty for the moment). Turkish has no plural form so you can see that the plural form for translation hasn't been offered.<p><br></p><p>This was a quick overview of the file content so you can start translation. All the empty strings in the <em>msgstr</em> are to be filled with the translated phrases. You are free to use any encoding but do not forget to specify correct encoding name in the <em>charset</em> subfield of the <strong>Content-Type</strong> field.</p><h3><br></h3><h3><span style=\"font-size: 18px;\">Notes for translators</span></h3><p><br></p><p>So here is the point when the phrases are to be passed to a human for translation. The notes for translators you can find <a href=\"https://support.sippysoft.com/a/solutions/articles/79095\">here</a></p><h3><br></h3><h3><span style=\"font-size: 18px;\">TTS language module</span></h3><p><br></p><p>To support the number into text, date into text, duration into text, etc conversions the language specific python module has to be created.</p><p>The module must be named by two-letter language code in uppercase. So for Turkish you have to create the <em>TR.py</em> file. This file is to be placed into <em>ivrd/TextSynth</em> directory. The existing language modules should be used to create new module. Here is a list of requirements to the module:</p><p>the _phrase_noop() function is to be defined and it has to convert your language specific phrases into UNICODE (unless the ASCII is sufficient). All the words and phrases must be encapsulated into _phrase_noop() calls. Also you cannot use any TTS features in this module to avoid infinite recursions.</p><p>When using non-ASCII encoding you must define it in the <strong>second</strong> line of the module:</p><pre></pre><table id=\"table13155\"><tbody><tr><td class=\"current\"><pre>#!/usr/local/bin/python\n# -*- coding: UTF-8 -*-</pre></td></tr></tbody></table><pre></pre><p>These methods are to be created:</p><ul><li>sayNumber()</li><li>sayDigits()</li><li>sayDuration()</li><li>sayDatetime() (this is used by the Voicemail app for now)</li></ul><p><br></p><p>The TextSynth/__init__.py file is to be modified to support your new module.</p><p>The information to be obtained to create the module is summarized <a href=\"https://support.sippysoft.com/a/solutions/articles/79090\">here</a>.</p><h3><br></h3><h3><span style=\"font-size: 18px;\">Prompt creation</span></h3><p><br></p><p>After the translations has been done and placed into the <em>po/tr.po</em> file the translation is to be compiled:</p><p><br></p><table id=\"table15600\"><tbody><tr><td><pre class=\"current\">$ cd ivrd/po\n$ ./compilepo.sh tr</pre></td></tr></tbody></table><pre></pre><p>Last thing to do is to create the prompt directory:</p><p><br></p><table id=\"table75396\"><tbody><tr><td><pre>$ mkdir ~ssp/prompts/ivrd/tr</pre></td></tr></tbody></table><pre></pre><p>Now the <em>prompt_utils.py</em> script can be used to generate the prompt list:</p><br><table id=\"table15056\"><tbody><tr><td class=\"current\"><pre>$ cd ivrd\n$ ./prompt_utils.py -l tr list unmapped</pre></td></tr></tbody></table><br>This will create <em>unmapped-tr.html</em>file containing all the phrase chunks in Turkish language and corresponding English phrases.<p><br></p><p>Here is the point where the narrator starts his work.</p><h3><br></h3><h3><span style=\"font-size: 18px;\">Registering prompts</span></h3><p><br></p><p>After prompts have been recorded they are to be placed into the <em>ssp/prompts/ivrd/tr</em> folder in signed linear 16 bit 8000 Hz mono format and in g729-encoded format.</p><p>Then the <em>ssp/prompts/ivrd/tr/prompt_map.txt</em> file is to be created. The first line of the file must contain the encoding used to present phrase chunks and then prompt mappings follow:</p><p><br></p><table id=\"table75559\"><tbody><tr><td class=\"current\"><pre># encoding: utf-8\nfile1|First phrase\nfile2|second phrase</pre></td></tr></tbody></table><p><br></p><p>After this you can run again the</p><p><br></p><table id=\"table21055\"><tbody><tr><td class=\"current\"><pre>./prompt_utils.py -l tr list unmapped</pre></td></tr></tbody></table><p><br></p>to make sure that all phrases are mapped to audio prompts.</div>",
  "description_text": " Translation of phrases in the IVR applications is almost the same as for the usual applications using gettext. But gettext is not simple package and there are so many utilities in it that it's worth to create this small manual.    Helper scripts     To simplify the translation process the po directory is present in the ivrd folder which contains several helper scripts.   ivrd/po/xgetpo.sh - the script gathers all the phrases from all the python source files in the ivrd directory and its subfolders and merges all new changes into the ivrd/po/ivrd.pot file.  ivrd/po/mergepo.sh - this script merges changes from the ivrd/po/ivrd.pot file into ivrd/po/${LANG}.po file. The script requires a parameter - two-letter language code.  ivrd/compilepo.sh - the script compiles translated ivrd/po/${LANG}.po file into ssp/locale/${LANG}/LC_MESSAGES/ivrd.mo file. The script requires a parameter - two-letter language code.  ivrd/prompt_utils.py - the script can make several useful tests and can gather some statistics on prompt sets      Preparing for translation to a new language     Imagine that the ivrd applications is to be translated into the Turkish language (language code is tr). This assumption will be used in the all the text below.     First of all the translation file is to be created. This can be achieved by running:        $ cd ivrd/po\n  $ ./mergepo.sh tr      This will create ivrd/po/tr.po file. This file is plain text file so it can be edited by any text editor.     Translating the translation file     Now when you have the tr.po the translation can be done. The file contains header like this:    msgid \"\"\nmsgstr \"\"\n\"Project-Id-Version: PACKAGE VERSION\\n\"\n\"Report-Msgid-Bugs-To: \\n\"\n\"POT-Creation-Date: 2007-08-23 12:44+0300\\n\"\n\"PO-Revision-Date: 2007-08-23 12:44+0300\\n\"\n\"Last-Translator: Automatically generated\\n\"\n\"Language-Team: none\\n\"\n\"MIME-Version: 1.0\\n\"\n\"Content-Type: text/plain; charset=ASCII\\n\"\n\"Content-Transfer-Encoding: 8bit\\n\"\n\"Plural-Forms: nplurals=1; plural=0;\\n\"      Note that you must change the Project-Id-Version value. Otherwise compiler will annoy you with warning.  The rest of the file is the phrases to translate. The phrases are of two forms - for simple phrases:      msgid \"Some English text\"\nmsgstr \"\"    and for plural forms:      msgid \"There is one apple\"\nmsgid_plural \"There are %n apples\"\nmsgstr[0] \"\"   The msgid* are the phrases to translate and msgstr*are the translations (they are empty for the moment). Turkish has no plural form so you can see that the plural form for translation hasn't been offered.    This was a quick overview of the file content so you can start translation. All the empty strings in the msgstr are to be filled with the translated phrases. You are free to use any encoding but do not forget to specify correct encoding name in the charset subfield of the Content-Type field.     Notes for translators     So here is the point when the phrases are to be passed to a human for translation. The notes for translators you can find here     TTS language module     To support the number into text, date into text, duration into text, etc conversions the language specific python module has to be created.  The module must be named by two-letter language code in uppercase. So for Turkish you have to create the TR.py file. This file is to be placed into ivrd/TextSynth directory. The existing language modules should be used to create new module. Here is a list of requirements to the module:  the _phrase_noop() function is to be defined and it has to convert your language specific phrases into UNICODE (unless the ASCII is sufficient). All the words and phrases must be encapsulated into _phrase_noop() calls. Also you cannot use any TTS features in this module to avoid infinite recursions.  When using non-ASCII encoding you must define it in the second line of the module:    #!/usr/local/bin/python\n# -*- coding: UTF-8 -*-    These methods are to be created:   sayNumber()  sayDigits()  sayDuration()  sayDatetime() (this is used by the Voicemail app for now)      The TextSynth/__init__.py file is to be modified to support your new module.  The information to be obtained to create the module is summarized here.     Prompt creation     After the translations has been done and placed into the po/tr.po file the translation is to be compiled:      $ cd ivrd/po\n$ ./compilepo.sh tr    Last thing to do is to create the prompt directory:      $ mkdir ~ssp/prompts/ivrd/tr    Now the prompt_utils.py script can be used to generate the prompt list:    $ cd ivrd\n$ ./prompt_utils.py -l tr list unmapped   This will create unmapped-tr.htmlfile containing all the phrase chunks in Turkish language and corresponding English phrases.    Here is the point where the narrator starts his work.     Registering prompts     After prompts have been recorded they are to be placed into the ssp/prompts/ivrd/tr folder in signed linear 16 bit 8000 Hz mono format and in g729-encoded format.  Then the ssp/prompts/ivrd/tr/prompt_map.txt file is to be created. The first line of the file must contain the encoding used to present phrase chunks and then prompt mappings follow:      # encoding: utf-8\nfile1|First phrase\nfile2|second phrase      After this you can run again the      ./prompt_utils.py -l tr list unmapped     to make sure that all phrases are mapped to audio prompts. ",
  "seo_data": {
    "meta_title": "",
    "meta_description": "",
    "meta_keywords": ""
  },
  "tags": [],
  "attachments": [],
  "cloud_files": [],
  "thumbs_up": 0,
  "thumbs_down": 0,
  "hits": 199,
  "suggested": 0,
  "feedback_count": 0,
  "collaboration": {
    "convo_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJUeXBlIjoiYXJ0aWNsZSIsIkNvbnZvSWQiOiI3OTA3MC1lbiIsIlVzZXJJZCI6IjMwMTIwODk1MjQiLCJleHAiOjE2MzUzNzExMjd9.eQ0W7SmHSIRzNZzGJChhrdOhSQ1Oeu0_z4L5AAPAiPI"
  }
}