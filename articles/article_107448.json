{
  "id": 107448,
  "type": 1,
  "status": 2,
  "agent_id": 3763909,
  "created_at": "2013-07-09T17:54:53Z",
  "category_id": 107132,
  "folder_id": 176848,
  "title": "XML-RPC API - Manage Call-Back Calls",
  "updated_at": "2021-06-10T11:11:08Z",
  "description": "<div><div dir=\"ltr\">\n<h2 id=\"make2WayCallback\">make2WayCallback</h2>\n<p dir=\"ltr\">This application is used to initiate 2-way callback request.<br></p>\n<p dir=\"ltr\">Parameters:<br></p>\n<ul>\n<li>authname - VoIP login to be used as callback initiator. String. <strong>Required</strong>.</li>\n<li>cld_first - number to make callback. String. <strong>Required</strong>.</li>\n<li>cli_first - make call leg look like to be made from specified CLI. String. Optional.</li>\n<li>cld_second - number to dial to. String. <strong>Required</strong>.</li>\n<li>cli_second - make call leg look like to be made from specified CLI. String. Optional.</li>\n<li>credit_time - terminate first call leg after this number of seconds. Integer. Optional.</li>\n<li>next_call - at which time to schedule the call. The time must be in UTC timezone. Datetime. Optional.</li>\n</ul>Returns:<br><ul>\n<li>\n<strong>result</strong> - <strong>OK</strong> means that callback was initiated. String.</li>\n<li>\n<strong>i_callback_request</strong> - ID of requested callback. Integer.</li>\n<li>XMLRPC fault in case of any error.</li>\n</ul>\n<h2 id=\"callbackCallingCard\">callbackCallingCard</h2>\n<p dir=\"ltr\">This application is used to initiate callback calls to <a href=\"https://trac.sippysoft.com/trac/wiki/public/IVR/CallingCard\">Calling Card application</a>.</p>\n<p dir=\"ltr\">Parameters:</p>\n<ul>\n<li>authname - VoIP login to be used as callback initiator. String. <strong>Required</strong>.</li>\n<li>cld - number to make callback. String. <strong>Required</strong>.</li>\n<li>cli - make call leg look like to be made from specified CLI. String. Optional.</li>\n<li>langs - languages to be proposed to user upon session start. Array. Optional.</li>\n<li>credit_time - terminate callback call leg after this number of seconds. Integer. Optional.</li>\n</ul>\n<p dir=\"ltr\">The following parameters are the same as corresponding CLD options of <a href=\"https://trac.sippysoft.com/trac/wiki/public/IVR/CallingCard\">Calling Card application</a>. Please see that page for more information.</p>\n<ul>\n<li>chpassext - String. Optional.</li>\n<li>cliregext - String. Optional.</li>\n<li>directhotdial - Boolean. Optional.</li>\n<li>hotdialext - String. Optional.</li>\n<li>hotdialeditext - String. Optional.</li>\n<li>keepcli - Boolean. Optional.</li>\n<li>nodial - Boolean. Optional.</li>\n<li>playbalance - Boolean. Optional.</li>\n<li>playduration - Boolean. Optional.</li>\n<li>noredial - Boolean. Optional.</li>\n<li>topupext - String. Optional.</li>\n<li>trycliauth - Boolean. Optional.</li>\n</ul>Returns:<br><ul>\n<li>\n<strong>result</strong> - <strong>OK</strong> means that callback was initiated. String.</li>\n<li>\n<strong>i_callback_request</strong> - ID of requested callback. Integer.</li>\n<li>XMLRPC fault in case of any error.</li>\n</ul>\n<h2 id=\"cancelCallback\">cancelCallback</h2>\n<p dir=\"ltr\">This application is used to cancel a callback request (and call if it has already started).<br></p>\n<p dir=\"ltr\">Parameters:<br></p>\n<ul><li>i_callback_request - callback request to cancel. Integer. <strong>Required</strong>.</li></ul>Returns:<br><ul>\n<li>\n<strong>result</strong> - <strong>OK</strong> means that cancel request was initiated successfully. String.</li>\n<li>XMLRPC fault in case of any error.</li>\n</ul>\n<h2 id=\"getCallbackStatus\">getCallbackStatus</h2>\n<p dir=\"ltr\">This application is used to get information about a callback request status.<br></p>\n<p dir=\"ltr\">Parameters:<br></p>\n<ul>\n<li>i_callback_request - callback request to retrieve information for. Integer. <strong>Required</strong>.</li>\n<li>fetch_cdrs - should the corresponding CDRs be returned. Boolean. Optional.</li>\n</ul>Returns:<br><ul>\n<li>\n<strong>result</strong> - <strong>OK</strong>. String.</li>\n<li>\n<strong>call_result</strong> *)</li>\n<li>\n<strong>call_status</strong> *)</li>\n<li>\n<strong>cdrs</strong> - optional field containing CDRs for the callback request. The date and time returned in the UTC timezone.</li>\n<li>XMLRPC fault in case of any error.</li>\n</ul>\n<p dir=\"ltr\">*) A detailed explanation of the fields <strong>call_result</strong> and <strong>call_status</strong> you can see <a href=\"https://trac.sippysoft.com/trac/wiki/public/IVR/ANICallback#Statusandresultstrings\">here</a>.</p>\n<h3 id=\"Example\">Python Example</h3>\n<p>\u00a0</p>\n<pre class=\"code-large\" rel=\"highlighter\"># this script requires httplib2 to be installed from http://code.google.com/p/httplib2/\nimport httplib2\nimport urllib\nfrom xmlrpclib import ServerProxy, getparser, ProtocolError\n\nmy_number = '123456'\ndestination_number = '654321'\nauthname = '333333'\n\nclass HTTPSDigestAuthTransport:\n\u00a0 \u00a0 def request(self, host, handler, request_body, verbose=0):\n\u00a0 \u00a0 \u00a0 \u00a0 auth, host = urllib.splituser(host)\n\u00a0 \u00a0 \u00a0 \u00a0 username, password = urllib.splitpasswd(auth)\n\n\u00a0 \u00a0 \u00a0 \u00a0 h = httplib2.Http()\n\u00a0 \u00a0 \u00a0 \u00a0 if verbose:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 h.debuglevel = 1\n\u00a0 \u00a0 \u00a0 \u00a0 h.add_credentials(username, password)\n\n\u00a0 \u00a0 \u00a0 \u00a0 resp, content = h.request(\"https://\" + host + handler, \"POST\", body=request_body,\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 headers={'content-type':'text/xml'})\n\n\u00a0 \u00a0 \u00a0 \u00a0 if resp.status != 200:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 raise ProtocolError(\"https://\" + host + handler,\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 resp.status, resp.reason, None)\n\n\u00a0 \u00a0 \u00a0 \u00a0 p, u = getparser(0)\n\u00a0 \u00a0 \u00a0 \u00a0 p.feed(content)\n\n\u00a0 \u00a0 \u00a0 \u00a0 return u.close()\n\ntransport = HTTPSDigestAuthTransport()\nclient = ServerProxy(\"https://username:password@1.2.3.4/xmlapi/xmlapi\", transport)\nres = client.make2WayCallback({ 'authname' : authname, \n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'cli_first' : my_number, \n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'cld_second' : destination_number,\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'credit_time' : 3600 # call should not continue more than an hour\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0})\nif res['result'] == 'OK':\n\u00a0 \u00a0 print res['i_callback_request']</pre>\n<p>\u00a0</p>\n<p><br></p>\n<p>\u00a0</p>\n</div></div>",
  "description_text": "  \n make2WayCallback \n This application is used to initiate 2-way callback request.  \n Parameters:  \n \n authname - VoIP login to be used as callback initiator. String. Required. \n cld_first - number to make callback. String. Required. \n cli_first - make call leg look like to be made from specified CLI. String. Optional. \n cld_second - number to dial to. String. Required. \n cli_second - make call leg look like to be made from specified CLI. String. Optional. \n credit_time - terminate first call leg after this number of seconds. Integer. Optional. \n next_call - at which time to schedule the call. The time must be in UTC timezone. Datetime. Optional. \n Returns:  \n \nresult - OK means that callback was initiated. String. \n \ni_callback_request - ID of requested callback. Integer. \n XMLRPC fault in case of any error. \n \n callbackCallingCard \n This application is used to initiate callback calls to Calling Card application. \n Parameters: \n \n authname - VoIP login to be used as callback initiator. String. Required. \n cld - number to make callback. String. Required. \n cli - make call leg look like to be made from specified CLI. String. Optional. \n langs - languages to be proposed to user upon session start. Array. Optional. \n credit_time - terminate callback call leg after this number of seconds. Integer. Optional. \n \n The following parameters are the same as corresponding CLD options of Calling Card application. Please see that page for more information. \n \n chpassext - String. Optional. \n cliregext - String. Optional. \n directhotdial - Boolean. Optional. \n hotdialext - String. Optional. \n hotdialeditext - String. Optional. \n keepcli - Boolean. Optional. \n nodial - Boolean. Optional. \n playbalance - Boolean. Optional. \n playduration - Boolean. Optional. \n noredial - Boolean. Optional. \n topupext - String. Optional. \n trycliauth - Boolean. Optional. \n Returns:  \n \nresult - OK means that callback was initiated. String. \n \ni_callback_request - ID of requested callback. Integer. \n XMLRPC fault in case of any error. \n \n cancelCallback \n This application is used to cancel a callback request (and call if it has already started).  \n Parameters:  \n  i_callback_request - callback request to cancel. Integer. Required.  Returns:  \n \nresult - OK means that cancel request was initiated successfully. String. \n XMLRPC fault in case of any error. \n \n getCallbackStatus \n This application is used to get information about a callback request status.  \n Parameters:  \n \n i_callback_request - callback request to retrieve information for. Integer. Required. \n fetch_cdrs - should the corresponding CDRs be returned. Boolean. Optional. \n Returns:  \n \nresult - OK. String. \n \ncall_result *) \n \ncall_status *) \n \ncdrs - optional field containing CDRs for the callback request. The date and time returned in the UTC timezone. \n XMLRPC fault in case of any error. \n \n *) A detailed explanation of the fields call_result and call_status you can see here. \n Python Example \n \u00a0 \n # this script requires httplib2 to be installed from http://code.google.com/p/httplib2/\nimport httplib2\nimport urllib\nfrom xmlrpclib import ServerProxy, getparser, ProtocolError\n\nmy_number = '123456'\ndestination_number = '654321'\nauthname = '333333'\n\nclass HTTPSDigestAuthTransport:\n\u00a0 \u00a0 def request(self, host, handler, request_body, verbose=0):\n\u00a0 \u00a0 \u00a0 \u00a0 auth, host = urllib.splituser(host)\n\u00a0 \u00a0 \u00a0 \u00a0 username, password = urllib.splitpasswd(auth)\n\n\u00a0 \u00a0 \u00a0 \u00a0 h = httplib2.Http()\n\u00a0 \u00a0 \u00a0 \u00a0 if verbose:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 h.debuglevel = 1\n\u00a0 \u00a0 \u00a0 \u00a0 h.add_credentials(username, password)\n\n\u00a0 \u00a0 \u00a0 \u00a0 resp, content = h.request(\"https://\" + host + handler, \"POST\", body=request_body,\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 headers={'content-type':'text/xml'})\n\n\u00a0 \u00a0 \u00a0 \u00a0 if resp.status != 200:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 raise ProtocolError(\"https://\" + host + handler,\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 resp.status, resp.reason, None)\n\n\u00a0 \u00a0 \u00a0 \u00a0 p, u = getparser(0)\n\u00a0 \u00a0 \u00a0 \u00a0 p.feed(content)\n\n\u00a0 \u00a0 \u00a0 \u00a0 return u.close()\n\ntransport = HTTPSDigestAuthTransport()\nclient = ServerProxy(\"https://username:password@1.2.3.4/xmlapi/xmlapi\", transport)\nres = client.make2WayCallback({ 'authname' : authname, \n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'cli_first' : my_number, \n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'cld_second' : destination_number,\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'credit_time' : 3600 # call should not continue more than an hour\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0})\nif res['result'] == 'OK':\n\u00a0 \u00a0 print res['i_callback_request'] \n \u00a0 \n   \n \u00a0 \n  ",
  "seo_data": {
    "meta_title": "",
    "meta_description": "",
    "meta_keywords": ""
  },
  "tags": [],
  "attachments": [],
  "cloud_files": [],
  "thumbs_up": 1,
  "thumbs_down": 4,
  "hits": 1621,
  "suggested": 0,
  "feedback_count": 0,
  "collaboration": {
    "convo_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJUeXBlIjoiYXJ0aWNsZSIsIkNvbnZvSWQiOiIxMDc0NDgtZW4iLCJVc2VySWQiOiIzMDEyMDg5NTI0IiwiZXhwIjoxNjM1MzcxMTA0fQ.hOP2MHtjDuolrn3U1MxsfO5FvZtEWnbPEqNJzKyWDUk"
  }
}