{
  "id": 3000070859,
  "type": 1,
  "status": 2,
  "agent_id": 3012089524,
  "created_at": "2017-09-29T16:20:16Z",
  "category_id": 107132,
  "folder_id": 3000013460,
  "title": "XML-RPC API - External Balance Daemon",
  "updated_at": "2018-11-26T23:04:25Z",
  "description": "<h1><span style=\"font-size: 24px;\">Introduction</span></h1><p>The Sippy Softswitch version 5.0 now offers a Remote Procedure Call (RPC) API to track the balance of accounts, customers and vendors. \u00a0The new RPC API allows the customers to implement their own software platforms to keep track of balance. \u00a0The softswitch will have it\u2019s own implementation of the balance subsystem called balanced.</p><p><br></p><p>The RPC specification is a schema written in a Thrift Interface Description Language and provided by Sippy Software. It includes number of remote methods and data structures. \u00a0These will be described further in this document. \u00a0\u00a0</p><p><br></p><h1>The Balance Entity</h1><p><br></p><p>The balance subsystem works with abstract balance entities and linked to any Sippy entity such as Account, Customer or Vendor. The balance entity is referred to as \u2018account\u2019 throughout this document.</p><p><br></p><p>An account has three billing attributes: balance, credit limit and commodity. The balance and credit limit are self-explanatory and the commodity is a read-only attribute which is created when the account is created and is used solely for grouping when totals are requested. Balances for Accounts, Customers and Vendors have a three letter currency code as a commodity.</p><p><br></p><p>An account also has a unique identifier called <span style=\"font-family: 'Courier New', Courier, monospace;\">i_balance</span> and reference counter which must be increased when it is assigned to some entity such as Vendor, Account or Customer. When the reference counter reaches zero that means the balance entity is no longer used and it is safe to delete it.</p><p><br></p><h1>Balance Tracking API</h1><h2>Balance API methods used by the call processing engine \u00a0</h2><p>The following methods are used in real time by call processing engine so they must be as fast as possible.</p><ul>\n<li>\n<span style=\"font-family: 'Courier New', Courier, monospace;\">get_balance(i_balance)</span> - this method received an identifier of an account and returns a <span style=\"font-family: 'Courier New', Courier, monospace;\">BalanceInfo\u00a0</span>structure.</li>\n<li>\n<span style=\"font-family: 'Courier New', Courier, monospace;\">make_debit(i_balance, amount, i_balance_update, unblock_ids[])</span> - the method decreases the balance value of the account specified by the i_balance identifier. <span style=\"font-family: 'Courier New', Courier, monospace;\">The i_balance_update</span> is a unique value obtained from the <span style=\"font-family: 'Courier New', Courier, monospace;\">next_i_balance_update()</span> call. The <span style=\"font-family: 'Courier New', Courier, monospace;\">unblock_ids[]</span> is a list of blocked amounts acquired with the <span style=\"font-family: 'Courier New', Courier, monospace;\">block_amount()</span> call and which will be released after the <span style=\"font-family: 'Courier New', Courier, monospace;\">make_debit()</span> call is completed. The amount must be greater than zero or an error must be returned. The <span style=\"font-family: 'Courier New', Courier, monospace;\">make_debit()</span> call is allowed to make the balance value negative. The returned value is a freshly updated <span style=\"font-family: 'Courier New', Courier, monospace;\">BalanceInfo\u00a0</span>structure.</li>\n<li>\n<span style=\"font-family: 'Courier New', Courier, monospace;\">add_credit(i_balance, amount, i_balance_update)</span> - the method increases the <span style=\"font-family: 'Courier New', Courier, monospace;\">balance\u00a0</span>value of the Balance entity specified by the <span style=\"font-family: 'Courier New', Courier, monospace;\">i_balance\u00a0</span>identifier. The <span style=\"font-family: 'Courier New', Courier, monospace;\">i_balance_update\u00a0</span>is a unique value obtained using the <span style=\"font-family: 'Courier New', Courier, monospace;\">next_i_balance_update()</span>. The amount must be greater than zero or an error must be returned. The returned value is a freshly updated <span style=\"font-family: 'Courier New', Courier, monospace;\">BalanceInfo\u00a0</span>structure.</li>\n<li>\n<span style=\"font-family: 'Courier New', Courier, monospace;\">block_amount(i_balance, amount, i_balance_update, service_id, expires, unblock_ids[])</span> - blocks the specified amount and returns the block ID (<span style=\"font-family: 'Courier New', Courier, monospace;\">i_balance_update</span>) as well as the updated balance info. Returns an error if an attempt to make the balance less than zero has been made or account specified with <span style=\"font-family: 'Courier New', Courier, monospace;\">i_balance\u00a0</span>does not exist. To ensure a block is not stuck forever a blocked amount is released automatically as specified by the expires parameter. The default value for the <span style=\"font-family: 'Courier New', Courier, monospace;\">expires\u00a0</span>is 10 minutes.<ul><li>\n<strong>Important note:</strong> this call fails if no <span style=\"font-family: 'Courier New', Courier, monospace;\">register_service()</span> call has been made at the session start.\u00a0</li></ul>\n</li>\n<li>\n<span style=\"font-family: 'Courier New', Courier, monospace;\">unblock_amount(i_blocked_amount)</span> - releases a blocked amount. Returns no value.\u00a0</li>\n<li>\n<span style=\"font-family: 'Courier New', Courier, monospace;\">clear_blocked_amounts()</span> - releases all the blocked amounts which have been blocked by the current service ID which is specified by the <span style=\"font-family: 'Courier New', Courier, monospace;\">register_service()</span> call. Returns nothing. This call is intended to be used once at a start-up time of a balance daemon client in order to clear the possibly stuck blocked amounts in case when the client has crashed and has been restarted.\u00a0<ul><li>\n<strong>Important note:\u00a0</strong>this call fails if no <span style=\"font-family: 'Courier New', Courier, monospace;\">register_service()</span> call has been made at the session start.\u00a0</li></ul>\n</li>\n<li>\n<span style=\"font-family: 'Courier New', Courier, monospace;\">register_service(service_id)</span> - assign a service ID to the current communication session. After this method has been called all the subsequent calls will be bound to the specified service ID. The <span style=\"font-family: 'Courier New', Courier, monospace;\">service_id</span> is an arbitrary constant string which identifies the balance API client.\u00a0</li>\n<li>\n<span style=\"font-family: 'Courier New', Courier, monospace;\">next_i_balance_update()</span> - this method returns a unique identifier which is used in transactional method calls such as <span style=\"font-family: 'Courier New', Courier, monospace;\">make_debit()</span>, <span style=\"font-family: 'Courier New', Courier, monospace;\">add_credit()</span>, <span style=\"font-family: 'Courier New', Courier, monospace;\">block_amount()</span>, etc to ensure that that calls are not applied more than once causing a discrepancy in billing or account housekeeping.</li>\n<li>\n<span style=\"font-family: 'Courier New', Courier, monospace;\">clear_blocked_amounts()</span> - releases all the blocked amounts which have been blocked by the current service ID which is specified by the <span style=\"font-family: 'Courier New', Courier, monospace;\">register_service()</span> call. Returns nothing. This call is intended to be used once at a start-up time of a balance subsystem client in order to clear the possibly stuck blocked amounts in case when the client has crashed and has been restarted.<ul><li>\n<strong>Important note</strong>: this call fails if no <span style=\"font-family: 'Courier New', Courier, monospace;\">register_service()</span> call has been made before.</li></ul>\n</li>\n</ul><p><br></p><h2>The API methods used by Sippy Softswitch XML-RPC API and Web UI \u00a0</h2><ul>\n<li>\n<span style=\"font-family: 'Courier New', Courier, monospace;\">create_balance(balance, credit_limit, commodity, ref_count)\u00a0</span>- creates new balance entity with the specified parameters and returns the <span style=\"font-family: 'Courier New', Courier, monospace;\">i_balance\u00a0</span>value of the newly created account. The commodity becomes a read-only attribute of the balance entity. The reference counter <span style=\"font-family: 'Courier New', Courier, monospace;\">ref_count\u00a0</span>must be at least 1.\u00a0</li>\n<li>\n<span style=\"font-family: 'Courier New', Courier, monospace;\">inc_ref_count(i_balance, i_balance_update)</span> - increments the reference counter on an account.\u00a0</li>\n<li>\n<span style=\"font-family: 'Courier New', Courier, monospace;\">dec_ref_count(i_balance, i_balance_update)</span> - decrements the reference counter. When the reference counter reaches zero the account is safe to be deleted. Please note however that the API does not have an explicit method to delete an account.\u00a0</li>\n<li>\n<span style=\"font-family: 'Courier New', Courier, monospace;\">get_balances(i_balances[], filter)</span> - given a list of balance IDs returns a list of balances whose balance, credit limit or available balance match the filter expression.\u00a0</li>\n<li>\n<span style=\"font-family: 'Courier New', Courier, monospace;\">get_totals(i_balances[])</span> - given a list of balance IDs returns sum of <span style=\"font-family: 'Courier New', Courier, monospace;\">credit_limit\u00a0</span>and balance grouped by commodity.\u00a0</li>\n<li>\n<span style=\"font-family: 'Courier New', Courier, monospace;\">set_credit_limit(i_balance, new_credit_limit)</span> - sets new value for credit limit.</li>\n</ul><p><br></p><h1>Contact \u00a0</h1><p>For more information about the External Balance Daemon please contact our sales or support.</p><p><br></p>",
  "description_text": " Introduction  The Sippy Softswitch version 5.0 now offers a Remote Procedure Call (RPC) API to track the balance of accounts, customers and vendors. \u00a0The new RPC API allows the customers to implement their own software platforms to keep track of balance. \u00a0The softswitch will have it\u2019s own implementation of the balance subsystem called balanced.     The RPC specification is a schema written in a Thrift Interface Description Language and provided by Sippy Software. It includes number of remote methods and data structures. \u00a0These will be described further in this document. \u00a0\u00a0     The Balance Entity     The balance subsystem works with abstract balance entities and linked to any Sippy entity such as Account, Customer or Vendor. The balance entity is referred to as \u2018account\u2019 throughout this document.     An account has three billing attributes: balance, credit limit and commodity. The balance and credit limit are self-explanatory and the commodity is a read-only attribute which is created when the account is created and is used solely for grouping when totals are requested. Balances for Accounts, Customers and Vendors have a three letter currency code as a commodity.     An account also has a unique identifier called i_balance and reference counter which must be increased when it is assigned to some entity such as Vendor, Account or Customer. When the reference counter reaches zero that means the balance entity is no longer used and it is safe to delete it.     Balance Tracking API  Balance API methods used by the call processing engine \u00a0  The following methods are used in real time by call processing engine so they must be as fast as possible.  \n \nget_balance(i_balance) - this method received an identifier of an account and returns a BalanceInfo\u00a0structure. \n \nmake_debit(i_balance, amount, i_balance_update, unblock_ids[]) - the method decreases the balance value of the account specified by the i_balance identifier. The i_balance_update is a unique value obtained from the next_i_balance_update() call. The unblock_ids[] is a list of blocked amounts acquired with the block_amount() call and which will be released after the make_debit() call is completed. The amount must be greater than zero or an error must be returned. The make_debit() call is allowed to make the balance value negative. The returned value is a freshly updated BalanceInfo\u00a0structure. \n \nadd_credit(i_balance, amount, i_balance_update) - the method increases the balance\u00a0value of the Balance entity specified by the i_balance\u00a0identifier. The i_balance_update\u00a0is a unique value obtained using the next_i_balance_update(). The amount must be greater than zero or an error must be returned. The returned value is a freshly updated BalanceInfo\u00a0structure. \n \nblock_amount(i_balance, amount, i_balance_update, service_id, expires, unblock_ids[]) - blocks the specified amount and returns the block ID (i_balance_update) as well as the updated balance info. Returns an error if an attempt to make the balance less than zero has been made or account specified with i_balance\u00a0does not exist. To ensure a block is not stuck forever a blocked amount is released automatically as specified by the expires parameter. The default value for the expires\u00a0is 10 minutes.  \nImportant note: this call fails if no register_service() call has been made at the session start.\u00a0  \n \n \nunblock_amount(i_blocked_amount) - releases a blocked amount. Returns no value.\u00a0 \n \nclear_blocked_amounts() - releases all the blocked amounts which have been blocked by the current service ID which is specified by the register_service() call. Returns nothing. This call is intended to be used once at a start-up time of a balance daemon client in order to clear the possibly stuck blocked amounts in case when the client has crashed and has been restarted.\u00a0  \nImportant note:\u00a0this call fails if no register_service() call has been made at the session start.\u00a0  \n \n \nregister_service(service_id) - assign a service ID to the current communication session. After this method has been called all the subsequent calls will be bound to the specified service ID. The service_id is an arbitrary constant string which identifies the balance API client.\u00a0 \n \nnext_i_balance_update() - this method returns a unique identifier which is used in transactional method calls such as make_debit(), add_credit(), block_amount(), etc to ensure that that calls are not applied more than once causing a discrepancy in billing or account housekeeping. \n \nclear_blocked_amounts() - releases all the blocked amounts which have been blocked by the current service ID which is specified by the register_service() call. Returns nothing. This call is intended to be used once at a start-up time of a balance subsystem client in order to clear the possibly stuck blocked amounts in case when the client has crashed and has been restarted.  \nImportant note: this call fails if no register_service() call has been made before.  \n \n     The API methods used by Sippy Softswitch XML-RPC API and Web UI \u00a0  \n \ncreate_balance(balance, credit_limit, commodity, ref_count)\u00a0- creates new balance entity with the specified parameters and returns the i_balance\u00a0value of the newly created account. The commodity becomes a read-only attribute of the balance entity. The reference counter ref_count\u00a0must be at least 1.\u00a0 \n \ninc_ref_count(i_balance, i_balance_update) - increments the reference counter on an account.\u00a0 \n \ndec_ref_count(i_balance, i_balance_update) - decrements the reference counter. When the reference counter reaches zero the account is safe to be deleted. Please note however that the API does not have an explicit method to delete an account.\u00a0 \n \nget_balances(i_balances[], filter) - given a list of balance IDs returns a list of balances whose balance, credit limit or available balance match the filter expression.\u00a0 \n \nget_totals(i_balances[]) - given a list of balance IDs returns sum of credit_limit\u00a0and balance grouped by commodity.\u00a0 \n \nset_credit_limit(i_balance, new_credit_limit) - sets new value for credit limit. \n     Contact \u00a0  For more information about the External Balance Daemon please contact our sales or support.    ",
  "seo_data": {
    "meta_title": "",
    "meta_description": "",
    "meta_keywords": ""
  },
  "tags": [
    "External Balance Daemon",
    "XMLRPC API"
  ],
  "attachments": [
    {
      "id": 3031645558,
      "name": "External Balance Daemon.pdf",
      "content_type": "application/pdf",
      "size": 135790,
      "created_at": "2017-09-29T20:38:51Z",
      "updated_at": "2017-09-29T20:38:53Z",
      "attachment_url": "https://s3.amazonaws.com/cdn.freshdesk.com/data/helpdesk/attachments/production/3031645558/original/External%20Balance%20Daemon.pdf?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAS6FNSMY2XLZULJPI%2F20211012%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20211012T214520Z&X-Amz-Expires=300&X-Amz-SignedHeaders=host&X-Amz-Signature=7fd7f4a10c75de127ac5885a33a3685d50aeda7a38ec1550551efe8e88de5dc3"
    }
  ],
  "cloud_files": [],
  "thumbs_up": 1,
  "thumbs_down": 0,
  "hits": 539,
  "suggested": 0,
  "feedback_count": 0,
  "collaboration": {
    "convo_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJUeXBlIjoiYXJ0aWNsZSIsIkNvbnZvSWQiOiIzMDAwMDcwODU5LWVuIiwiVXNlcklkIjoiMzAxMjA4OTUyNCIsImV4cCI6MTYzNTM3MTEyMH0.64WLvvKHz3Ry5hWbds87-nlKakOPCCv3iSKu-RuAF4I"
  }
}