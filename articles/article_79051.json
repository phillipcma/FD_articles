{
  "id": 79051,
  "type": 1,
  "status": 2,
  "agent_id": 3763909,
  "created_at": "2013-04-25T09:05:28Z",
  "category_id": 82218,
  "folder_id": 134765,
  "title": "ANI Callback IVR application",
  "updated_at": "2021-08-26T19:12:53Z",
  "description": "<h3><span style=\"font-size: 18px;\">Principle of operation</span></h3><p><br></p><div><p>The ANI Callback IVR application can be configured in two different ways:</p><ol><li dir=\"ltr\">Using a <strong>DID Pool</strong> and the <strong>IVR application</strong> menus (standard in the latest versions)&nbsp;</li><li dir=\"ltr\">Using a connection with the IP of environment and port 5062 which belongs to the internal Asterisk service.&nbsp;</li></ol></div><div><br></div><div>The <strong><u>first scenario</u></strong> is a standard one that we use in systems that are higher than 3.x version.</div><p><strong>&nbsp; &nbsp; &nbsp;&nbsp;</strong> 1. <strong>Open the IVR application</strong> menu and click Add New IVR application <strong>with Type = \"Calling Card\"&nbsp;</strong></p><p><strong>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</strong>using the following instruction: <a href=\"http://support.sippysoft.com/solution/articles/183496-step-1-add-calling-card-ivr-application\" target=\"_blank\">http://support.sippysoft.com/solution/articles/183496-step-1-add-calling-card-ivr-application</a></p><p>&nbsp; &nbsp; &nbsp; &nbsp;2.<strong>&nbsp;Open the IVR application</strong> menu again and click Add New IVR application with <strong>Type = \"ANI callback\"&nbsp;</strong>and with <strong>IVR Application (item #3 on image)</strong> that you have created in the<strong>&nbsp;item#1</strong><strong>.&nbsp;</strong>And then <strong>click \"save\"&nbsp;</strong>button to create it.</p><p><strong>&nbsp; &nbsp; &nbsp; &nbsp; See an example:</strong><strong><img class=\"fr-dib\" src=\"https://s3.amazonaws.com/cdn.freshdesk.com/data/helpdesk/attachments/production/3028956643/original/lRA884MQ4-R5PvElrtIhICHKxXL2GMZWbA.png?1496239514\" data-filelink=\"https://s3.amazonaws.com/cdn.freshdesk.com/data/helpdesk/attachments/production/3028956643/original/lRA884MQ4-R5PvElrtIhICHKxXL2GMZWbA.png?1496239514\" data-fileid=\"3028956643\" data-uniquekey=\"1496238226170\" style=\"width: 752px; height: 155.413px;\"></strong></p><p dir=\"ltr\"><strong>&nbsp; &nbsp; &nbsp;&nbsp;</strong> 3.<strong>&nbsp;</strong>After you save,<strong dir=\"ltr\">&nbsp;add the needed options in the&nbsp;</strong><strong>\"Advanced Parameters\"&nbsp;</strong>(scroll down the page to find the table with all available options)<strong>&nbsp;</strong>section of your application<strong>.</strong></p><p dir=\"ltr\">&nbsp; &nbsp; &nbsp; &nbsp;4. <strong>Open the DID Pool section</strong> menu and <strong dir=\"ltr\">add the DID number</strong> that later you will <strong dir=\"ltr\">assign to the IVR application</strong> with <strong>Type = \"ANI callback\"</strong>.</p><p dir=\"ltr\">&nbsp; &nbsp; &nbsp; &nbsp;5. <strong>Create a basic configuration</strong> of Sippy Softswitch using our video tutorial:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<a dir=\"ltr\" href=\"https://sites.google.com/site/sippylearning/video-tutorials/home\" target=\"_blank\">https://sites.google.com/site/sippylearning/video-tutorials/home</a></p><div dir=\"ltr\">&nbsp; &nbsp; &nbsp; &nbsp;6. Create a special Account that you will use as a \"Default Account\" in the IVR application (for outgoing calls in scope of a callback service) where <strong>USERNAME&nbsp;</strong>should be used as a parameter.</div><p>&nbsp; &nbsp; &nbsp; &nbsp;<strong>See example:</strong></p><p><img class=\"fr-dib\" src=\"https://s3.amazonaws.com/cdn.freshdesk.com/data/helpdesk/attachments/production/3028955857/original/8EMXrOtWEsJdKm4LjSVU7m3jCrNTNdyVOw.png?1496238079\" data-filelink=\"https://s3.amazonaws.com/cdn.freshdesk.com/data/helpdesk/attachments/production/3028955857/original/8EMXrOtWEsJdKm4LjSVU7m3jCrNTNdyVOw.png?1496238079\" data-fileid=\"3028955857\" data-uniquekey=\"1496238039668\" style=\"width: 744px; height: 460.528px;\"></p><div dir=\"ltr\">&nbsp; &nbsp; &nbsp; &nbsp;7. &nbsp;Make a test call to the DID number that you have tied to your ANI callback application.&nbsp;</div><div dir=\"ltr\"><strong>Please note</strong>, when you call to the Callback application, the system initiates a callback to your CLI number and if the CLI answers the call, the system activates a Calling card application that requests the caller to enter the card number for proper authorization. In Sippy, Accounts play the role of Card Numbers this means you just need to enter the USERNAME of the Account for authorization and then Calling Card will ask you to enter the destination number.</div><p><br></p><div dir=\"ltr\">Below is described a <strong><u>second scenario</u></strong> of the ANI callback configuration that was used in older versions of Sippy Softswitch (in 3.x versions and lower).<br><ol><li>The ANI Callback application receives the call with the name of sub-application to invoke in its parameters (currently only <a href=\"https://sippysoft.freshdesk.com/support/solutions/articles/183496-calling\" target=\"\">CallingCard</a> and <a href=\"https://trac.sippysoft.com/trac/wiki/public/IVR/2WayCallback\" target=\"\">2Way Callback</a> IVR applications are supported).</li><li>The ANI Callback application checks if there is account matching incoming CLI for that call. The matchning performed against <strong>accounts</strong> table and then against <strong>calling_card_cli_map</strong> table to identify particular account.</li><li>If both matches in previous step have failed then the ANI Callback application tries to take the default callback username from configuration. So all foreign CLIs are called back using the default callback username as authname.</li><li>The ANI Callback application optionally indicates ringback via early media or sends ringing indication and then rejects incoming call without answering.</li><li>If the match has been successful the ANI Callback application initiates new call to that CLI using credentials of the user identified on the previous step.</li><li>If the call fails, the ANI Callback application makes several retries.</li><li>When the call has been aswered, the ANI Callback starts specified sub-application and passes control to it.</li></ol><p><br></p><h3><span style=\"font-size: 18px;\">Call routing setup</span></h3><ol><li>Add vendor connection. Set the Asterisk's host/port in the Destination field of Vendor Connection (ex: 192.168.0.100:5062).</li><li>Set the CLD Translation Rule for the connection to the value <strong>ani_&lt;options&gt;_&lt;string&gt;</strong>. For possible options please refer to the section <strong>CLD options</strong> below.</li><li>Add route to this connection to specify the ANI Callback Extension number.</li></ol><p>When user calls the specified extension the IVR server arranges the callback call and dials the user back in several seconds. The IVR applications consider this callback call as ordinary call with the CLI identical to original call and with CLD set to <strong>&lt;string&gt;</strong>.</p><p><br></p><p>Example:</p><ol><li>The Vendor connection has been created with the CLD Translation rule of <strong>ani_callingcard_en_th</strong>.</li><li>The user <strong>801</strong> called the callback extension and hanged up.</li><li>The IVR server calls the user and user picks up the phone.</li><li>The IVR session starts with the CLI <strong>801</strong> and CLD <strong>callingcard_en_th</strong>.</li><li>As expected the Calling Card application recognizes the call and handles it.</li></ol><h3><br></h3><h3>Available options for the \"Advanced parameters\" section of IVR application</h3><p><br></p><table><tbody><tr><td><strong>Option</strong><br></td><td><strong>Meaning</strong><br></td><td><strong>Default</strong><br></td></tr><tr><td><strong>Backoff Interval</strong><br></td><td>Failed attempts to make callback call will be retried after this amount of time<br></td><td>10 seconds<br></td></tr><tr><td><strong>Default Account Username</strong><br></td><td>The default account to use for CLIs that are not local accounts<br></td><td><br></td></tr><tr><td><strong>Enable_Anonymous_Accounting</strong><br></td><td>Should the real account also be charged for the first call leg of the callback call when using the Default Account. This option is the same as CLD option <strong>noanonacct</strong><br></td><td>True<br></td></tr><tr><td><strong>Delay Before Callback</strong><br></td><td>First callback attempt will be performed not earlier than this time has passed<br></td><td>5 seconds<br></td></tr><tr><td><strong>Hangup SIP Response Code</strong><br></td><td>Which SIP response code to use when hanging up. Possible hangup codes you can see <a class=\"wiki\" href=\"https://trac.sippysoft.com/trac/wiki/public/IVR/ANICallback#SupportedhangupSIPresponsecodes\">here</a>.<br></td><td>603<br></td></tr><tr><td><strong>Minimum Balance</strong><br></td><td>The minimum allowed balance when the account is accessible. When balance is lower then this threshold then the default user will be tried. The value can be suffixed with a currency (e.g. '2 USD') in which case it will be converted to the user's currency prior to comparison.<br></td><td>Not set<br></td></tr><tr><td><strong>Max # Of Callback Attempts</strong><br></td><td>The maximum number of attempts to call back before the call canceled<br></td><td>3<br></td></tr><tr><td><strong>Ringback Time</strong><br></td><td>How long to indicate ringing in seconds.<br></td><td>0 seconds<br></td></tr><tr><td><strong>Ringback Type</strong><br></td><td>How to indicate ringing. Possible values are 'indicate' and 'earlymedia'<br></td><td>'indicate'<br></td></tr><tr><td><strong>SIP Proxy For Callback Calls</strong><br></td><td>SIP proxy to use when doing the outbound calls<br></td><td>local IP address<br></td></tr><tr><td><strong>Scan Interval</strong><br></td><td>The time between attempts to find new callback calls<br></td><td>5 seconds<br></td></tr><tr><td><strong>Timeout</strong><br></td><td>Time to wait for answer<br></td><td>300 seconds<br></td></tr><tr><td><strong>Fixed CLI</strong><br></td><td>This value is used as CLI on the first call leg of the callback call.<br></td><td><br></td></tr><tr><td><strong>Disable CLI Authentication</strong><br></td><td>Completely disable CLI authentication. Useful together with <strong>Default Account Username</strong> option.<br></td><td>False<br></td></tr><tr><td><strong>Force CLI Authentication</strong><br></td><td>Reject calls from unknown CLIs. Can be used together with <strong>Force Default Account</strong> option.<br></td><td>False<br></td></tr><tr><td><strong>Force Default Account</strong><br></td><td>Always make the Default Account to be owner of the first callback call leg.<br></td><td>False<br></td></tr><tr><td><strong>The Reason For Diversion *</strong><br></td><td>The reason parameter for the Diversion SIP header<br></td><td>unconditional<br></td></tr></tbody></table><h3><span style=\"font-size: 14px;\">* starting from Sippy 2020</span></h3><h3><span style=\"font-size: 18px;\">CLD options</span></h3><p><br></p><table><tbody><tr><td><strong>Option</strong><br></td><td><strong>Description</strong><br></td></tr><tr><td><strong>noanonacct</strong><br></td><td>Should the real account also be charged for the first call leg of the callback call when using the Default Account. This option is equivalent to the <strong>Enable Anonymous Accounting</strong> option.<br></td></tr></tbody></table><h3><br></h3><h3><span style=\"font-size: 18px;\">Database usage</span></h3><p><br></p><p>The application uses <strong>callback_requests</strong> table to store new callback requests and completed call statistics.</p><p>Description of fields of the table <strong>callback_requests</strong></p><p><strong><br></strong></p><table><tbody><tr><td><strong>Field name</strong><br></td><td><strong>Description</strong><br></td></tr><tr><td><strong>anon_acct_enabled</strong><br></td><td>This field can help to enable or disable an accounting for calls which use the Default Account. When the accounting enabled, then a SIP header <strong>X-2Way-Need-Bind: yes</strong> is included in the INVITE SIP request while creating second call leg so to inform b2bua that the account making this outbound call should also be charged for the first callback call leg. Default is True<br></td></tr><tr><td><strong>authname</strong><br></td><td>The callback call is originated with this identity.<br></td></tr><tr><td><strong>call_count</strong><br></td><td>This field is used to reschedule the callback call<br></td></tr><tr><td><strong>call_id</strong><br></td><td>This field can be preset to some value in which case the callback call will use this Call-ID. If the field contains NULL then the random value is generated and placed in this field during the call.<br></td></tr><tr><td><strong>canceled</strong><br></td><td>This field is intended to be set from elsewhere (<a href=\"http://support.sippysoft.com/solution/categories/107132/folders/176848/articles/107448-manage-call-back-calls\" target=\"\">XMLRPC</a> for example). The corresponding call is forcibly canceled when this field is set to True.<br></td></tr><tr><td><strong>connect_time</strong><br></td><td>Statistics field indicating the connect time. It is NULL for failed calls.<br></td></tr><tr><td><strong>creation_time</strong><br></td><td>Statistics field containing date and time of request creation.<br></td></tr><tr><td><strong>credit_time</strong><br></td><td>First call leg of this callback call will be terminated in specified amount of seconds. This field is optional and defaults to NULL.<br></td></tr><tr><td><strong>default_user_used</strong><br></td><td>If the default callback user was chosen during callback request creation (see the Callback-&gt;DefaultUsername parameter)<br></td></tr><tr><td><strong>disconnect_time</strong><br></td><td>Statistics field indicating the end of the callback call<br></td></tr><tr><td><strong>finished</strong><br></td><td>If True then this record is statistics entry. Otherwise the record is schedule entry.<br></td></tr><tr><td><strong>i_callback_request</strong><br></td><td>The primary key<br></td></tr><tr><td><strong>md5secret</strong><br></td><td>HA1 hashed password of the user. HA1 is calculated as MD5 of the string \"&lt;username&gt;:&lt;realm&gt;:&lt;password&gt;\" (without quotes).<br></td></tr><tr><td><strong>next_call</strong><br></td><td>This field is used to reschedule the callback call<br></td></tr><tr><td><strong>original_cli</strong><br></td><td>Original CLI<br></td></tr><tr><td><strong>original_set_cli</strong><br></td><td>Use this CLI when creating callback call leg<br></td></tr><tr><td><strong>original_cld</strong><br></td><td>Original CLD<br></td></tr><tr><td><strong>setup_time</strong><br></td><td>Statistics field indicating the beginning of the callback call attempt<br></td></tr><tr><td><strong>result</strong><br></td><td>Callback result string (see below).<br></td></tr><tr><td><strong>status</strong><br></td><td>Callback status string (see below).<br></td></tr><tr><td><strong>twoway_call_id</strong><br></td><td>This field can be preset to some value in which case the call to destination will use this Call-ID. If the field contains NULL then the default value is constructed based on <strong>call_id</strong> and placed in this field during the call.<br></td></tr><tr><td><strong>twoway_cli</strong><br></td><td>Parameter for the 2WayCallback application.<br></td></tr><tr><td><strong>twoway_authname</strong><br></td><td>Parameter for the 2WayCallback application.<br></td></tr><tr><td><strong>twoway_md5secret</strong><br></td><td>Parameter for the 2WayCallback application.<br></td></tr><tr><td><strong>username</strong><br></td><td>The callback call is originated on behalf of this user<br></td></tr></tbody></table><h3><br></h3><h3><span style=\"font-size: 18px;\">Status and result strings</span></h3><p><br></p><p>Status and result are set by the callback subsystem and can also be extended by some applications. Currently 2 Way Callback Application is able to set own specific statuses and results.</p><h4><br></h4><h4><strong>Main flow</strong></h4><p><br></p><table><tbody><tr><td><strong>Order</strong><br></td><td><strong>Status</strong><br></td><td><strong>Result</strong><br></td><td><strong>Description</strong><br></td><td><strong>Is application specific</strong><br></td></tr><tr><td><br></td><td><br></td><td><br></td><td><br></td><td><br></td></tr><tr><td>1<br></td><td>Request received<br></td><td>NULL<br></td><td>Request received but not tried yet<br></td><td>No<br></td></tr><tr><td>2<br></td><td>First leg initiated<br></td><td>NULL<br></td><td>First leg initiated but not connected yet<br></td><td>No<br></td></tr><tr><td>3<br></td><td>First leg connected<br></td><td>NULL<br></td><td>First leg connected, and an IVR application started on the second call leg.<br></td><td>No<br></td></tr><tr><td>4<br></td><td>Second leg initiated<br></td><td>NULL<br></td><td>Second leg initiated but not connected yet<br></td><td>2 Way Callback<br></td></tr><tr><td>5<br></td><td>Second leg connected<br></td><td>NULL<br></td><td>Second leg connected and conversation takes place<br></td><td>2 Way Callback<br></td></tr><tr><td>6<br></td><td>Finished<br></td><td>Successful<br></td><td>Callback attempt succeeded<br></td><td>No<br></td></tr></tbody></table><h4><br></h4><h4><strong>Possible intermediate and error conditions</strong></h4><p><br></p><table><tbody><tr><td><strong>Status</strong><br></td><td><strong>Result</strong><br></td><td><strong>Description</strong><br></td><td><strong>Is application specific</strong><br></td></tr><tr><td><br></td><td><br></td><td><br></td><td><br></td></tr><tr><td>Waiting for retry<br></td><td>NULL<br></td><td>Callback attempt was unsuccessful but some more attempts are allowed<br></td><td>No<br></td></tr><tr><td>Finished<br></td><td>Out of retries<br></td><td>All possible attempts to call back have failed<br></td><td>No<br></td></tr><tr><td>Finished<br></td><td>Expired<br></td><td>The callback request was too old to even try it. This can happen if ivrd has been down for too long<br></td><td>No<br></td></tr><tr><td>Finished<br></td><td>First leg aborted<br></td><td>First call leg has hanged up before second call leg connects<br></td><td>2 Way Callback<br></td></tr><tr><td>Finished<br></td><td>Second leg failed<br></td><td>Second call leg has been rejected<br></td><td>2 Way Callback<br></td></tr><tr><td>Finished<br></td><td>Canceled<br></td><td>Call was canceled by administrator.<br></td><td>No<br></td></tr></tbody></table><h3><br></h3><h3><span style=\"font-size: 18px;\">Supported hangup SIP response codes</span></h3><br><table id=\"table67218\"><tbody><tr><td><pre><b class=\"current\">403 Forbidden\n404 Not found\n408 Request Timeout\n410 Gone\n480 Temporarily unavailable\n484 Address incomplete\n486 Busy here\n488 Not Acceptable Here\n500 Server internal failure\n501 Not Implemented\n503 Service Unavailable\n502 Bad Gateway\n603 Declined</b></pre></td></tr></tbody></table><p><br></p><h3><span style=\"font-size: 18px;\">Notes</span></h3><ol><li><strong>Max. Sessions</strong> parameter of the callback account should be equal to or greater than 2. Otherwise the second call leg won't go through.</li></ol></div>",
  "description_text": " Principle of operation      The ANI Callback IVR application can be configured in two different ways:   Using a DID Pool and the IVR application menus (standard in the latest versions)\u00a0  Using a connection with the IP of environment and port 5062 which belongs to the internal Asterisk service.\u00a0       The first scenario is a standard one that we use in systems that are higher than 3.x version.  \u00a0 \u00a0 \u00a0\u00a0 1. Open the IVR application menu and click Add New IVR application with Type = \"Calling Card\"\u00a0  \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0using the following instruction: http://support.sippysoft.com/solution/articles/183496-step-1-add-calling-card-ivr-application  \u00a0 \u00a0 \u00a0 \u00a02.\u00a0Open the IVR application menu again and click Add New IVR application with Type = \"ANI callback\"\u00a0and with IVR Application (item #3 on image) that you have created in the\u00a0item#1.\u00a0And then click \"save\"\u00a0button to create it.  \u00a0 \u00a0 \u00a0 \u00a0 See an example:  \u00a0 \u00a0 \u00a0\u00a0 3.\u00a0After you save,\u00a0add the needed options in the\u00a0\"Advanced Parameters\"\u00a0(scroll down the page to find the table with all available options)\u00a0section of your application.  \u00a0 \u00a0 \u00a0 \u00a04. Open the DID Pool section menu and add the DID number that later you will assign to the IVR application with Type = \"ANI callback\".  \u00a0 \u00a0 \u00a0 \u00a05. Create a basic configuration of Sippy Softswitch using our video tutorial:  \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0https://sites.google.com/site/sippylearning/video-tutorials/home  \u00a0 \u00a0 \u00a0 \u00a06. Create a special Account that you will use as a \"Default Account\" in the IVR application (for outgoing calls in scope of a callback service) where USERNAME\u00a0should be used as a parameter.  \u00a0 \u00a0 \u00a0 \u00a0See example:    \u00a0 \u00a0 \u00a0 \u00a07. \u00a0Make a test call to the DID number that you have tied to your ANI callback application.\u00a0  Please note, when you call to the Callback application, the system initiates a callback to your CLI number and if the CLI answers the call, the system activates a Calling card application that requests the caller to enter the card number for proper authorization. In Sippy, Accounts play the role of Card Numbers this means you just need to enter the USERNAME of the Account for authorization and then Calling Card will ask you to enter the destination number.     Below is described a second scenario of the ANI callback configuration that was used in older versions of Sippy Softswitch (in 3.x versions and lower).   The ANI Callback application receives the call with the name of sub-application to invoke in its parameters (currently only CallingCard and 2Way Callback IVR applications are supported).  The ANI Callback application checks if there is account matching incoming CLI for that call. The matchning performed against accounts table and then against calling_card_cli_map table to identify particular account.  If both matches in previous step have failed then the ANI Callback application tries to take the default callback username from configuration. So all foreign CLIs are called back using the default callback username as authname.  The ANI Callback application optionally indicates ringback via early media or sends ringing indication and then rejects incoming call without answering.  If the match has been successful the ANI Callback application initiates new call to that CLI using credentials of the user identified on the previous step.  If the call fails, the ANI Callback application makes several retries.  When the call has been aswered, the ANI Callback starts specified sub-application and passes control to it.      Call routing setup   Add vendor connection. Set the Asterisk's host/port in the Destination field of Vendor Connection (ex: 192.168.0.100:5062).  Set the CLD Translation Rule for the connection to the value ani_<options>_<string>. For possible options please refer to the section CLD options below.  Add route to this connection to specify the ANI Callback Extension number.   When user calls the specified extension the IVR server arranges the callback call and dials the user back in several seconds. The IVR applications consider this callback call as ordinary call with the CLI identical to original call and with CLD set to <string>.     Example:   The Vendor connection has been created with the CLD Translation rule of ani_callingcard_en_th.  The user 801 called the callback extension and hanged up.  The IVR server calls the user and user picks up the phone.  The IVR session starts with the CLI 801 and CLD callingcard_en_th.  As expected the Calling Card application recognizes the call and handles it.      Available options for the \"Advanced parameters\" section of IVR application     Option   Meaning   Default   Backoff Interval   Failed attempts to make callback call will be retried after this amount of time   10 seconds   Default Account Username   The default account to use for CLIs that are not local accounts      Enable_Anonymous_Accounting   Should the real account also be charged for the first call leg of the callback call when using the Default Account. This option is the same as CLD option noanonacct   True   Delay Before Callback   First callback attempt will be performed not earlier than this time has passed   5 seconds   Hangup SIP Response Code   Which SIP response code to use when hanging up. Possible hangup codes you can see here.   603   Minimum Balance   The minimum allowed balance when the account is accessible. When balance is lower then this threshold then the default user will be tried. The value can be suffixed with a currency (e.g. '2 USD') in which case it will be converted to the user's currency prior to comparison.   Not set   Max # Of Callback Attempts   The maximum number of attempts to call back before the call canceled   3   Ringback Time   How long to indicate ringing in seconds.   0 seconds   Ringback Type   How to indicate ringing. Possible values are 'indicate' and 'earlymedia'   'indicate'   SIP Proxy For Callback Calls   SIP proxy to use when doing the outbound calls   local IP address   Scan Interval   The time between attempts to find new callback calls   5 seconds   Timeout   Time to wait for answer   300 seconds   Fixed CLI   This value is used as CLI on the first call leg of the callback call.      Disable CLI Authentication   Completely disable CLI authentication. Useful together with Default Account Username option.   False   Force CLI Authentication   Reject calls from unknown CLIs. Can be used together with Force Default Account option.   False   Force Default Account   Always make the Default Account to be owner of the first callback call leg.   False   The Reason For Diversion *   The reason parameter for the Diversion SIP header   unconditional   * starting from Sippy 2020  CLD options     Option   Description   noanonacct   Should the real account also be charged for the first call leg of the callback call when using the Default Account. This option is equivalent to the Enable Anonymous Accounting option.      Database usage     The application uses callback_requests table to store new callback requests and completed call statistics.  Description of fields of the table callback_requests     Field name   Description   anon_acct_enabled   This field can help to enable or disable an accounting for calls which use the Default Account. When the accounting enabled, then a SIP header X-2Way-Need-Bind: yes is included in the INVITE SIP request while creating second call leg so to inform b2bua that the account making this outbound call should also be charged for the first callback call leg. Default is True   authname   The callback call is originated with this identity.   call_count   This field is used to reschedule the callback call   call_id   This field can be preset to some value in which case the callback call will use this Call-ID. If the field contains NULL then the random value is generated and placed in this field during the call.   canceled   This field is intended to be set from elsewhere (XMLRPC for example). The corresponding call is forcibly canceled when this field is set to True.   connect_time   Statistics field indicating the connect time. It is NULL for failed calls.   creation_time   Statistics field containing date and time of request creation.   credit_time   First call leg of this callback call will be terminated in specified amount of seconds. This field is optional and defaults to NULL.   default_user_used   If the default callback user was chosen during callback request creation (see the Callback->DefaultUsername parameter)   disconnect_time   Statistics field indicating the end of the callback call   finished   If True then this record is statistics entry. Otherwise the record is schedule entry.   i_callback_request   The primary key   md5secret   HA1 hashed password of the user. HA1 is calculated as MD5 of the string \"<username>:<realm>:<password>\" (without quotes).   next_call   This field is used to reschedule the callback call   original_cli   Original CLI   original_set_cli   Use this CLI when creating callback call leg   original_cld   Original CLD   setup_time   Statistics field indicating the beginning of the callback call attempt   result   Callback result string (see below).   status   Callback status string (see below).   twoway_call_id   This field can be preset to some value in which case the call to destination will use this Call-ID. If the field contains NULL then the default value is constructed based on call_id and placed in this field during the call.   twoway_cli   Parameter for the 2WayCallback application.   twoway_authname   Parameter for the 2WayCallback application.   twoway_md5secret   Parameter for the 2WayCallback application.   username   The callback call is originated on behalf of this user      Status and result strings     Status and result are set by the callback subsystem and can also be extended by some applications. Currently 2 Way Callback Application is able to set own specific statuses and results.     Main flow     Order   Status   Result   Description   Is application specific                  1   Request received   NULL   Request received but not tried yet   No   2   First leg initiated   NULL   First leg initiated but not connected yet   No   3   First leg connected   NULL   First leg connected, and an IVR application started on the second call leg.   No   4   Second leg initiated   NULL   Second leg initiated but not connected yet   2 Way Callback   5   Second leg connected   NULL   Second leg connected and conversation takes place   2 Way Callback   6   Finished   Successful   Callback attempt succeeded   No      Possible intermediate and error conditions     Status   Result   Description   Is application specific               Waiting for retry   NULL   Callback attempt was unsuccessful but some more attempts are allowed   No   Finished   Out of retries   All possible attempts to call back have failed   No   Finished   Expired   The callback request was too old to even try it. This can happen if ivrd has been down for too long   No   Finished   First leg aborted   First call leg has hanged up before second call leg connects   2 Way Callback   Finished   Second leg failed   Second call leg has been rejected   2 Way Callback   Finished   Canceled   Call was canceled by administrator.   No      Supported hangup SIP response codes    403 Forbidden\n404 Not found\n408 Request Timeout\n410 Gone\n480 Temporarily unavailable\n484 Address incomplete\n486 Busy here\n488 Not Acceptable Here\n500 Server internal failure\n501 Not Implemented\n503 Service Unavailable\n502 Bad Gateway\n603 Declined      Notes   Max. Sessions parameter of the callback account should be equal to or greater than 2. Otherwise the second call leg won't go through.   ",
  "seo_data": {
    "meta_title": "",
    "meta_description": "",
    "meta_keywords": ""
  },
  "tags": [],
  "attachments": [],
  "cloud_files": [],
  "thumbs_up": 0,
  "thumbs_down": 3,
  "hits": 1624,
  "suggested": 0,
  "feedback_count": 0,
  "collaboration": {
    "convo_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJUeXBlIjoiYXJ0aWNsZSIsIkNvbnZvSWQiOiI3OTA1MS1lbiIsIlVzZXJJZCI6IjMwMTIwODk1MjQiLCJleHAiOjE2MzUzNzExMjZ9.JFDGnfpm-EExtT9703JM1NUEIH2JqrChG08KWFQqWLU"
  }
}