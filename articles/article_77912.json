{
  "id": 77912,
  "type": 1,
  "status": 2,
  "agent_id": 3763909,
  "created_at": "2013-04-22T10:56:33Z",
  "category_id": 81138,
  "folder_id": 134069,
  "title": "External Routing",
  "updated_at": "2019-12-26T13:39:51Z",
  "description": "<h1 align=\"center\">This documentation describes the obsolete feature.</h1>\n<h1 align=\"center\">\n</h1>\n<h1 align=\"center\">\n<span rel=\"tempredactor\" style=\"background-color: rgb(255, 255, 255);\">It's worth using the <a href=\"http://support.sippysoft.com/solution/articles/3000015876-ability-to-replicate-destination-set-with-all-its-content-from-one-switch-to-another\" target>following </a>one instead</span><br>\n</h1>\n<h1 align=\"center\">\n</h1>\n<h3><br></h3>\n<h3><span style=\"font-size: 18px;\">Client Side</span></h3>\n<p><br>The Sippy Softswitch supports external Routing Groups. An external Routing Group can be created by checking the 'External Group' checkbox and entering URI to access the external routing daemon. The routing works as showed in the following example. <br></p>\n<p><br></p>\n<h3><span style=\"font-size: 18px;\">Setup</span></h3>\n<p><br></p>\n<ol>\n<li>External group has been created on softswitch at IP 10.0.0.1 with name 'Group 1' and URI '<a href=\"https://172.16.0.1:7777/\" rel=\"noreferrer\">https://172.16.0.1:7777/</a>'</li>\n<li>A non-external routing group has been created on the sofswitch at IP 172.16.0.1 with name 'Group 1'</li>\n<li>Softswitch at IP 172.16.0.1 is configured to accept routing requests from 10.0.0.1 (see below).<br>\n</li>\n</ol>\n<p><br></p>\n<h3><span style=\"font-size: 18px;\">Call flow</span></h3>\n<p><br></p>\n<ol>\n<li>Call is sent to the 10.0.0.1. The routing group 'Group 1' is chosen.</li>\n<li>Softswitch at 10.0.0.1 requests the softswitch 172.16.0.1 for routing group 'Group 1' and other routing specific parameters (CLI, CLD, etc)</li>\n<li>Softswitch 172.16.0.1 lookus up an appropriate connections and rates and returns them to the 10.0.0.1.</li>\n<li>To perform correct billing the 10.0.0.1 uses the vendor with the name 'External Connections (autocreated)'. If this vendor does not exist, it is created automatically.</li>\n<li>The external connections are mapped to the corresponding connections under this special vendor. The name of the external connection equals the name of the local connection, if local connection with that name does not exist, it is created automatically.</li>\n<li>Routing information is ready and the call is forwarded to the vendor as usual. <br>\n</li>\n</ol>\n<p><br></p>\n<h3><span style=\"font-size: 18px;\">External Routing Daemon</span></h3>\n<p><br>The sippy_routed.py daemon by default listens on the local UNIX socket unix:/var/run/sippy_routed.?.sock. To make the daemon to listen on a different socket the -s command line option can be used. <br><br>When the daemon listens on HTTP or HTTPS socket the default behavior is to reject clients from all IP addresses. So you have to specify all allowed client IP addresses using the -a option. <br><br><b>!!!WARNING!!! The following steps should be performed by skilled personnel only! If you will make an error in the procedure described below, you can severely damage your system! <br></b><br>The <i>/home/ssp/etc/econfig/sippy_routed.sh</i> file on the 172.16.0.1 contains the following line, which should be changed to allow external routing.\u00a0</p>\n<p><br></p>\n<table id=\"table24408\"><tbody><tr><td class=\"\"><span class=\"current\" style=\"background-color: rgb(0, 0, 0); color: rgb(255, 255, 255);\">command_args=\"/home/ssp/apps/sippy_routed/sippy_routed.${extension} -e %%I_ENVIRONMENT%%\"</span></td></tr></tbody></table>\n<p><br></p>\n<p>Lets finish the setup described above. The goal is to make the routed daemon to accept requests on the <a href=\"https://172.16.0.1:7777/\" rel=\"noreferrer\">https://172.16.0.1:7777/</a> from the 10.0.0.1. This should be done for environment with i_environment = 3 only. <br><br><i>Please note that each environment must listen on own TCP port. TCP ports from different environments must not clash. </i><br><br>We change the /home/ssp/etc/econfig/sippy_routed.sh on the 172.16.0.1 to look like this:\u00a0</p>\n<p><br></p>\n<table id=\"table81429\"><tbody><tr><td class=\"current\"><span style=\"color: rgb(255, 255, 255); background-color: rgb(0, 0, 0);\">command_args=\"/home/ssp/apps/sippy_routed/sippy_routed.${extension} -e %%I_ENVIRONMENT%%\"<br>%%IF_ENV_IN 3<br>command_args=\"${command_args} -s <a href=\"https://172.16.0.1:7777\" rel=\"noreferrer\">https://172.16.0.1:7777</a> -a 10.0.0.1\"<br>%%ENDIF</span></td></tr></tbody></table>\n<p><br><i>WARNING! The changes to the file are applied to the running system automatically so you are strongly recommended to keep this file free of errors and typos! This also means that you don't have to restart anything to apply the changes.</i></p>\n",
  "description_text": " This documentation describes the obsolete feature. \n \n \n \nIt's worth using the following one instead \n \n \n \n   \n Client Side \n  The Sippy Softswitch supports external Routing Groups. An external Routing Group can be created by checking the 'External Group' checkbox and entering URI to access the external routing daemon. The routing works as showed in the following example.   \n   \n Setup \n   \n \n External group has been created on softswitch at IP 10.0.0.1 with name 'Group 1' and URI 'https://172.16.0.1:7777/' \n A non-external routing group has been created on the sofswitch at IP 172.16.0.1 with name 'Group 1' \n Softswitch at IP 172.16.0.1 is configured to accept routing requests from 10.0.0.1 (see below). \n \n \n   \n Call flow \n   \n \n Call is sent to the 10.0.0.1. The routing group 'Group 1' is chosen. \n Softswitch at 10.0.0.1 requests the softswitch 172.16.0.1 for routing group 'Group 1' and other routing specific parameters (CLI, CLD, etc) \n Softswitch 172.16.0.1 lookus up an appropriate connections and rates and returns them to the 10.0.0.1. \n To perform correct billing the 10.0.0.1 uses the vendor with the name 'External Connections (autocreated)'. If this vendor does not exist, it is created automatically. \n The external connections are mapped to the corresponding connections under this special vendor. The name of the external connection equals the name of the local connection, if local connection with that name does not exist, it is created automatically. \n Routing information is ready and the call is forwarded to the vendor as usual.  \n \n \n   \n External Routing Daemon \n  The sippy_routed.py daemon by default listens on the local UNIX socket unix:/var/run/sippy_routed.?.sock. To make the daemon to listen on a different socket the -s command line option can be used.   When the daemon listens on HTTP or HTTPS socket the default behavior is to reject clients from all IP addresses. So you have to specify all allowed client IP addresses using the -a option.   !!!WARNING!!! The following steps should be performed by skilled personnel only! If you will make an error in the procedure described below, you can severely damage your system!   The /home/ssp/etc/econfig/sippy_routed.sh file on the 172.16.0.1 contains the following line, which should be changed to allow external routing.\u00a0 \n   \n command_args=\"/home/ssp/apps/sippy_routed/sippy_routed.${extension} -e %%I_ENVIRONMENT%%\" \n   \n Lets finish the setup described above. The goal is to make the routed daemon to accept requests on the https://172.16.0.1:7777/ from the 10.0.0.1. This should be done for environment with i_environment = 3 only.   Please note that each environment must listen on own TCP port. TCP ports from different environments must not clash.   We change the /home/ssp/etc/econfig/sippy_routed.sh on the 172.16.0.1 to look like this:\u00a0 \n   \n command_args=\"/home/ssp/apps/sippy_routed/sippy_routed.${extension} -e %%I_ENVIRONMENT%%\" %%IF_ENV_IN 3 command_args=\"${command_args} -s https://172.16.0.1:7777 -a 10.0.0.1\" %%ENDIF \n  WARNING! The changes to the file are applied to the running system automatically so you are strongly recommended to keep this file free of errors and typos! This also means that you don't have to restart anything to apply the changes. \n",
  "seo_data": {
    "meta_title": "",
    "meta_description": "",
    "meta_keywords": ""
  },
  "tags": [
    "Routing"
  ],
  "attachments": [],
  "cloud_files": [],
  "thumbs_up": 1,
  "thumbs_down": 1,
  "hits": 268,
  "suggested": 0,
  "feedback_count": 0,
  "collaboration": {
    "convo_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJUeXBlIjoiYXJ0aWNsZSIsIkNvbnZvSWQiOiI3NzkxMi1lbiIsIlVzZXJJZCI6IjMwMTIwODk1MjQiLCJleHAiOjE2MzUzNzEwMzN9.EFFlc0yR0YN8X7ARozDapVMD-tiZrXMht6Ijme0vCBE"
  }
}