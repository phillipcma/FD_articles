[
  {
    "id": 3000073010,
    "type": 1,
    "status": 2,
    "agent_id": 4049322,
    "created_at": "2017-12-12T14:49:37Z",
    "category_id": 107132,
    "folder_id": 3000013865,
    "title": "General Information",
    "updated_at": "2018-06-06T16:56:00Z",
    "description": "<h2 style=\"\">Description</h2><p style=\"\">The binary upload facility has been developed to add an ability of bulk upload of system entities.</p><p style=\"\">As of version 5.1 binary upload is supported only for Routes (Destination Sets) and Rates (Tariff).</p><p style=\"\"><br></p><p style=\"\">It's planned to expand this functionality further in future versions.</p><p style=\"\"><br></p><h2 style=\"\">How it works</h2><p style=\"\">There are two generic XMLAPI methods to upload binary files:</p><ul><li style=\"\"><a href=\"https://support.sippysoft.com/solution/articles/3000073011-getuploadtoken-\" rel=\"noreferrer noopener\" target=\"_blank\">getUploadToken()</a></li><li style=\"\"><a href=\"https://support.sippysoft.com/solution/articles/3000073012-getuploadstatus-\" rel=\"noreferrer noopener\" target=\"_blank\">getUploadStatus()</a></li></ul><p style=\"\"><br></p><p style=\"\">The whole process is as follows:</p><ul><li style=\"\">the softswitch operator initiates a file upload by generating new upload token. He should call <a href=\"https://support.sippysoft.com/solution/articles/3000073011-getuploadtoken-\" rel=\"noreferrer noopener\" target=\"_blank\">getUploadToken()</a> method with specifying system entity that needs to be altered. Also the operator can define the date and time when the file should be processed. The method returns an unique token to identify this exact upload and an unique URL where the file are to be uploaded to.</li><li style=\"\">the operator uploads the file at the unique URL.</li><li style=\"\">the operator can check the status of processing of uploaded file using <a href=\"https://support.sippysoft.com/solution/articles/3000073012-getuploadstatus-\" rel=\"noreferrer noopener\" target=\"_blank\">getUploadStatus()</a>. When the processing is done the <a href=\"https://support.sippysoft.com/solution/articles/3000073012-getuploadstatus-\" rel=\"noreferrer noopener\" target=\"_blank\">getUploadStatus()</a> returns URL where the detailed report can be downloaded from.</li></ul><p style=\"\"><br></p><h2 style=\"\">Details of implementation</h2><ul><li>the file is to be uploaded using POST method and <a href=\"https://en.wikipedia.org/wiki/Chunked_transfer_encoding\" rel=\"noreferrer noopener\" target=\"_blank\">chunked transfer encoding</a>.</li><li>the report is available only on node where the file has been uploaded on.</li><li style=\"\">when the file processing is completed, the report is available by default only for one week.</li><li style=\"\">when the uploaded file is being processed, the WEBUI does not allow to upload/modify/delete system entities related to the tariff/Destination set that is processed.\u00a0</li></ul>",
    "description_text": " Description  The binary upload facility has been developed to add an ability of bulk upload of system entities.  As of version 5.1 binary upload is supported only for Routes (Destination Sets) and Rates (Tariff).     It's planned to expand this functionality further in future versions.     How it works  There are two generic XMLAPI methods to upload binary files:   getUploadToken()  getUploadStatus()      The whole process is as follows:   the softswitch operator initiates a file upload by generating new upload token. He should call getUploadToken() method with specifying system entity that needs to be altered. Also the operator can define the date and time when the file should be processed. The method returns an unique token to identify this exact upload and an unique URL where the file are to be uploaded to.  the operator uploads the file at the unique URL.  the operator can check the status of processing of uploaded file using getUploadStatus(). When the processing is done the getUploadStatus() returns URL where the detailed report can be downloaded from.      Details of implementation   the file is to be uploaded using POST method and chunked transfer encoding.  the report is available only on node where the file has been uploaded on.  when the file processing is completed, the report is available by default only for one week.  when the uploaded file is being processed, the WEBUI does not allow to upload/modify/delete system entities related to the tariff/Destination set that is processed.\u00a0  ",
    "seo_data": {
      "meta_title": "",
      "meta_description": "",
      "meta_keywords": ""
    },
    "tags": [],
    "attachments": [],
    "cloud_files": [],
    "thumbs_up": 0,
    "thumbs_down": 0,
    "hits": 512,
    "suggested": 0,
    "feedback_count": 0
  },
  {
    "id": 3000073011,
    "type": 1,
    "status": 2,
    "agent_id": 4049322,
    "created_at": "2017-12-12T14:50:46Z",
    "category_id": 107132,
    "folder_id": 3000013865,
    "title": "getUploadToken()",
    "updated_at": "2018-06-04T11:32:59Z",
    "description": "<h2 style=\"\">Description</h2><p style=\"\"><strong>Method available starting from 5.1 version of Sippy.</strong></p><h2 style=\"\"><span style=\"font-size: 14px;\">The application supports <strong>trusted mode</strong> and <strong>i_customer</strong> parameter should be supplied in this case.</span></h2><p style=\"\">Initiate a new binary upload.</p><p style=\"\"><br></p><h3 style=\"\">Parameters</h3><ul><li style=\"\">i_upload_type - upload type. Integer. Mandatory. Call <a href=\"https://support.sippysoft.com/solution/articles/3000055804-xml-rpc-api-get-system-dictionaries\" rel=\"noreferrer noopener\" target=\"_blank\">getDictionary(upload_types)</a> to get all possible values.</li><li style=\"\">process_on - date and time when to start processing the uploaded file. String in <a href=\"https://support.sippysoft.com/solution/articles/3000073101-xml-rpc-api-data-types-specifications\" rel=\"noreferrer noopener\">dateTime.iso8601 format in UTC</a> format. Optional. Default is now.</li><li style=\"\">expires_on - date and time until the URL for upload is valid. String in <a href=\"https://support.sippysoft.com/solution/articles/3000073101-xml-rpc-api-data-types-specifications\" rel=\"noreferrer noopener\">dateTime.iso8601 format in UTC</a> . Optional. Default is now plus 1 day.</li><li style=\"\">params - any optional parameters to be passed. Any type or structure supported by XMLRPC. Optional.</li></ul><p style=\"\"><br></p><h3 style=\"\">Returns</h3><ul><li style=\"\">result - <strong>OK</strong> means that operation successful. String.</li><li style=\"\">token - an unique token. String.</li><li style=\"\">url - an unique URL to upload file to. String.</li></ul><p style=\"\"><br></p><h3 style=\"\">Implementation details</h3><p style=\"margin-left: 20px;\">For <strong>routes</strong> upload the <em>params</em> parameter should be a structure with a valid i_destination_set integer value.</p><p style=\"margin-left: 20px;\">For <strong>rates</strong> upload the <em>params</em> parameter should be a structure with a valid i_tariff integer value.</p>",
    "description_text": " Description  Method available starting from 5.1 version of Sippy.  The application supports trusted mode and i_customer parameter should be supplied in this case.  Initiate a new binary upload.     Parameters   i_upload_type - upload type. Integer. Mandatory. Call getDictionary(upload_types) to get all possible values.  process_on - date and time when to start processing the uploaded file. String in dateTime.iso8601 format in UTC format. Optional. Default is now.  expires_on - date and time until the URL for upload is valid. String in dateTime.iso8601 format in UTC . Optional. Default is now plus 1 day.  params - any optional parameters to be passed. Any type or structure supported by XMLRPC. Optional.      Returns   result - OK means that operation successful. String.  token - an unique token. String.  url - an unique URL to upload file to. String.      Implementation details  For routes upload the params parameter should be a structure with a valid i_destination_set integer value.  For rates upload the params parameter should be a structure with a valid i_tariff integer value. ",
    "seo_data": {
      "meta_title": "",
      "meta_description": "",
      "meta_keywords": ""
    },
    "tags": [],
    "attachments": [],
    "cloud_files": [],
    "thumbs_up": 0,
    "thumbs_down": 0,
    "hits": 274,
    "suggested": 0,
    "feedback_count": 0
  },
  {
    "id": 3000073012,
    "type": 1,
    "status": 2,
    "agent_id": 4049322,
    "created_at": "2017-12-12T14:51:27Z",
    "category_id": 107132,
    "folder_id": 3000013865,
    "title": "getUploadStatus()",
    "updated_at": "2020-04-30T17:30:36Z",
    "description": "<h2>Description</h2><p><strong>Method available starting from 5.1 version of Sippy</strong></p><p><span style=\"font-size: 14px;\">The application supports <strong>trusted mode</strong> and the <strong>i_customer</strong> parameter should be provided in this case.</span></p><p>Get status of an upload</p><p><br></p><h3>Parameters</h3><ul><li>token - token returned by <a href=\"https://support.sippysoft.com/solution/articles/3000073011-getuploadtoken-\" rel=\"noreferrer noopener\" target=\"_blank\">getUploadToken().</a> String. Mandatory.</li></ul><p><br></p><h3>Returns</h3><ul><li>result - <strong>OK</strong> means that operation the operation was successful. String.</li><li>status - the status of processing of the uploaded file. String.</li><li>process_on - date and time when the processing of the files starts. String.</li><li>expires_on - date and time when the system stops any attempts to process the file. String.</li><li>status_changed_on - date and time when the <em>status</em> has been changed. String.</li><li>url - URL where the report can be downloaded from. String.</li></ul><p><br></p><h3>Implementation details</h3><p>Status would get changed only in case the file is uploaded, possible values:</p><ul><li>INIT_TOKEN</li><li>FILE_UPLOADED</li><li>PROCESSING</li><li>FAIL</li><li>DONE</li></ul><p>After <u>INIT_TOKEN</u> the file upload should be done, the next status would be <u>FILE_UPLOADED,</u> and <u>PROCESSING</u> at specified process_on, then either <u>FAIL</u> (unsuccessful update, unable to parse content, update with errors, etc) or <u>DONE</u> (successful processing of all rows with commands, no errors generated).</p><p>PROCESSING means that the new php process would be started and the start of processing of the uploaded file. If the <u>PROCESSING</u> lasts for more then 1 day, the upload task would be dropped, setting the status to <u>FAIL</u></p><p style=\"margin-left: 20px;\"><br></p><p style=\"margin-left: 20px;\"><strong>The <em>url</em> is returned only when the file has been processed.</strong></p>",
    "description_text": " Description  Method available starting from 5.1 version of Sippy  The application supports trusted mode and the i_customer parameter should be provided in this case.  Get status of an upload     Parameters   token - token returned by getUploadToken(). String. Mandatory.      Returns   result - OK means that operation the operation was successful. String.  status - the status of processing of the uploaded file. String.  process_on - date and time when the processing of the files starts. String.  expires_on - date and time when the system stops any attempts to process the file. String.  status_changed_on - date and time when the status has been changed. String.  url - URL where the report can be downloaded from. String.      Implementation details  Status would get changed only in case the file is uploaded, possible values:   INIT_TOKEN  FILE_UPLOADED  PROCESSING  FAIL  DONE   After INIT_TOKEN the file upload should be done, the next status would be FILE_UPLOADED, and PROCESSING at specified process_on, then either FAIL (unsuccessful update, unable to parse content, update with errors, etc) or DONE (successful processing of all rows with commands, no errors generated).  PROCESSING means that the new php process would be started and the start of processing of the uploaded file. If the PROCESSING lasts for more then 1 day, the upload task would be dropped, setting the status to FAIL     The url is returned only when the file has been processed. ",
    "seo_data": {
      "meta_title": "",
      "meta_description": "",
      "meta_keywords": ""
    },
    "tags": [],
    "attachments": [],
    "cloud_files": [],
    "thumbs_up": 1,
    "thumbs_down": 0,
    "hits": 197,
    "suggested": 0,
    "feedback_count": 0
  }
]