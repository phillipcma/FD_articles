[
  {
    "id": 78270,
    "type": 1,
    "status": 2,
    "agent_id": 3763909,
    "created_at": "2013-04-23T09:17:25Z",
    "category_id": 82218,
    "folder_id": 134765,
    "title": "Voicemail application",
    "updated_at": "2018-07-24T09:53:36Z",
    "description": "<div style=\"\"><h3 style=\"\"><span style=\"font-size: 24px;\">Overview</span></h3><p style=\"\"><br>This application consists of two subsystems:</p><ul><li>Voice Mail Recording Subsystem</li><li>Listen to Voice Mail Subsystem</li></ul><p><br>Both of them look like independent applications and require independent call routing setup.<br><br>Since version 2.1 of Sippy Softswitch it is possible to mix these applications: when Voice Mail Recording scenario is in action, user can press * and access his Voicemail after Voice Mail PIN check. This feature is controlled by <strong>VM Dialing Access</strong> account flag.</p><hr><strong><font size=\"4\">Voice Mail Recording Subsystem</font></strong><br><br><em>Note. This application is executed automatically with no additional setup when On-Net Voicemail Connection is enabled.<br></em><br>This application is executed when the callee is unavailable. The application plays prompt and records a caller's voice message into the voice mailbox. These messages can be later inspected by the owner of mailbox using the Listen To Voice Mail Subsystem.</div><div style=\"\"><br></div><div style=\"\"><span style=\"font-size: 18px;\">Voicemail control options</span></div><ul><li style=\"\"><strong><em>account's preferences</em></strong><span style=\"font-size: 18px;\"><img style=\"width: 945px; height: 119.903px;\" data-uniquekey=\"1526038660194\" data-fileid=\"3036410453\" data-filelink=\"https://s3.amazonaws.com/cdn.freshdesk.com/data/helpdesk/attachments/production/3036410453/original/9DkL5QGUpOcn1XPFlBjxaboiMsBFV9cUKQ.jpg?1526038953\" class=\"fr-dib fr-draggable fr-fil\" src=\"https://s3.amazonaws.com/cdn.freshdesk.com/data/helpdesk/attachments/production/3036410453/original/9DkL5QGUpOcn1XPFlBjxaboiMsBFV9cUKQ.jpg?1526038953\"></span></li></ul><p style=\"\"><br></p><p style=\"\">Main checkbox to be set - <strong>VM Enabled</strong>.\u00a0</p><p style=\"\"><strong>VM Dialin Access</strong> checkbox allows reaching voicemail by dialing <strong>VM Check #</strong> with authentication under that account.</p><ul><li style=\"\"><strong><em>routing group's preferences</em></strong></li></ul><p style=\"\"><img style=\"width: 952px; height: 62.8505px;\" data-uniquekey=\"1526038979622\" data-fileid=\"3036410530\" data-filelink=\"https://s3.amazonaws.com/cdn.freshdesk.com/data/helpdesk/attachments/production/3036410530/original/Gr3Y4Am9nraYgRArj-CrJuKJ40bpIs5lbA.jpg?1526039206\" class=\"fr-dib fr-draggable\" src=\"https://s3.amazonaws.com/cdn.freshdesk.com/data/helpdesk/attachments/production/3036410530/original/Gr3Y4Am9nraYgRArj-CrJuKJ40bpIs5lbA.jpg?1526039206\"></p><p style=\"\"><strong>Default</strong> setting allows usage of built-in System Vendor/System Connection</p><p style=\"\"><br></p><p style=\"\"><br></p><h2 id=\"ListentoVoiceMailSubsystem\"><strong><font size=\"4\">Listen to Voice Mail Subsystem</font></strong></h2><p style=\"\">This subsystem allows the user to listen to the voice messages left by other callers. Could be useful when the user wants to listen his voicemail box by calling to DID number.</p><p style=\"\"><br></p><p style=\"\"><strong>In the simple case send the call to the VM Check # to IP of the system, authenticate as account, and proceed with manage of mailbox.</strong></p><p><br></p><h3 id=\"Callroutingsetup1\" style=\"\">Enhanced c<font size=\"3\">all routing setup</font></h3><ol><li>Add a DID, assign it to the account you want to use.</li><li>In account set <strong>VM Enabled\u00a0</strong>checkbox and configure some PIN code for it. The CLI should match the account's username, otherwise the call would be rejected. You can set the CLI translation rule for this account to the account's username.</li><li>Add vendor connection. Set the Asterisk's host/port in the Destination field of Vendor Connection (ex: 192.168.0.100:5062).</li><li>Set the CLD Translation Rule for the connection to the value <strong>s/.*/vm/</strong></li><li>Correct the Onnet routing value to the connection you've configured.</li><li>Call to the DID number from outside and you'd be prompted to enter the PIN code of the account. Once entered, you'd be able to manage its voicemail box.</li></ol><p style=\"\"><br></p><h2 id=\"Configurationoptions\" style=\"\">Configuration options to be done in ivr_config DB table</h2><p dir=\"ltr\" style=\"\">Case no record for the needed option is present in ivr_config table, the hard-coded Default value is used. After addition of new option reload of settings would be done by ivrd itself within ~1 minute. Options for the subsystem are stored in the database with the following keys:</p><table><tbody><tr><td style=\"width: 5.3801%;\"><strong>Section</strong><br></td><td style=\"width: 14.7173%;\"><strong>Option</strong><br></td><td style=\"width: 19.0059%;\"><strong>Value</strong><br></td><td style=\"width: 53.0994%;\"><strong>Meaning</strong><br></td><td style=\"width: 9.5906%;\"><strong>Default</strong><br></td></tr><tr><td style=\"width: 5.3801%;\"><strong>v</strong><strong>oicemail</strong><br></td><td style=\"width: 14.7173%;\"><strong>skipaftercmd</strong><br></td><td style=\"width: 19.0059%;\">Yes/No<br></td><td style=\"width: 53.0994%;\">Whether to skip to the next message after the current message has been acted upon (deleted/undeleted/stored)<br></td><td style=\"width: 9.5906%;\">Yes<br></td></tr><tr><td style=\"width: 5.3801%;\"><strong>v</strong><strong>oicemail</strong><br></td><td style=\"width: 14.7173%;\"><strong>m</strong><strong>axsilencetimesec</strong><br></td><td style=\"width: 19.0059%;\">X seconds<br></td><td style=\"width: 53.0994%;\">Voice message or custom prompt recording stops automatically if this number of seconds of silence has been detected, replace X with needed number<br></td><td style=\"width: 9.5906%;\">5 seconds<br></td></tr><tr><td style=\"width: 5.3801%;\"><strong>v</strong><strong>oicemail</strong><br></td><td style=\"width: 14.7173%;\"><strong>maxmessagetimemsec</strong><br></td><td style=\"width: 19.0059%;\">X milliseconds<br></td><td style=\"width: 53.0994%;\">The maximum allowed recording duration for the voice message, replace X with needed number<br></td><td style=\"width: 9.5906%;\">60000 milliseconds<br></td></tr><tr><td style=\"width: 5.3801%;\"><strong>v</strong><strong>oicemail</strong><br></td><td style=\"width: 14.7173%;\"><strong>m</strong><strong>axgreetingtimemsec</strong><br></td><td style=\"width: 19.0059%;\">X milliseconds<br></td><td style=\"width: 53.0994%;\">The maximum allowed recording duration for the custom prompts (busy and unavailable messages), replace X with needed number<br></td><td style=\"width: 9.5906%;\">30000 milliseconds<br></td></tr><tr><td style=\"width: 5.3801%;\"><strong>voicemail</strong><br></td><td style=\"width: 14.7173%;\"><strong>maxmessages</strong><br></td><td style=\"width: 19.0059%;\">X<br></td><td style=\"width: 53.0994%;\">The maximum allowed number of new voicemail messages on per-account basis, after reaching this limit mboxoverflowmode policy would be applied, replace X with needed number<em>. Option available starting from 5.1 version of Sippy</em><br></td><td style=\"width: 9.5906%;\">200<br></td></tr><tr><td style=\"width: 5.3801%;\"><strong>voicemail</strong><br></td><td style=\"width: 14.7173%;\"><strong>mboxoverflowmode</strong><br></td><td style=\"width: 19.0059%;\">reject/purge<br></td><td style=\"width: 53.0994%;\">Policy to be applied after number of new voicemail messages reaches maxmessages limit.<br>Option reject will reject attempts to leave new voicemail messages, option purge will purge one of the new messages with oldest arrived time.<em>\u00a0Option available starting from 5.1 version of Sippy</em><br></td><td style=\"width: 9.5906%;\">reject<br></td></tr></tbody></table><h2 style=\"\"><br></h2><h2 style=\"\">Starting from <strong>5.2 version</strong> the new menu to manage Voicemail is present in Environment additional preferences:</h2><p style=\"\"><img data-uniquekey=\"1532425180965\" data-fileid=\"3038021435\" data-filelink=\"https://s3.amazonaws.com/cdn.freshdesk.com/data/helpdesk/attachments/production/3038021435/original/weT3gW6v-MORWyqNsTtAP1VtZiaTFyQClA.jpg?1532425902\" style=\"width: 951px; height: 212.509px;\" class=\"fr-dib fr-draggable fr-fil\" src=\"https://s3.amazonaws.com/cdn.freshdesk.com/data/helpdesk/attachments/production/3038021435/original/weT3gW6v-MORWyqNsTtAP1VtZiaTFyQClA.jpg?1532425902\"></p><p style=\"\"><br></p><p style=\"\"><img style=\"width: 711px; height: 280.855px;\" data-uniquekey=\"1532425180965\" data-fileid=\"3038021422\" data-filelink=\"https://s3.amazonaws.com/cdn.freshdesk.com/data/helpdesk/attachments/production/3038021422/original/edJpYaQ30FqIHyhPlvp4l0BBC2Ae5eys1w.jpg?1532425870\" class=\"fr-dib fr-draggable fr-fil\" src=\"https://s3.amazonaws.com/cdn.freshdesk.com/data/helpdesk/attachments/production/3038021422/original/edJpYaQ30FqIHyhPlvp4l0BBC2Ae5eys1w.jpg?1532425870\"></p><p style=\"\"><br></p><h2 style=\"\">Obsolete options:</h2><p style=\"\">voicemail - spooldir, folder where the voice message files are stored(obsolete since in 1.5), default value /var/spool/voicemail</p><p style=\"\"><br></p><h3 style=\"\"><span style=\"font-size: 13px;\"><font size=\"3\">Old call routing setup</font></span></h3><ol><li>Add vendor connection. Set the Asterisk's host/port in the Destination field of Vendor Connection (ex: <strong>192.168.0.100:5062</strong>).</li><li>Set the CLD Translation Rule for the connection to the value <strong>s/^/vm-/</strong></li><li>Add route to this connection in the same way as for normal calls but with lower preference than for normal calls. This will forward the call to the Voice Mail after the normal call to destination has failed. (Smaller value in the field Preference of the Vendor Connection Route means lower preference.)</li></ol><p style=\"\"><br></p><h2 id=\"Databaseusage\" style=\"\">Database usage</h2><p dir=\"ltr\" style=\"\">The Voice Mail IVR Application stores information about voice messages in the database in the table <strong>vm_messages</strong>.</p><p dir=\"ltr\" style=\"\"><br></p><p dir=\"ltr\" style=\"\">Since the 1.5 version the Voice Mail application stopped using the files to store audio and stores the voice messages and custom greetings in the database instead (tables <strong>vm_message_data</strong>, <strong>vm_greetings</strong> and some helper tables).</p><p dir=\"ltr\" style=\"\"><br></p><p dir=\"ltr\" style=\"\">In order to apply the DB modification properly, set i_ivr_instance to 1 for the added records.</p><p dir=\"ltr\" style=\"\">That way the option would be applied to the whole environment.</p><p><br></p>",
    "description_text": "  Overview   This application consists of two subsystems:   Voice Mail Recording Subsystem  Listen to Voice Mail Subsystem    Both of them look like independent applications and require independent call routing setup.  Since version 2.1 of Sippy Softswitch it is possible to mix these applications: when Voice Mail Recording scenario is in action, user can press * and access his Voicemail after Voice Mail PIN check. This feature is controlled by VM Dialing Access account flag.  Voice Mail Recording Subsystem  Note. This application is executed automatically with no additional setup when On-Net Voicemail Connection is enabled.  This application is executed when the callee is unavailable. The application plays prompt and records a caller's voice message into the voice mailbox. These messages can be later inspected by the owner of mailbox using the Listen To Voice Mail Subsystem.     Voicemail control options   account's preferences      Main checkbox to be set - VM Enabled.\u00a0  VM Dialin Access checkbox allows reaching voicemail by dialing VM Check # with authentication under that account.   routing group's preferences     Default setting allows usage of built-in System Vendor/System Connection        Listen to Voice Mail Subsystem  This subsystem allows the user to listen to the voice messages left by other callers. Could be useful when the user wants to listen his voicemail box by calling to DID number.     In the simple case send the call to the VM Check # to IP of the system, authenticate as account, and proceed with manage of mailbox.     Enhanced call routing setup   Add a DID, assign it to the account you want to use.  In account set VM Enabled\u00a0checkbox and configure some PIN code for it. The CLI should match the account's username, otherwise the call would be rejected. You can set the CLI translation rule for this account to the account's username.  Add vendor connection. Set the Asterisk's host/port in the Destination field of Vendor Connection (ex: 192.168.0.100:5062).  Set the CLD Translation Rule for the connection to the value s/.*/vm/  Correct the Onnet routing value to the connection you've configured.  Call to the DID number from outside and you'd be prompted to enter the PIN code of the account. Once entered, you'd be able to manage its voicemail box.      Configuration options to be done in ivr_config DB table  Case no record for the needed option is present in ivr_config table, the hard-coded Default value is used. After addition of new option reload of settings would be done by ivrd itself within ~1 minute. Options for the subsystem are stored in the database with the following keys:  Section   Option   Value   Meaning   Default   voicemail   skipaftercmd   Yes/No   Whether to skip to the next message after the current message has been acted upon (deleted/undeleted/stored)   Yes   voicemail   maxsilencetimesec   X seconds   Voice message or custom prompt recording stops automatically if this number of seconds of silence has been detected, replace X with needed number   5 seconds   voicemail   maxmessagetimemsec   X milliseconds   The maximum allowed recording duration for the voice message, replace X with needed number   60000 milliseconds   voicemail   maxgreetingtimemsec   X milliseconds   The maximum allowed recording duration for the custom prompts (busy and unavailable messages), replace X with needed number   30000 milliseconds   voicemail   maxmessages   X   The maximum allowed number of new voicemail messages on per-account basis, after reaching this limit mboxoverflowmode policy would be applied, replace X with needed number. Option available starting from 5.1 version of Sippy   200   voicemail   mboxoverflowmode   reject/purge   Policy to be applied after number of new voicemail messages reaches maxmessages limit. Option reject will reject attempts to leave new voicemail messages, option purge will purge one of the new messages with oldest arrived time.\u00a0Option available starting from 5.1 version of Sippy   reject      Starting from 5.2 version the new menu to manage Voicemail is present in Environment additional preferences:            Obsolete options:  voicemail - spooldir, folder where the voice message files are stored(obsolete since in 1.5), default value /var/spool/voicemail     Old call routing setup   Add vendor connection. Set the Asterisk's host/port in the Destination field of Vendor Connection (ex: 192.168.0.100:5062).  Set the CLD Translation Rule for the connection to the value s/^/vm-/  Add route to this connection in the same way as for normal calls but with lower preference than for normal calls. This will forward the call to the Voice Mail after the normal call to destination has failed. (Smaller value in the field Preference of the Vendor Connection Route means lower preference.)      Database usage  The Voice Mail IVR Application stores information about voice messages in the database in the table vm_messages.     Since the 1.5 version the Voice Mail application stopped using the files to store audio and stores the voice messages and custom greetings in the database instead (tables vm_message_data, vm_greetings and some helper tables).     In order to apply the DB modification properly, set i_ivr_instance to 1 for the added records.  That way the option would be applied to the whole environment.    ",
    "seo_data": {
      "meta_title": "",
      "meta_description": "",
      "meta_keywords": ""
    },
    "tags": [],
    "attachments": [],
    "cloud_files": [],
    "thumbs_up": 1,
    "thumbs_down": 2,
    "hits": 1101,
    "suggested": 0,
    "feedback_count": 0
  },
  {
    "id": 78274,
    "type": 1,
    "status": 2,
    "agent_id": 3763909,
    "created_at": "2013-04-23T09:27:35Z",
    "category_id": 82218,
    "folder_id": 134765,
    "title": "Play Balance application",
    "updated_at": "2019-12-09T18:35:51Z",
    "description": "<h3><span style=\"font-size: 18px;\">Overview</span></h3><p><br></p><p>The purpose of this IVR is to announce either balance or maximum call duration, depending on application settings. The Play Balance IVR application authorizes accounts by CLI only. Trusted Numbers are not supported.</p><h3><br></h3><h3><span style=\"font-size: 18px;\">Call routing setup</span></h3><p><br></p><ol><li>Add vendor connection. Set the Asterisk's host/port in the Destination field of Vendor Connection (ex: <strong>192.168.0.100:5062</strong>).</li><li>Set the CLD Translation Rule for the connection to the value <strong>s/.*/balance/</strong></li><li>Add route to this connection and specify the Play Balance Extension number.</li></ol><p><em><br></em></p><p><font size=\"1\"><em>* - don't forget to change IP 192.168.0.100 to the IP of your sippy environment.</em></font></p><h3><span style=\"font-size: 18px;\">Configuration options</span></h3><p><br>None of application specific options exists.</p><p><br></p><h3><span style=\"font-size: 18px;\">CLD based options</span></h3><p><br></p><table id=\"table32264\" width=\"1015\"><tbody><tr><td><strong>earlymedia</strong></td><td>Use early media mode till the destination has answered</td></tr><tr><td><strong>cld&lt;DEST&gt;</strong></td><td>Announce the maximum allowed call duration to the specified destination DEST. If the duration is unlimited then no duration is announced. (new in 1.7)</td></tr><tr><td><strong>nobalance</strong></td><td>Do not announce balance. Useful with cld option. (available post 1.7.1).</td></tr><tr><td><strong>nopin</strong></td><td>Never ask PIN</td></tr><tr><td><strong>onlow&lt;sum&gt;</strong></td><td>Play balance only if the user's balance is less then the sum. Format of the sum see in the example below. The use of earlymedia option together with this option is often a good idea.</td></tr><tr><td><strong>planminutes</strong></td><td class=\"current\">Play service plan minutes instead of a sum of plan minutes and duration calculated by tariff. This option does not affect actual maximum duration of a call which is a sum of plan minutes and duration calculated by tariff. NOTE : that option will not work without specifying <strong>cld&lt;DEST&gt;</strong> in the CLD Translation Rule.<br></td></tr></tbody></table><p><br></p><p>Examples of CLD translation rule:\u00a0</p><p><br></p><table id=\"table53325\" width=\"960\"><tbody><tr><td class=\"current\">\u00a0 s/.*/balance_earlymedia_nopin/<br>\u00a0 s/.*/balance_earlymedia_onlow10.23USD/<br>\u00a0 s/^/balance_nobalance_earlymedia_cld/<br>\u00a0 s/^/balance_nobalance_nopin_cld1_planminutes/ - plays the available amount of service plan minutes for '1' prefix<br></td></tr></tbody></table><p></p><p><br></p><h3><span style=\"font-size: 18px;\">Database usage</span></h3><p><br></p><p>The application uses the accounts table for authentication purposes and to retrieve the value of the user's balance. It also uses the xrates and currencies tables to convert between currencies.</p><p><br></p><p><font size=\"4\"><strong>Announce minutes instead of balance<br></strong></font></p><p><br></p><p>Insert a new parameters into <strong>ivr_config:</strong></p><pre contenteditable=\"false\" rel=\"highlighter\">INSERT INTO ivr_config (section, option, value, i_ivr_instance) VALUES ('callingcard', 'onlyminutesduration', 'true', 2);</pre><p>\u00a0</p><p><strong>i_ivr_instance</strong> - unique value, use value 2 or higher</p><p><br></p><p>In the CLD translation rule<strong>\u00a0'instanceX'</strong> parameter with corresponding value must be inserted, e.g.</p><p><span data-darkreader-inline-bgcolor=\"\" style=\"background-color: rgb(255, 255, 255); --darkreader-inline-bgcolor:#181a1b;\"><br></span></p><table border=\"1\" cellpadding=\"0\" cellspacing=\"0\" id=\"table24325\" style=\"border-collapse: collapse;\" width=\"960\"><tbody><tr><td class=\"current\"><span data-darkreader-inline-bgcolor=\"\" style=\"background-color: rgb(216, 216, 216); --darkreader-inline-bgcolor:#232627;\"><span data-darkreader-inline-bgcolor=\"\" style=\"background-color: rgb(255, 255, 255); --darkreader-inline-bgcolor:#181a1b;\">s/^/balance_earlymedia_cld/</span></span></td></tr></tbody></table><p><br></p><p></p><p>turns into</p><table border=\"1\" cellpadding=\"0\" cellspacing=\"0\" class=\"current\" id=\"table92324\" style=\"border-collapse: collapse;\" width=\"959\"><tbody><tr><td class=\"current\">s/^/balance_nobalance_earlymedia_instance2_cld/</td></tr></tbody></table><p><br></p><p><br></p><p></p>",
    "description_text": " Overview     The purpose of this IVR is to announce either balance or maximum call duration, depending on application settings. The Play Balance IVR application authorizes accounts by CLI only. Trusted Numbers are not supported.     Call routing setup      Add vendor connection. Set the Asterisk's host/port in the Destination field of Vendor Connection (ex: 192.168.0.100:5062).  Set the CLD Translation Rule for the connection to the value s/.*/balance/  Add route to this connection and specify the Play Balance Extension number.      * - don't forget to change IP 192.168.0.100 to the IP of your sippy environment.  Configuration options   None of application specific options exists.     CLD based options     earlymedia  Use early media mode till the destination has answered  cld<DEST>  Announce the maximum allowed call duration to the specified destination DEST. If the duration is unlimited then no duration is announced. (new in 1.7)  nobalance  Do not announce balance. Useful with cld option. (available post 1.7.1).  nopin  Never ask PIN  onlow<sum>  Play balance only if the user's balance is less then the sum. Format of the sum see in the example below. The use of earlymedia option together with this option is often a good idea.  planminutes  Play service plan minutes instead of a sum of plan minutes and duration calculated by tariff. This option does not affect actual maximum duration of a call which is a sum of plan minutes and duration calculated by tariff. NOTE : that option will not work without specifying cld<DEST> in the CLD Translation Rule.      Examples of CLD translation rule:\u00a0     \u00a0 s/.*/balance_earlymedia_nopin/ \u00a0 s/.*/balance_earlymedia_onlow10.23USD/ \u00a0 s/^/balance_nobalance_earlymedia_cld/ \u00a0 s/^/balance_nobalance_nopin_cld1_planminutes/ - plays the available amount of service plan minutes for '1' prefix       Database usage     The application uses the accounts table for authentication purposes and to retrieve the value of the user's balance. It also uses the xrates and currencies tables to convert between currencies.     Announce minutes instead of balance      Insert a new parameters into ivr_config:  INSERT INTO ivr_config (section, option, value, i_ivr_instance) VALUES ('callingcard', 'onlyminutesduration', 'true', 2);  \u00a0  i_ivr_instance - unique value, use value 2 or higher     In the CLD translation rule\u00a0'instanceX' parameter with corresponding value must be inserted, e.g.     s/^/balance_earlymedia_cld/      turns into  s/^/balance_nobalance_earlymedia_instance2_cld/        ",
    "seo_data": {
      "meta_title": "",
      "meta_description": "",
      "meta_keywords": ""
    },
    "tags": [],
    "attachments": [],
    "cloud_files": [],
    "thumbs_up": 4,
    "thumbs_down": 1,
    "hits": 1017,
    "suggested": 0,
    "feedback_count": 0
  },
  {
    "id": 78278,
    "type": 1,
    "status": 2,
    "agent_id": 3763909,
    "created_at": "2013-04-23T09:43:45Z",
    "category_id": 82218,
    "folder_id": 134765,
    "title": "Calling Card IVR Application",
    "updated_at": "2020-03-31T18:47:33Z",
    "description": "<div><div dir=\"ltr\"><h3><span style=\"font-size: 18px;\">Setting up DID for Calling Card IVR Application</span></h3><p><br></p><ol><li>Add an IVR Application of type 'Calling Card' in 'IVR Applications' menu on the Web. After creation of the application use Advanced Parameters to customize the application for your needs.</li><li>Use the 'DID Pool' menu to add a DID and assign your newly created Calling Card IVR Application to it.</li></ol><p><br></p><h3><span style=\"font-size: 18px;\">Call routing setup (obsolete)</span></h3><p><br></p><ol><li>Add vendor connection. Set the Asterisk's host/port in the Destination field of Vendor Connection (ex: 192.168.0.100:5062).</li><li>Set the CLD Translation Rule for the connection to the value s/.*/callingcard/. Optionally the set of options can be specified in the CLD - see the specs below.</li><li>Add route to this connection and specify the Calling Card Extension number.</li></ol><p><br></p><h3><span style=\"font-size: 18px;\">Configuration options</span></h3><p><strong><br></strong></p><p dir=\"ltr\"><strong>Basic options:</strong></p><br><table class=\"current\" id=\"table77886\"><tbody><tr><td><b class=\"current\">Option<br></b></td><td>Meaning<br></td><td>Default</td></tr><tr><td><strong>Announce Balance</strong></td><td>Whether to announce balance upon successful start of application</td><td>Yes<br></td></tr><tr><td><b class=\"current\"><br>Normal Calls Are Allowed</b></td><td><br>Only service codes enabled if this option is False<br>No outgoing calls will be processed by this CC IVR application while only the Service Codes will be processed if that option option set to 'false' .<br></td><td><br>True</td></tr><tr><td><strong>Disconnect On Failure</strong></td><td>Whether to drop the Calling Card session upon unsuccessful call attempt. Otherwise the application announces that the failure occurred and offers the user to enter another destination.</td><td>No<br></td></tr><tr><td><strong>Allow Empty PIN</strong></td><td>Whether to permit to use the prepaid card accounts with empty PIN</td><td>true</td></tr><tr><td><strong>Preserve Original CLI</strong></td><td>CLI from the initial call leg will be used to call destination if this option set to true. The calling card username will be used as CLI otherwise.</td><td>false<br></td></tr><tr><td><strong>Maximum Call Duration</strong></td><td>Maximum call duration</td><td>3600 seconds<br></td></tr><tr><td><strong>Card Number Length</strong></td><td>Maximum number of digits allowed in a card number</td><td>10<br></td></tr><tr><td><strong>Number_Of_Attempts_To_Enter_A_Card</strong></td><td>Maximum number of attempts to enter card number or PIN code</td><td>3<br></td></tr><tr><td><strong>Number Of Wrong Destinations</strong></td><td>Maximum allowed number of unsuccessful call attempts in a row</td><td>3<br></td></tr><tr><td><strong>Number Of Timeouts</strong></td><td>Maximum number of input timeouts</td><td>3<br></td></tr><tr><td><strong>Minimum Call Duration</strong></td><td>Minimum allowed call duration (in seconds). If calculated maximum duration of the call to the requested destination is less than this value then the user will hear the prompt \"You have insufficient funds to make this call\"</td><td>10<br></td></tr><tr><td><strong>Minimum Card Number Length</strong></td><td>Minimum number of digits allowed in a card number</td><td><br></td></tr><tr><td><strong>No Seconds In Duration</strong></td><td>Do not pronounce seconds while announcing call duration. If the duration is less than 1 minute then this option is ignored.</td><td>False<br></td></tr><tr><td><strong>No Hours In Duration</strong></td><td>Do not speak out hours while announcing call duration, only minutes</td><td>False<br></td></tr><tr><td><strong>Announce Duration</strong></td><td>Should the duration of the call be announced</td><td>True<br></td></tr><tr><td><strong>Call Several Destinations</strong></td><td>Only one call attempt per session is allowed if this option is False. Equal to <b class=\"current\">noredial\u00a0</b><span class=\"current\">option</span><b class=\"current\"><br></b></td><td>True<br></td></tr><tr><td><strong>Outbound SIP Proxy</strong></td><td>SIP proxy host:port to send the outbound calls to (this option can also be set from the command line).<br><p class=\"current\">This option can be useful if the outgoing calls should be processed by the external switch\\server instead of the built-in b2bua service for placing the outbound calls to your Vendors.</p></td><td>&lt;Environment_IP&gt;:5061</td></tr><tr><td><strong>Disconnect Warning Time</strong></td><td>Say \u00a0<strong><em>'Your call will be disconnected in N seconds'\u00a0</em>\u00a0</strong>before the call disconnect</td><td>60<br></td></tr><tr><td><strong>Play Service Plan Minutes Only</strong></td><td>Play service plan minutes instead of a sum of plan minutes and duration calculated by tariff. This option does not affect actual maximum duration of a call which is a sum of plan minutes and duration calculated by tariff.</td><td>False</td></tr><tr><td><strong>Destination Number Completion Regex</strong></td><td>Treat the destination number to have been completed and immediately continue with the call when the input matches the given regular expression pattern</td><td><br></td></tr><tr><td><strong>The Reason For Diversion *</strong><br></td><td>The reason parameter for the Diversion SIP header<br></td><td>unconditional<br></td></tr></tbody></table><p><span style=\"font-size: 14px;\">* starting from Sippy 2020</span></p><p><br></p><h3><span style=\"font-size: 18px;\">Trusted CLI related options</span></h3><p><br></p><table id=\"table68374\"><tbody><tr><td><strong>Option</strong><br></td><td><strong>Meaning</strong><br></td><td><strong>Default</strong></td></tr><tr><td><strong>Enable CLI Registration</strong></td><td>If the 'CLI Registration' sub application is enabled, then the corresponding IVR prompt will be played and the user will be asked to link its &lt;ANI\\CLI&gt; number as the 'Trusted Number' to the used &lt;Calling Card\\PIN&gt; for further possible PINless dialing.<br><br></td><td><br></td></tr><tr><td><strong>Automatic CLI Registration</strong></td><td>After calling card has been entered successfully, add the current CLI to the list of trusted CLIs for this calling card. If the authorization is successful after entering the &lt;Calling Card\\PIN&gt;, then the user's &lt;ANI\\CLI&gt; number will be added as the 'Trusted Number' to the used &lt;Calling Card\\PIN&gt; for further possible PINless dialing.</td><td><br>No<br></td></tr><tr><td><strong>Silent Automatic CLI Registration</strong></td><td class=\"current\">When this option is set to False the user will be prompted if he wishes to register his phone number (new in 1.7.1).<br>The same as in Automatic CLI Registration, but the user will be asked whether its number should be added as the 'Trusted Number' to the used &lt;Calling Card\\PIN&gt; for further possible PINless dialing<br></td><td>True<br></td></tr><tr><td><strong>CLI Registration Menu Extension Number</strong></td><td>Extension number for the CLI Registration Subapplication. Exact extension number that can be entered to reach the CLI Registration Sub application while connected to that CC IVR application.</td><td>any value from 0 to 9<br></td></tr><tr><td><b class=\"current\">Trusted CLI Authentication</b></td><td>Allow to use Trusted Numbers for authentication.</td><td>False<br></td></tr><tr><td><strong>Minimum Valid CLI Length</strong></td><td>Minimum CLI length that is allowed to trigger the Automatic CLI Registration.</td><td>6<br></td></tr></tbody></table><p><br></p><h3><span style=\"font-size: 18px;\">Password change</span></h3><p><br></p><table id=\"table94866\"><tbody><tr><td><strong>Option</strong></td><td><strong>Meaning</strong><br></td><td><strong>Default</strong></td></tr><tr><td><strong>Enable Password Change</strong></td><td>If password change enabled<br></td><td>True</td></tr><tr><td><b class=\"current\"><br>Change Password Menu Extension Number<br></b></td><td><br>Extension number for the Change Password Subapplication.<br></td><td class=\"current\"><br>any value from 0 to 9<br></td></tr></tbody></table><span style=\"font-size: 18px;\"><br>Billing related options</span>:<br><br><table id=\"table85550\"><tbody><tr><td><strong>Option</strong></td><td><strong>Meaning</strong></td><td><strong>Default</strong></td></tr><tr><td><strong>Balance Threshold</strong></td><td>If the balance of the card is below this threshold then the card number will be asked even if CLI authentication is successful. <em>Please note that this option doesn't disable cards with the balance below threshold, it just forces the PIN to be entered despite the fact the CLI authentication was successful. If you want to disable cards with low balance, please use the Minimum Balance option.</em> (new in 1.8)</td><td>The value of the <strong>Minimum Balance</strong> option</td></tr><tr><td><strong>Minimum Balance</strong></td><td>If the balance of the card becomes less than the specified value then the card becomes unavailable. The balance can be specified with or without currency. Currency may follow the balance value, ex: '2 USD'. When no currency specified then the balance checked as an absolute value regardless of card's currency (updated in 1.7.1)</td><td>NULL</td></tr><tr><td><strong>Ignore Connect Fee</strong></td><td>Do not use connect_fee in the duration calculations</td><td>False<br></td></tr><tr><td><strong>Say_Negative_Balance_As_Zero</strong></td><td class=\"current\">When option is and if balance is under zero then say \"You have zero dollars\". Say \"You have minus &lt;amount&gt; dollars\" if this option disabled.<br></td><td>True<br></td></tr></tbody></table><p><br></p><h3><span style=\"font-size: 18px;\">Authentication</span></h3><p><br></p><table id=\"table59771\"><tbody><tr><td><strong>Option</strong></td><td><strong>Meaning</strong></td><td><strong>Default</strong></td></tr><tr><td><b class=\"current\">Use CLI Authentication Only</b></td><td>Only accounts with existing CLI mapping are allowed to enter. IVR system will authorize incoming calls by trust CLI method.</td><td>False<br></td></tr><tr><td><b class=\"current\">CLI As Card Number</b></td><td>Try to use CLI as card number first before other methods</td><td>False<br></td></tr><tr><td><strong>Use VoIP Login As Card Number</strong></td><td>Look for a calling card in the accounts table by the authname field (normally the username field is used).</td><td>False</td></tr><tr><td><b class=\"current\">PIN-less CLI Authentication</b></td><td>Option applicable for any IVR application since 4.4, if any kind of CLI authentication has succeeded then do not ask for PIN even if it is set. The CLI authentication includes <b style=\"line-height: 1.3;\">CLI As Card Number, Trusted Numbers\u00a0</b><span style=\"line-height: 1.3;\">and<b class=\"current\">\u00a0Smart Dial</b><span class=\"current\">.</span></span></td><td>False<br></td></tr><tr><td><strong>Allow Own Accounts Only</strong></td><td>Option applicable for any IVR application since 4.4, if enabled then only accounts of the customer that has created this IVR application would be allowed to use it.<br></td><td class=\"current\">False</td></tr></tbody></table><p><br></p><h3><span style=\"font-size: 18px;\">Custom scripts:</span></h3><br><table id=\"table58107\"><tbody><tr><td><strong>Option</strong></td><td><strong>Meaning</strong></td><td><strong>Default</strong></td></tr><tr><td><b class=\"current\">Custom Script To Check Destination</b></td><td class=\"current\">Set the path to the destination check script.<br>Destination Check Script - is a Python script. The script is to be put into some file (/home/ssp/check_dest.py for example) and path to this script is to be added to the configuration. This file has to contain the function checkDestination() with six mandatory parameters - CLI, translated CLI, CLD, translated CLD, username of account making the call and original CLI of the IVR session. The function must return boolean value where True means that the destination is allowed and False - destination is prohibited. Script is loaded dynamically so there is no need to restart ivrd after the script has been changed. Should any problem occur during script load, the script is disabled and corresponding error message is written to the log. If any problem occur during script execution, the Calling Card application treats this as a prohibition to make call.<br></td><td><br></td></tr><tr><td><strong>Custom Script To Change Announced Duration</strong></td><td>Script to calculate custom duration to be announced to the user. Duration Script - The script is run with the following parameters: account's username, account's balance, CLI, CLD, calculated maximum duration (in seconds), i_tariff, translated CLI and translated CLD. The script must print to the stdout a duration that is to be announced to the user. Please note that the duration returned from the script does not affect the maximum session time, it only changes the duration announcement message.</td><td><br></td></tr></tbody></table><p><br></p><h3><span style=\"font-size: 18px;\">Hot Dial &amp; Smart Dial</span></h3><br><table id=\"table6261\"><tbody><tr><td><strong>Option</strong></td><td><strong>Meaning</strong></td><td><strong>Default</strong></td></tr><tr><td><strong>Enable Direct Hot Dial</strong></td><td>Single digit destinations dialed from main menu will be treated as hot dial keys if this option is true</td><td>False<br></td></tr><tr><td><strong>Enable Hot Dial</strong></td><td>If the Hot Dial subapplication enabled. Enable Direct Hot Dial option is applied for accounts which use Hot Dial feature.<br>In this case, single digit destinations dialed from main menu will be treated as hot dial keys.<br>For example account uses Hot Dial Key 5 with Destination number 123456. Pressing 5# in Calling<br>Card IVR initiates call to the 123456 destination if Enable Direct Hot Dial = True and returns error<br>if Enable Direct Hot Dial = false (by default).<br></td><td>True<br></td></tr><tr><td><strong>Hot Dial Edit Menu Extension</strong></td><td>Extension number to edit the Hot Dial keys</td><td><br></td></tr><tr><td><strong>Hot Dial Menu Extension</strong></td><td>Hot Dial extension number</td><td><br></td></tr><tr><td><strong>Limit Hot Keys</strong></td><td>If true then only keys 1, 2 and 3 can act as the hot dial keys</td><td>False<br></td></tr><tr><td><strong>Smart Dial Exclusive Mode</strong></td><td>Should the Smart Dial DID be shared amongst many accounts.<br><p class=\"current\">This option should be left false by default. If it is set to true, only 1 account will be able to add DID number assigned to this IVR application as Smart Dial number.</p></td><td>False<br></td></tr></tbody></table><p><br></p><h3><br></h3><h3><span style=\"font-size: 18px;\">Top-Up</span></h3><br><table id=\"table73856\"><tbody><tr><td><strong>Option</strong></td><td><strong>Meaning</strong></td><td><strong>Default</strong></td></tr><tr><td><strong>Enable Top-Up feature</strong></td><td>If the Topup subapplication enabled</td><td>True<br></td></tr><tr><td><strong>Top-Up Card Length</strong></td><td>The maximum allowed number of digits of top-up card \u00a0<br></td><td>10<br></td></tr><tr><td><strong>Top Up Menu Extension</strong></td><td class=\"current\">Extension number for Top-Up Card Subapplication.<br><br></td><td>any value from 0 to 9<br></td></tr></tbody></table><span style=\"font-size: 18px;\"><br>Black List</span><p><br></p><p dir=\"ltr\"><em>Please note that attempts to enter numbers less than 4 digits long are not treated as fraud activity. Only numbers more than 3 digits long trigger black list.</em></p><br><table id=\"table99682\"><tbody><tr><td><strong>Option</strong></td><td><strong>Meaning</strong></td><td><strong>Default</strong></td></tr><tr><td><strong>Enable Black List</strong></td><td>If the blacklist feature turned on.</td><td>False</td></tr><tr><td><strong>Number Of Attempts To Blacklist</strong></td><td>How many wrong calling card numbers should be entered in a row to blacklist the current CLI.</td><td>3<br></td></tr></tbody></table><p><br></p><h3><span style=\"font-size: 18px;\">Miscellaneous</span></h3><p><br></p><table id=\"table17074\"><tbody><tr><td><strong>Option</strong></td><td><strong>Meaning</strong></td><td><strong>Default</strong></td></tr><tr><td><strong>Use Word PIN</strong></td><td class=\"current \">Enable one-step authentication. With the <strong>Use Word Pin</strong> option set to false the <strong>PIN\u00a0</strong>would be asked after entering the card number for accounts that have PIN configured. Case PIN is not set for Account, authentication will proceed without it, unless <strong>Allow Empty PIN</strong> is set to false, in such case call would be dropped with PIN set request.<br>Thus if you need to add extra security to the system, setting this parameter to False would be a good idea, as it'd require entering both card number and a secret <strong>PIN</strong> of that card.<br>Also applicable to <strong>Top-Up IVR</strong> application, to enable top-up vouchers <strong>PINs</strong>.<br>Use word <strong>PIN\u00a0</strong>in all phrases regarding card number. So for example phrase <strong>\"Enter card number\"</strong> will sound <strong>\"Enter PIN code\"</strong> and so on... <em>Please note that this option disables the password check</em>.</td><td>True<br></td></tr><tr><td><strong>Suppress Pound Phrase</strong></td><td>Do not say \"...followed by the pound key\" when asking destination number and PIN</td><td>False<br></td></tr><tr><td><strong>Enable Custom Greeting</strong></td><td>If the custom language independent greeting enabled (it is played at the very beginning of the application before the language selection)</td><td>No<br></td></tr><tr><td><strong>Custom Greeting File</strong></td><td>Path to the custom language independent greeting audio file (it is played at the very beginning of the application before the language selection). Path has to be specified omitting the file extension, in the same folder there must be versions for all needed extensions (sln, g729, possibly g723). Example:<br>/usr/home/ssp-root/my_custom_prompt<br></td><td><br></td></tr><tr><td><strong>Early Greeting Prompt ID</strong></td><td>The Prompt ID to be played before the language selection menu. This prompt cannot be localized. See an example at the end of the page. This option let you use the custom greeting when you're calling to the IVR app.<br></td><td><br></td></tr><tr><td><strong>Late Greeting Prompt ID</strong></td><td>The Prompt ID to be played after the language selection menu before balance announcement. This prompt can be localized. See an example at the end of the page.</td><td><br></td></tr><tr><td><strong>VoodooVox Source Key</strong></td><td>The source key for VoodooVox Ads</td><td>None<br></td></tr><tr><td><strong>Default Calling Card Language</strong></td><td>Default fall back language</td><td>en<br></td></tr><tr><td><strong>Fallback_To_Default_Calling_Card_Language</strong></td><td>Whether to fall back to default language after the maximum number of wrong attempts to select the language have been made.</td><td>No<br></td></tr><tr><td><strong>Say 'No Card' On Low Balance</strong></td><td>Say \"<strong><em>Wrong card number (PIN code)</em>\"</strong> instead of <em><strong>\"There is no available balance left in this calling card\"</strong></em>. (New in 3.0)</td><td>True<br></td></tr></tbody></table><p><br></p><h3><span style=\"font-size: 18px;\">Destination Check Script</span></h3><p><br></p><p dir=\"ltr\">This is a Python script in the following format. The script is to be put into some file (/home/ssp/check_dest.py for example) and path to this script is to be added to the configuration. This file has to contain the function checkDestination() with six mandatory parameters - CLI, translated CLI, CLD, translated CLD, username of account making the call and original CLI of the IVR session. The function must return boolean value where True means that the destination is allowed and False - destination is prohibited. This script is loaded dynamically so there is no need to restart ivrd after the script has been changed. Should any problem occur during script load, the script is disabled and corresponding error message is written to the log. If any problem occur during script execution, the Calling Card application treats this as a prohibition to make call.</p><p><br></p><h3><span style=\"font-size: 18px;\">Duration Script</span></h3><p dir=\"ltr\"><br>The script is run with the following parameters: account's username, account's balance, CLI, CLD, calculated maximum duration (in seconds), i_tariff, translated CLI and translated CLD. The script must print to the stdout a duration that is to be announced to the user. Please note that the duration returned from the script does not affect the maximum session time, it only changes the duration announcement message.</p><p><br></p><h3><span style=\"font-size: 18px;\">Database usage</span></h3><p dir=\"ltr\"><br>The application uses the <strong>accounts\u00a0</strong>table for authentication purposes, to retrieve the value of the user's balance, to make balance transfers and to change password.<br><br>The <strong>calling_card_cli</strong>_map table is used to store CLI-to-CallingCard mappings. These mappings are used to automatically select the calling card account based on the CLI of the user.</p><p><br></p><h3><span style=\"font-size: 18px;\">Use of multiple instances of Calling Card Application</span></h3><p dir=\"ltr\"><br>The application can be configured not only via central configuration but also by CLD rewriting. This allows to use several differently configured instances of application within the same server. The CLD options always override the corresponding global configuration options.<br><br>The following parameters are accepted.</p><p><br></p><table id=\"table62825\"><tbody><tr><td><strong>chpassext&lt;ext&gt;</strong></td><td>Specify the Change Password extension for this instance</td></tr><tr><td><strong>cliregext&lt;ext&gt;</strong></td><td>Specify the CLI Registration extension for this instance</td></tr><tr><td><strong>directhotdial</strong></td><td>Destinations 1, 2 and 3 dialed from main menu will be treated as hot dial keys if this option is specified</td></tr><tr><td><strong>earlymedia</strong></td><td>Use early media mode till the destination has answered</td></tr><tr><td><strong>greet&lt;i_ivr_prompt&gt;</strong></td><td>Use prompt from the <em>ivr_prompts</em> table as a greeting (new in 1.7)</td></tr><tr><td><strong>hotdialext&lt;ext&gt;</strong></td><td>Hot Dial extension number</td></tr><tr><td><strong>hotdialeditext&lt;ext&gt;</strong></td><td>Extension number to edit Hot Dial keys</td></tr><tr><td><strong>keepcli</strong></td><td>Use original CLI to call destination</td></tr><tr><td><strong>lgreet&lt;i_ivr_prompt&gt;</strong></td><td>Use prompt from the <em>ivr_prompts</em> table as a late greeting. This greeting is language aware, unlike the <strong>greet</strong> option (new in 1.7).</td></tr><tr><td><strong>nocardenter</strong> or <strong>climaponly</strong></td><td>Exit immediately if no CLI mapping has been found</td></tr><tr><td><strong>nochpass</strong></td><td>Change Password extension is disabled regardless if it specified or not</td></tr><tr><td><strong>nocliauth</strong></td><td>Do not try to use CLI as card number</td></tr><tr><td><strong>noclireg</strong></td><td>CLI Registration extension is disabled regardless if it specified or not</td></tr><tr><td><strong>nodial</strong></td><td>Disallow outside calls. This is useful if service codes only are to be available.</td></tr><tr><td><strong>nohotdial</strong></td><td>Disable Hot Dial fetature, both dial and edit keys capabilities</td></tr><tr><td><strong>nokeepcli</strong></td><td>Use calling card username as CLI to call destination</td></tr><tr><td><strong>noplaybalance</strong> or <strong>nobalance</strong></td><td>Disallow balance announcement</td></tr><tr><td><strong>noplayduration</strong> or <strong>noduration</strong></td><td>Disable call duration limit announcement</td></tr><tr><td><strong>noredial</strong></td><td>Hangup after the call attempt regardless it was successful or not</td></tr><tr><td><strong>notopup</strong></td><td>Top-Up extension is disabled regardless if it specified or not</td></tr><tr><td><strong>planminutes</strong></td><td>Play service plan minutes instead of a sum of plan minutes and duration calculated by tariff. This option does not affect actual maximum duration of a call which is a sum of plan minutes and duration calculated by tariff.</td></tr><tr><td><strong>playbalance</strong></td><td>Allow balance announcement</td></tr><tr><td><strong>topup</strong></td><td>Start <a href=\"http://support.sippysoft.com/solution/categories/82218/folders/134765/articles/79046-top-up-card-ivr-subapplication-of-calilng-card-application\" target>Top-Up Card subapplication</a> instead of main Calling Card loop. All functionality except Top-Up Card is disabled.</td></tr><tr><td><strong>topupext&lt;ext&gt;</strong></td><td>Specify the Top-Up extension for this instance</td></tr><tr><td><strong>trustcli</strong></td><td class=\"current\">CLI mapping is trusted so the PIN is never asked</td></tr><tr><td><strong>trycliauth</strong> or <strong>cliauth</strong></td><td>Try to use CLI as card number first before other methods</td></tr></tbody></table><p><br></p><p dir=\"ltr\">All other two-character parameters are treated as language list specification.</p><p dir=\"ltr\">Example of CLD rewriting rule:</p><p><br></p><table id=\"table49544\"><tbody><tr><td><pre>s/.*/callingcard_en_th_ru_cliregext003_trustcli_noplaybalance/</pre></td></tr></tbody></table><p><br></p><em>The balance of account won't be played in the following cases:</em><br><ul><li>there is a minutes plan configured in the service plan of the account</li><li>service plan status is suspended</li><li>account's balance is equal to zero</li></ul><p><br></p><h2>Late Greeting example (new in 1.7)</h2><p><br></p><p dir=\"ltr\">Late Greeting <strong>lgreet</strong> feature allows to make \u00a0announcement after calling card has been identified and before the \u00a0balance played. To play the audio the IVR Prompts facility is used. The \u00a0facility allows to specify a language specific versions of the prompt. \u00a0Here is how one can prepare a prompt to work as a Late Greeting:</p><p><br></p><p dir=\"ltr\">\u00a0- Create a prompt with the default audio recording:</p><p><br></p><table id=\"table55521\"><tbody><tr><td><pre>$ /home/ssp/scripts/ivr_prompt_utils -c default_audio.sln late_greeting 'Long description'\nNew prompt created with i_ivr_prompt = 29</pre></td></tr></tbody></table><p><br></p><p dir=\"ltr\">\u00a0- As you see the prompt created and was assigned an identifier of 29. Add \u00a0all needed localized recodings to this prompt (Thai and \u00a0</p><p dir=\"ltr\">\u00a0 Chinese are \u00a0showed in the following example):</p><p><br></p><table id=\"table20601\"><tbody><tr><td><pre>$ /home/ssp/scripts/ivr_prompt_utils -u 29 -a thai_audio.sln --lang=th\nIVR prompt updated\n$ /home/ssp/scripts/ivr_prompt_utils -u 29 -a chinese_audio.sln --lang=zh\nIVR prompt updated</pre></td></tr></tbody></table><p><br></p><p dir=\"ltr\">\u00a0- Now you've prepared the prompt and can start to use it. Modify your CLD translation rule to include <strong>lgreet29</strong>. So the final rule</p><p dir=\"ltr\">\u00a0 \u00a0may look like:</p><p><br></p><table id=\"table2811\"><tbody><tr><td><pre>s/.*/callingcard_en_th_zh_ja_lgreet29/</pre></td></tr></tbody></table><p><br></p><p dir=\"ltr\">- As you see the Japan and English languages are included here \u00a0also but we haven't prepared the corresponding localized prompts.</p><p dir=\"ltr\">\u00a0 In \u00a0this example the users of the Calling Card that have chosen Japan or \u00a0English will hear the announcement in the default \u00a0</p><p dir=\"ltr\">\u00a0 language (the audio \u00a0from the default_audio.sln file).</p><p><br></p><p dir=\"ltr\">- Please note that the *.sln files must contain audio in \u00a0signed linear format. Almost any audio format can be relatively easily</p><p dir=\"ltr\">\u00a0 converted to the signed linear format. Here is an example how to covert \u00a0'file.wav' into 'file.sln':</p><p><br></p><table id=\"table72495\"><tbody><tr><td>/usr/local/bin/sox file.wav -t raw -s -2 -r8000 -c1 file.sln</td></tr></tbody></table><p><br></p><h2>Notes</h2><p><br></p><p dir=\"ltr\">An i_environment must be specified since version 3.0 in a form:</p><p><br></p><table id=\"table14432\"><tbody><tr><td><pre>ivr_prompt_utils.py -E I_ENVIRONMENT -c audio_file name description</pre></td></tr></tbody></table><p><br></p><h2>Early Greeting example (new in 1.7)</h2><p><br></p><p dir=\"ltr\">Early Greeting <strong>greet</strong> feature allows to make \u00a0announcement before the user proposed to choose a language. The \u00a0procedure of setting up the greeting is very similar to the Late \u00a0Greeting except the language specific audio is not needed. Here is how \u00a0to prepare a prompt to work as an Early Greeting:</p><p><br></p><ul><li>Create a prompt with the default audio recording:</li></ul><p><br></p><table id=\"table17578\"><tbody><tr><td><pre>$ /home/ssp/scripts/ivr_prompt_utils -c greet_audio.sln early_greeting 'This is an early prompt'\nNew prompt created with i_ivr_prompt = 30</pre></td></tr></tbody></table><p><br></p><ul><li>The prompt is ready. Modify your CLD translation rule to include <strong>greet30</strong>. So the final rule may look like:</li></ul><p><br></p><table id=\"table34519\"><tbody><tr><td><pre>s/.*/callingcard_en_th_zh_ja_greet30/</pre></td></tr></tbody></table><p><br></p><h2>Notes</h2><br><ul><li>CLI Registration extension relies on correct CLI delivery to the \u00a0application. Sometimes the CLI is not delivered correctly, or when PSTN \u00a0user blocks his CLI some bogus CLI is delivered instead. This may \u00a0result in user registering this bogus CLI and other users not being able \u00a0to use the service when they also have CLI disabled. Therefore routing \u00a0shall be configured to block any suspicious CLI, for example the \u00a0following CLI Translation Rule could be used to only pass 10-digits \u00a0numeric CLIs that start with 0:</li></ul><p><br></p><table id=\"table2597\"><tbody><tr><td><pre>\u00a0 \u00a0s/(^0[0-9]{9,9}$|^).*$/\\1/</pre></td></tr></tbody></table><br><ul><li><p>\u00a0</p><pre class=\"code-large\" contenteditable=\"false\" rel=\"highlighter\">Calling Card application allows the user to disconnect outgoing call by pressing pound sign twice in a row (##) \u00a0during any phase of the call.\n\nIf you want to deny some CLI \u00a0the possibility of adding itself to the trusted numbers (someone calls to the DID, that is assigned to Calling card IVR application in our system, authorize using some account \"Please, enter your PIN code\" and then can be prompted whether he wants to add the number he calls from as a trusted one) you'll have to do the following:\n\n1. Find out the CLI you want to ban\n2. Add the CLI translation rule to the specific DID number you want to be affected by the change, e.g. to ban CLI 33nonymous from adding it as a trusted one you'll need to add the following translation rule:\ns/^33nonymous$/Anonymous/\n\nAs a result if the incoming CLI = 33nonymous it'll be rewritten to Anonymous, which is not allowed to save itself to the trusted numbers by default.\nNo other CLI will be affected by this change.</pre><p>\u00a0</p></li></ul><strong><font size=\"4\"><br></font></strong><hr><strong><font size=\"4\"><br>Calling Card options explanation</font></strong><br><p><br></p><hr><blockquote dir=\"ltr\">1.Normal Calls Are Allowed<br>\u00a0Only service codes enabled if this option is False</blockquote><p dir=\"ltr\">No outgoing calls will be processed by this CC IVR application while \u00a0only the Service Codes will be processed if that option option set to \u00a0'false' .</p><hr><blockquote><p dir=\"ltr\">2. Outbound SIP Proxy</p></blockquote><blockquote dir=\"ltr\">SIP proxy host:port to send the outbound calls to (this option can also be set from the command line)</blockquote><p dir=\"ltr\">This option can be useful if the outgoing calls should be processed by \u00a0the external switch\\server instead of the built-in b2bua service for \u00a0placing the outbound calls to your Vendors.</p><hr><blockquote dir=\"ltr\">3. Enable CLI Registration<br>\u00a0If the CLI Registration sub application enabled</blockquote><p dir=\"ltr\">If the 'CLI Registration' sub application is enabled, then the \u00a0corresponding IVR prompt will be played and the user will be asked to \u00a0link its &lt;ANI\\CLI&gt; number as the 'Trusted Number' to the used \u00a0&lt;Calling Card\\PIN&gt; for further possible PINless dialing.</p><hr><blockquote dir=\"ltr\">4 Automatic CLI Registration<br>\u00a0After calling card has been entered successfully, add the current CLI to the list of trusted CLIs for this calling card.</blockquote><p dir=\"ltr\">If the authorization is successful after entering the &lt;Calling \u00a0Card\\PIN&gt;, then the user's &lt;ANI\\CLI&gt; number will be added as \u00a0the 'Trusted Number' to the used &lt;Calling Card\\PIN&gt; for further \u00a0possible PINless dialing.</p><hr><blockquote dir=\"ltr\">5.Silent Automatic CLI Registration<br>\u00a0When this option is set to False the user will be prompted if he wishes to register his phone number (new in 1.7.1).</blockquote><p dir=\"ltr\">The same as in 4th case, but the user will be asked whether its number \u00a0should be added as the 'Trusted Number' to the used &lt;Calling \u00a0Card\\PIN&gt; for further possible PINless dialing</p><hr><blockquote dir=\"ltr\">6 CLI Registration Menu Extension Number<br>\u00a0Extension number for the CLI Registration Sub application</blockquote><p dir=\"ltr\">Exact extension number that can be entered to reach the CLI Registration \u00a0Sub application while connected to that CC IVR application.</p><hr><blockquote dir=\"ltr\">7 Trusted CLI Authentication<br>\u00a0CLI mapping is trusted so the PIN is never asked</blockquote><p dir=\"ltr\">That option enables the PINless dialing based on the Trusted Number. If \u00a0the user has already entered the &lt;Calling Card\\PIN&gt; successfully \u00a0during the previous session and its &lt;ANI\\CLI&gt; has been added to \u00a0the Trusted Numbers of the used &lt;Calling Card\\PIN&gt; and if that \u00a0user calls the CC IVR application second time using the same \u00a0&lt;ANI\\CLI&gt;, then no PIN will be asked (no authorization) in such \u00a0case, so that it will be only asked for the destination number to call.</p><hr><blockquote dir=\"ltr\">8. Use CLI Authentication Only<br>\u00a0Only accounts with existing CLI mapping are allowed to enter</blockquote><p dir=\"ltr\">You IVR system will authorize IVR call only by trust CLI method.</p><hr><blockquote dir=\"ltr\">9. Custom Script To Check Destination<br>Set the path to the destination check script</blockquote><p dir=\"ltr\"><strong>Destination Check Script</strong> - This is a Python script in the following \u00a0format. The script is to be put into some file (/home/ssp/check_dest.py \u00a0for example) and path to this script is to be added to the \u00a0configuration. This file has to contain the function checkDestination() \u00a0with six mandatory parameters - CLI, translated CLI, CLD, translated \u00a0CLD, username of account making the call and original CLI of the IVR \u00a0session. The function must return boolean value where True means that \u00a0the destination is allowed and False - destination is prohibited. This \u00a0script is loaded dynamically so there is no need to restart ivrd after \u00a0the script has been changed. Should any problem occur during script \u00a0load, the script is disabled and corresponding error message is written \u00a0to the log. If any problem occur during script execution, the Calling \u00a0Card application treats this as a prohibition to make call.</p><hr><blockquote dir=\"ltr\">10 Custom Script To Change Announced Duration<br>\u00a0Script to calculate custom duration to be announced to the user.</blockquote><p dir=\"ltr\">Duration Script - The script is run with the following parameters: \u00a0account's username, account's balance, CLI, CLD, calculated maximum \u00a0duration (in seconds), i_tariff, translated CLI and translated CLD. The \u00a0script must print to the stdout a duration that is to be announced to \u00a0the user. Please note that the duration returned from the script does \u00a0not affect the maximum session time, it only changes the duration \u00a0announcement message.</p><hr><blockquote dir=\"ltr\">11 Enable Direct Hot Dial<br>\u00a0Single digit destinations dialed from main menu will be treated as hot dial keys if this option is true</blockquote><p dir=\"ltr\">Enable Direct Hot Dial option is applied for accounts which use Hot Dial \u00a0feature. In this case, single digit destinations dialed from main menu \u00a0will be treated as hot dial keys. For example account uses Hot Dial Key 5 \u00a0with Destination number 123456. Pressing 5# in Calling Card IVR \u00a0initiates call to the 123456 destination if Enable Direct Hot Dial = \u00a0True and returns error if Enable Direct Hot Dial = false (by default).</p><hr><blockquote dir=\"ltr\">12 Smart Dial Exclusive Mode<br>\u00a0Should the Smart Dial DID be shared amongst many accounts</blockquote><p dir=\"ltr\">This option should be left false by default. If it is set to true, only 1 \u00a0account will be able to add DID number assigned to this IVR application \u00a0as Smart Dial number.</p><hr><blockquote dir=\"ltr\">13 Early Greeting Prompt ID<br>\u00a0The Prompt ID to be played before the language selection menu. This \u00a0prompt cannot be localized. See an example at the end of the page.</blockquote><p dir=\"ltr\">This option should let you use your custom greeting when you're calling that IVR application.</p><hr><blockquote dir=\"ltr\">14 VoodooVox Source Key<br>\u00a0The source key for VoodooVox Ads</blockquote><p dir=\"ltr\">This option is related to the VoodooVox ads provider. Please contact us if you need more details about it.</p></div></div>",
    "description_text": "   Setting up DID for Calling Card IVR Application      Add an IVR Application of type 'Calling Card' in 'IVR Applications' menu on the Web. After creation of the application use Advanced Parameters to customize the application for your needs.  Use the 'DID Pool' menu to add a DID and assign your newly created Calling Card IVR Application to it.      Call routing setup (obsolete)      Add vendor connection. Set the Asterisk's host/port in the Destination field of Vendor Connection (ex: 192.168.0.100:5062).  Set the CLD Translation Rule for the connection to the value s/.*/callingcard/. Optionally the set of options can be specified in the CLD - see the specs below.  Add route to this connection and specify the Calling Card Extension number.      Configuration options     Basic options:   Option   Meaning   Default  Announce Balance  Whether to announce balance upon successful start of application  Yes    Normal Calls Are Allowed   Only service codes enabled if this option is False No outgoing calls will be processed by this CC IVR application while only the Service Codes will be processed if that option option set to 'false' .    True  Disconnect On Failure  Whether to drop the Calling Card session upon unsuccessful call attempt. Otherwise the application announces that the failure occurred and offers the user to enter another destination.  No   Allow Empty PIN  Whether to permit to use the prepaid card accounts with empty PIN  true  Preserve Original CLI  CLI from the initial call leg will be used to call destination if this option set to true. The calling card username will be used as CLI otherwise.  false   Maximum Call Duration  Maximum call duration  3600 seconds   Card Number Length  Maximum number of digits allowed in a card number  10   Number_Of_Attempts_To_Enter_A_Card  Maximum number of attempts to enter card number or PIN code  3   Number Of Wrong Destinations  Maximum allowed number of unsuccessful call attempts in a row  3   Number Of Timeouts  Maximum number of input timeouts  3   Minimum Call Duration  Minimum allowed call duration (in seconds). If calculated maximum duration of the call to the requested destination is less than this value then the user will hear the prompt \"You have insufficient funds to make this call\"  10   Minimum Card Number Length  Minimum number of digits allowed in a card number     No Seconds In Duration  Do not pronounce seconds while announcing call duration. If the duration is less than 1 minute then this option is ignored.  False   No Hours In Duration  Do not speak out hours while announcing call duration, only minutes  False   Announce Duration  Should the duration of the call be announced  True   Call Several Destinations  Only one call attempt per session is allowed if this option is False. Equal to noredial\u00a0option   True   Outbound SIP Proxy  SIP proxy host:port to send the outbound calls to (this option can also be set from the command line).  This option can be useful if the outgoing calls should be processed by the external switch\\server instead of the built-in b2bua service for placing the outbound calls to your Vendors.   <Environment_IP>:5061  Disconnect Warning Time  Say \u00a0'Your call will be disconnected in N seconds'\u00a0\u00a0before the call disconnect  60   Play Service Plan Minutes Only  Play service plan minutes instead of a sum of plan minutes and duration calculated by tariff. This option does not affect actual maximum duration of a call which is a sum of plan minutes and duration calculated by tariff.  False  Destination Number Completion Regex  Treat the destination number to have been completed and immediately continue with the call when the input matches the given regular expression pattern     The Reason For Diversion *   The reason parameter for the Diversion SIP header   unconditional   * starting from Sippy 2020     Trusted CLI related options     Option   Meaning   Default  Enable CLI Registration  If the 'CLI Registration' sub application is enabled, then the corresponding IVR prompt will be played and the user will be asked to link its <ANI\\CLI> number as the 'Trusted Number' to the used <Calling Card\\PIN> for further possible PINless dialing.       Automatic CLI Registration  After calling card has been entered successfully, add the current CLI to the list of trusted CLIs for this calling card. If the authorization is successful after entering the <Calling Card\\PIN>, then the user's <ANI\\CLI> number will be added as the 'Trusted Number' to the used <Calling Card\\PIN> for further possible PINless dialing.   No   Silent Automatic CLI Registration  When this option is set to False the user will be prompted if he wishes to register his phone number (new in 1.7.1). The same as in Automatic CLI Registration, but the user will be asked whether its number should be added as the 'Trusted Number' to the used <Calling Card\\PIN> for further possible PINless dialing   True   CLI Registration Menu Extension Number  Extension number for the CLI Registration Subapplication. Exact extension number that can be entered to reach the CLI Registration Sub application while connected to that CC IVR application.  any value from 0 to 9   Trusted CLI Authentication  Allow to use Trusted Numbers for authentication.  False   Minimum Valid CLI Length  Minimum CLI length that is allowed to trigger the Automatic CLI Registration.  6      Password change     Option  Meaning   Default  Enable Password Change  If password change enabled   True   Change Password Menu Extension Number    Extension number for the Change Password Subapplication.    any value from 0 to 9   Billing related options:   Option  Meaning  Default  Balance Threshold  If the balance of the card is below this threshold then the card number will be asked even if CLI authentication is successful. Please note that this option doesn't disable cards with the balance below threshold, it just forces the PIN to be entered despite the fact the CLI authentication was successful. If you want to disable cards with low balance, please use the Minimum Balance option. (new in 1.8)  The value of the Minimum Balance option  Minimum Balance  If the balance of the card becomes less than the specified value then the card becomes unavailable. The balance can be specified with or without currency. Currency may follow the balance value, ex: '2 USD'. When no currency specified then the balance checked as an absolute value regardless of card's currency (updated in 1.7.1)  NULL  Ignore Connect Fee  Do not use connect_fee in the duration calculations  False   Say_Negative_Balance_As_Zero  When option is and if balance is under zero then say \"You have zero dollars\". Say \"You have minus <amount> dollars\" if this option disabled.   True      Authentication     Option  Meaning  Default  Use CLI Authentication Only  Only accounts with existing CLI mapping are allowed to enter. IVR system will authorize incoming calls by trust CLI method.  False   CLI As Card Number  Try to use CLI as card number first before other methods  False   Use VoIP Login As Card Number  Look for a calling card in the accounts table by the authname field (normally the username field is used).  False  PIN-less CLI Authentication  Option applicable for any IVR application since 4.4, if any kind of CLI authentication has succeeded then do not ask for PIN even if it is set. The CLI authentication includes CLI As Card Number, Trusted Numbers\u00a0and\u00a0Smart Dial.  False   Allow Own Accounts Only  Option applicable for any IVR application since 4.4, if enabled then only accounts of the customer that has created this IVR application would be allowed to use it.   False     Custom scripts:   Option  Meaning  Default  Custom Script To Check Destination  Set the path to the destination check script. Destination Check Script - is a Python script. The script is to be put into some file (/home/ssp/check_dest.py for example) and path to this script is to be added to the configuration. This file has to contain the function checkDestination() with six mandatory parameters - CLI, translated CLI, CLD, translated CLD, username of account making the call and original CLI of the IVR session. The function must return boolean value where True means that the destination is allowed and False - destination is prohibited. Script is loaded dynamically so there is no need to restart ivrd after the script has been changed. Should any problem occur during script load, the script is disabled and corresponding error message is written to the log. If any problem occur during script execution, the Calling Card application treats this as a prohibition to make call.      Custom Script To Change Announced Duration  Script to calculate custom duration to be announced to the user. Duration Script - The script is run with the following parameters: account's username, account's balance, CLI, CLD, calculated maximum duration (in seconds), i_tariff, translated CLI and translated CLD. The script must print to the stdout a duration that is to be announced to the user. Please note that the duration returned from the script does not affect the maximum session time, it only changes the duration announcement message.        Hot Dial & Smart Dial   Option  Meaning  Default  Enable Direct Hot Dial  Single digit destinations dialed from main menu will be treated as hot dial keys if this option is true  False   Enable Hot Dial  If the Hot Dial subapplication enabled. Enable Direct Hot Dial option is applied for accounts which use Hot Dial feature. In this case, single digit destinations dialed from main menu will be treated as hot dial keys. For example account uses Hot Dial Key 5 with Destination number 123456. Pressing 5# in Calling Card IVR initiates call to the 123456 destination if Enable Direct Hot Dial = True and returns error if Enable Direct Hot Dial = false (by default).   True   Hot Dial Edit Menu Extension  Extension number to edit the Hot Dial keys     Hot Dial Menu Extension  Hot Dial extension number     Limit Hot Keys  If true then only keys 1, 2 and 3 can act as the hot dial keys  False   Smart Dial Exclusive Mode  Should the Smart Dial DID be shared amongst many accounts.  This option should be left false by default. If it is set to true, only 1 account will be able to add DID number assigned to this IVR application as Smart Dial number.   False         Top-Up   Option  Meaning  Default  Enable Top-Up feature  If the Topup subapplication enabled  True   Top-Up Card Length  The maximum allowed number of digits of top-up card \u00a0   10   Top Up Menu Extension  Extension number for Top-Up Card Subapplication.    any value from 0 to 9   Black List    Please note that attempts to enter numbers less than 4 digits long are not treated as fraud activity. Only numbers more than 3 digits long trigger black list.   Option  Meaning  Default  Enable Black List  If the blacklist feature turned on.  False  Number Of Attempts To Blacklist  How many wrong calling card numbers should be entered in a row to blacklist the current CLI.  3      Miscellaneous     Option  Meaning  Default  Use Word PIN  Enable one-step authentication. With the Use Word Pin option set to false the PIN\u00a0would be asked after entering the card number for accounts that have PIN configured. Case PIN is not set for Account, authentication will proceed without it, unless Allow Empty PIN is set to false, in such case call would be dropped with PIN set request. Thus if you need to add extra security to the system, setting this parameter to False would be a good idea, as it'd require entering both card number and a secret PIN of that card. Also applicable to Top-Up IVR application, to enable top-up vouchers PINs. Use word PIN\u00a0in all phrases regarding card number. So for example phrase \"Enter card number\" will sound \"Enter PIN code\" and so on... Please note that this option disables the password check.  True   Suppress Pound Phrase  Do not say \"...followed by the pound key\" when asking destination number and PIN  False   Enable Custom Greeting  If the custom language independent greeting enabled (it is played at the very beginning of the application before the language selection)  No   Custom Greeting File  Path to the custom language independent greeting audio file (it is played at the very beginning of the application before the language selection). Path has to be specified omitting the file extension, in the same folder there must be versions for all needed extensions (sln, g729, possibly g723). Example: /usr/home/ssp-root/my_custom_prompt      Early Greeting Prompt ID  The Prompt ID to be played before the language selection menu. This prompt cannot be localized. See an example at the end of the page. This option let you use the custom greeting when you're calling to the IVR app.      Late Greeting Prompt ID  The Prompt ID to be played after the language selection menu before balance announcement. This prompt can be localized. See an example at the end of the page.     VoodooVox Source Key  The source key for VoodooVox Ads  None   Default Calling Card Language  Default fall back language  en   Fallback_To_Default_Calling_Card_Language  Whether to fall back to default language after the maximum number of wrong attempts to select the language have been made.  No   Say 'No Card' On Low Balance  Say \"Wrong card number (PIN code)\" instead of \"There is no available balance left in this calling card\". (New in 3.0)  True      Destination Check Script     This is a Python script in the following format. The script is to be put into some file (/home/ssp/check_dest.py for example) and path to this script is to be added to the configuration. This file has to contain the function checkDestination() with six mandatory parameters - CLI, translated CLI, CLD, translated CLD, username of account making the call and original CLI of the IVR session. The function must return boolean value where True means that the destination is allowed and False - destination is prohibited. This script is loaded dynamically so there is no need to restart ivrd after the script has been changed. Should any problem occur during script load, the script is disabled and corresponding error message is written to the log. If any problem occur during script execution, the Calling Card application treats this as a prohibition to make call.     Duration Script   The script is run with the following parameters: account's username, account's balance, CLI, CLD, calculated maximum duration (in seconds), i_tariff, translated CLI and translated CLD. The script must print to the stdout a duration that is to be announced to the user. Please note that the duration returned from the script does not affect the maximum session time, it only changes the duration announcement message.     Database usage   The application uses the accounts\u00a0table for authentication purposes, to retrieve the value of the user's balance, to make balance transfers and to change password.  The calling_card_cli_map table is used to store CLI-to-CallingCard mappings. These mappings are used to automatically select the calling card account based on the CLI of the user.     Use of multiple instances of Calling Card Application   The application can be configured not only via central configuration but also by CLD rewriting. This allows to use several differently configured instances of application within the same server. The CLD options always override the corresponding global configuration options.  The following parameters are accepted.     chpassext<ext>  Specify the Change Password extension for this instance  cliregext<ext>  Specify the CLI Registration extension for this instance  directhotdial  Destinations 1, 2 and 3 dialed from main menu will be treated as hot dial keys if this option is specified  earlymedia  Use early media mode till the destination has answered  greet<i_ivr_prompt>  Use prompt from the ivr_prompts table as a greeting (new in 1.7)  hotdialext<ext>  Hot Dial extension number  hotdialeditext<ext>  Extension number to edit Hot Dial keys  keepcli  Use original CLI to call destination  lgreet<i_ivr_prompt>  Use prompt from the ivr_prompts table as a late greeting. This greeting is language aware, unlike the greet option (new in 1.7).  nocardenter or climaponly  Exit immediately if no CLI mapping has been found  nochpass  Change Password extension is disabled regardless if it specified or not  nocliauth  Do not try to use CLI as card number  noclireg  CLI Registration extension is disabled regardless if it specified or not  nodial  Disallow outside calls. This is useful if service codes only are to be available.  nohotdial  Disable Hot Dial fetature, both dial and edit keys capabilities  nokeepcli  Use calling card username as CLI to call destination  noplaybalance or nobalance  Disallow balance announcement  noplayduration or noduration  Disable call duration limit announcement  noredial  Hangup after the call attempt regardless it was successful or not  notopup  Top-Up extension is disabled regardless if it specified or not  planminutes  Play service plan minutes instead of a sum of plan minutes and duration calculated by tariff. This option does not affect actual maximum duration of a call which is a sum of plan minutes and duration calculated by tariff.  playbalance  Allow balance announcement  topup  Start Top-Up Card subapplication instead of main Calling Card loop. All functionality except Top-Up Card is disabled.  topupext<ext>  Specify the Top-Up extension for this instance  trustcli  CLI mapping is trusted so the PIN is never asked  trycliauth or cliauth  Try to use CLI as card number first before other methods     All other two-character parameters are treated as language list specification.  Example of CLD rewriting rule:      s/.*/callingcard_en_th_ru_cliregext003_trustcli_noplaybalance/     The balance of account won't be played in the following cases:   there is a minutes plan configured in the service plan of the account  service plan status is suspended  account's balance is equal to zero      Late Greeting example (new in 1.7)     Late Greeting lgreet feature allows to make \u00a0announcement after calling card has been identified and before the \u00a0balance played. To play the audio the IVR Prompts facility is used. The \u00a0facility allows to specify a language specific versions of the prompt. \u00a0Here is how one can prepare a prompt to work as a Late Greeting:     \u00a0- Create a prompt with the default audio recording:      $ /home/ssp/scripts/ivr_prompt_utils -c default_audio.sln late_greeting 'Long description'\nNew prompt created with i_ivr_prompt = 29      \u00a0- As you see the prompt created and was assigned an identifier of 29. Add \u00a0all needed localized recodings to this prompt (Thai and \u00a0  \u00a0 Chinese are \u00a0showed in the following example):      $ /home/ssp/scripts/ivr_prompt_utils -u 29 -a thai_audio.sln --lang=th\nIVR prompt updated\n$ /home/ssp/scripts/ivr_prompt_utils -u 29 -a chinese_audio.sln --lang=zh\nIVR prompt updated      \u00a0- Now you've prepared the prompt and can start to use it. Modify your CLD translation rule to include lgreet29. So the final rule  \u00a0 \u00a0may look like:      s/.*/callingcard_en_th_zh_ja_lgreet29/      - As you see the Japan and English languages are included here \u00a0also but we haven't prepared the corresponding localized prompts.  \u00a0 In \u00a0this example the users of the Calling Card that have chosen Japan or \u00a0English will hear the announcement in the default \u00a0  \u00a0 language (the audio \u00a0from the default_audio.sln file).     - Please note that the *.sln files must contain audio in \u00a0signed linear format. Almost any audio format can be relatively easily  \u00a0 converted to the signed linear format. Here is an example how to covert \u00a0'file.wav' into 'file.sln':     /usr/local/bin/sox file.wav -t raw -s -2 -r8000 -c1 file.sln     Notes     An i_environment must be specified since version 3.0 in a form:      ivr_prompt_utils.py -E I_ENVIRONMENT -c audio_file name description      Early Greeting example (new in 1.7)     Early Greeting greet feature allows to make \u00a0announcement before the user proposed to choose a language. The \u00a0procedure of setting up the greeting is very similar to the Late \u00a0Greeting except the language specific audio is not needed. Here is how \u00a0to prepare a prompt to work as an Early Greeting:      Create a prompt with the default audio recording:       $ /home/ssp/scripts/ivr_prompt_utils -c greet_audio.sln early_greeting 'This is an early prompt'\nNew prompt created with i_ivr_prompt = 30       The prompt is ready. Modify your CLD translation rule to include greet30. So the final rule may look like:       s/.*/callingcard_en_th_zh_ja_greet30/      Notes    CLI Registration extension relies on correct CLI delivery to the \u00a0application. Sometimes the CLI is not delivered correctly, or when PSTN \u00a0user blocks his CLI some bogus CLI is delivered instead. This may \u00a0result in user registering this bogus CLI and other users not being able \u00a0to use the service when they also have CLI disabled. Therefore routing \u00a0shall be configured to block any suspicious CLI, for example the \u00a0following CLI Translation Rule could be used to only pass 10-digits \u00a0numeric CLIs that start with 0:       \u00a0 \u00a0s/(^0[0-9]{9,9}$|^).*$/\\1/      \u00a0  Calling Card application allows the user to disconnect outgoing call by pressing pound sign twice in a row (##) \u00a0during any phase of the call.\n\nIf you want to deny some CLI \u00a0the possibility of adding itself to the trusted numbers (someone calls to the DID, that is assigned to Calling card IVR application in our system, authorize using some account \"Please, enter your PIN code\" and then can be prompted whether he wants to add the number he calls from as a trusted one) you'll have to do the following:\n\n1. Find out the CLI you want to ban\n2. Add the CLI translation rule to the specific DID number you want to be affected by the change, e.g. to ban CLI 33nonymous from adding it as a trusted one you'll need to add the following translation rule:\ns/^33nonymous$/Anonymous/\n\nAs a result if the incoming CLI = 33nonymous it'll be rewritten to Anonymous, which is not allowed to save itself to the trusted numbers by default.\nNo other CLI will be affected by this change.  \u00a0      Calling Card options explanation      1.Normal Calls Are Allowed \u00a0Only service codes enabled if this option is False  No outgoing calls will be processed by this CC IVR application while \u00a0only the Service Codes will be processed if that option option set to \u00a0'false' .    2. Outbound SIP Proxy   SIP proxy host:port to send the outbound calls to (this option can also be set from the command line)  This option can be useful if the outgoing calls should be processed by \u00a0the external switch\\server instead of the built-in b2bua service for \u00a0placing the outbound calls to your Vendors.   3. Enable CLI Registration \u00a0If the CLI Registration sub application enabled  If the 'CLI Registration' sub application is enabled, then the \u00a0corresponding IVR prompt will be played and the user will be asked to \u00a0link its <ANI\\CLI> number as the 'Trusted Number' to the used \u00a0<Calling Card\\PIN> for further possible PINless dialing.   4 Automatic CLI Registration \u00a0After calling card has been entered successfully, add the current CLI to the list of trusted CLIs for this calling card.  If the authorization is successful after entering the <Calling \u00a0Card\\PIN>, then the user's <ANI\\CLI> number will be added as \u00a0the 'Trusted Number' to the used <Calling Card\\PIN> for further \u00a0possible PINless dialing.   5.Silent Automatic CLI Registration \u00a0When this option is set to False the user will be prompted if he wishes to register his phone number (new in 1.7.1).  The same as in 4th case, but the user will be asked whether its number \u00a0should be added as the 'Trusted Number' to the used <Calling \u00a0Card\\PIN> for further possible PINless dialing   6 CLI Registration Menu Extension Number \u00a0Extension number for the CLI Registration Sub application  Exact extension number that can be entered to reach the CLI Registration \u00a0Sub application while connected to that CC IVR application.   7 Trusted CLI Authentication \u00a0CLI mapping is trusted so the PIN is never asked  That option enables the PINless dialing based on the Trusted Number. If \u00a0the user has already entered the <Calling Card\\PIN> successfully \u00a0during the previous session and its <ANI\\CLI> has been added to \u00a0the Trusted Numbers of the used <Calling Card\\PIN> and if that \u00a0user calls the CC IVR application second time using the same \u00a0<ANI\\CLI>, then no PIN will be asked (no authorization) in such \u00a0case, so that it will be only asked for the destination number to call.   8. Use CLI Authentication Only \u00a0Only accounts with existing CLI mapping are allowed to enter  You IVR system will authorize IVR call only by trust CLI method.   9. Custom Script To Check Destination Set the path to the destination check script  Destination Check Script - This is a Python script in the following \u00a0format. The script is to be put into some file (/home/ssp/check_dest.py \u00a0for example) and path to this script is to be added to the \u00a0configuration. This file has to contain the function checkDestination() \u00a0with six mandatory parameters - CLI, translated CLI, CLD, translated \u00a0CLD, username of account making the call and original CLI of the IVR \u00a0session. The function must return boolean value where True means that \u00a0the destination is allowed and False - destination is prohibited. This \u00a0script is loaded dynamically so there is no need to restart ivrd after \u00a0the script has been changed. Should any problem occur during script \u00a0load, the script is disabled and corresponding error message is written \u00a0to the log. If any problem occur during script execution, the Calling \u00a0Card application treats this as a prohibition to make call.   10 Custom Script To Change Announced Duration \u00a0Script to calculate custom duration to be announced to the user.  Duration Script - The script is run with the following parameters: \u00a0account's username, account's balance, CLI, CLD, calculated maximum \u00a0duration (in seconds), i_tariff, translated CLI and translated CLD. The \u00a0script must print to the stdout a duration that is to be announced to \u00a0the user. Please note that the duration returned from the script does \u00a0not affect the maximum session time, it only changes the duration \u00a0announcement message.   11 Enable Direct Hot Dial \u00a0Single digit destinations dialed from main menu will be treated as hot dial keys if this option is true  Enable Direct Hot Dial option is applied for accounts which use Hot Dial \u00a0feature. In this case, single digit destinations dialed from main menu \u00a0will be treated as hot dial keys. For example account uses Hot Dial Key 5 \u00a0with Destination number 123456. Pressing 5# in Calling Card IVR \u00a0initiates call to the 123456 destination if Enable Direct Hot Dial = \u00a0True and returns error if Enable Direct Hot Dial = false (by default).   12 Smart Dial Exclusive Mode \u00a0Should the Smart Dial DID be shared amongst many accounts  This option should be left false by default. If it is set to true, only 1 \u00a0account will be able to add DID number assigned to this IVR application \u00a0as Smart Dial number.   13 Early Greeting Prompt ID \u00a0The Prompt ID to be played before the language selection menu. This \u00a0prompt cannot be localized. See an example at the end of the page.  This option should let you use your custom greeting when you're calling that IVR application.   14 VoodooVox Source Key \u00a0The source key for VoodooVox Ads  This option is related to the VoodooVox ads provider. Please contact us if you need more details about it.   ",
    "seo_data": {
      "meta_title": "",
      "meta_description": "",
      "meta_keywords": ""
    },
    "tags": [],
    "attachments": [],
    "cloud_files": [],
    "thumbs_up": 3,
    "thumbs_down": 3,
    "hits": 2491,
    "suggested": 0,
    "feedback_count": 0
  },
  {
    "id": 79046,
    "type": 1,
    "status": 2,
    "agent_id": 3763909,
    "created_at": "2013-04-25T08:54:52Z",
    "category_id": 82218,
    "folder_id": 134765,
    "title": "Top-Up accounts w/o using of IVR application.",
    "updated_at": "2015-01-27T08:56:28Z",
    "description": "<h3><span style=\"font-size: 18px;\">Description</span></h3>\r\n<p><br></p>\r\n<p>\r\nDescribed here configuration is in fact a shorthand for the <a class=\"wiki\" href=\"https://trac.sippysoft.com/trac/wiki/public/IVR/CallingCard\">Calling Card application</a> with the <strong>topup</strong> CLD option turned on. <br></p>\r\n<p><br></p>\r\n<h2>Call routing setup</h2>\r\n<p><br></p>\r\n<ol>\r\n<li>Add vendor connection. Set the Asterisk's host/port in the Destination field of Vendor Connection (ex: 192.168.0.100:5062).\r\n</li>\r\n<li>Set the CLD Translation Rule for the connection to the value <strong><tt>s/.*/cctopup/</tt></strong>. Optionally the set of supported languages can be specified in the CLD (ex: <strong>s/.*/cctopup_en_th_ru/</strong>). Add other appropriate options of <a class=\"wiki\" href=\"https://trac.sippysoft.com/trac/wiki/public/IVR/CallingCard\">Calling Card application</a>.\r\n</li>\r\n<li>Add route to this connection and specify the Top-Up Card Extension number.\r\n</li>\r\n</ol>\r\n<h2><br></h2>\r\n<h2>Configuration options</h2>\r\n<p><br></p>\r\n\r\n<table><tbody>\r\n<tr>\r\n<td><strong>Option</strong></td>\r\n<td><strong>Meaning</strong></td>\r\n<td>\r\n<strong>Default</strong>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td><strong>Top-Up Card Length</strong></td>\r\n<td>The maximum allowed number of digits of top-up card</td>\r\n<td> 10 \r\n</td>\r\n</tr>\r\n</tbody></table>\r\n<br><h2>Database usage</h2>\r\n<p><br></p>\r\n<p>\r\nThe application uses the <strong>accounts</strong> and <strong>finrecs</strong> tables for authentication purposes, to retrieve the value of the user's balance and to make balance transfers.\r\n</p>\r\n<br>\r\n",
    "description_text": " Description \n   \n \nDescribed here configuration is in fact a shorthand for the Calling Card application with the topup CLD option turned on.   \n   \n Call routing setup \n   \n \n Add vendor connection. Set the Asterisk's host/port in the Destination field of Vendor Connection (ex: 192.168.0.100:5062).\n \n Set the CLD Translation Rule for the connection to the value s/.*/cctopup/. Optionally the set of supported languages can be specified in the CLD (ex: s/.*/cctopup_en_th_ru/). Add other appropriate options of Calling Card application.\n \n Add route to this connection and specify the Top-Up Card Extension number.\n \n \n   \n Configuration options \n   \n\n\n\n Option \n Meaning \n \nDefault\n \n\n\n Top-Up Card Length \n The maximum allowed number of digits of top-up card \n  10 \n \n\n\n  Database usage \n   \n \nThe application uses the accounts and finrecs tables for authentication purposes, to retrieve the value of the user's balance and to make balance transfers.\n \n \n",
    "seo_data": {
      "meta_title": "",
      "meta_description": "",
      "meta_keywords": ""
    },
    "tags": [],
    "attachments": [],
    "cloud_files": [],
    "thumbs_up": 0,
    "thumbs_down": 2,
    "hits": 612,
    "suggested": 0,
    "feedback_count": 0
  },
  {
    "id": 3000005321,
    "type": 1,
    "status": 2,
    "agent_id": 4048869,
    "created_at": "2014-03-20T09:56:35Z",
    "category_id": 82218,
    "folder_id": 134765,
    "title": "Play Prompt IVR application",
    "updated_at": "2014-06-26T03:18:18Z",
    "description": "<p><span style=\"font-size: large;\">Overview</span></p>\r\n<p><br></p>\r\n<p>The purpose of this IVR is to play an arbitrary IVR Prompt.</p>\r\n<p><br></p>Here is how to prepare a prompt to work as an Early \r\nGreeting:\r\n<ul><li>Create a prompt with the default audio recording:\r\n<pre>$ /home/ssp/scripts/ivr_prompt_utils -E I_ENVIRONMENT -c greet_audio.sln early_greeting 'This is an early prompt'\r\nNew prompt created with i_ivr_prompt = 30\r\n</pre>\r\n</li></ul>\n<p><br></p>\r\n<h3 style=\"\"><span style=\"font-size: 18px;\">Call routing setup</span></h3>\r\n<ol style=\"\">\n<li>Add Vendor Connection. Set the Asterisk's host/port in the Destination field of Vendor Connection (ex:\u00a0<b style=\"font-size: 13.333333015441895px;\">192.168.0.100:5062</b>).</li>\r\n<li>Set the CLD Translation Rule for the connection to the value for example\u00a0<b>s/.*/prompt_30/</b>, where 30 is the i_ivr_prompt value for the desired prompt.</li>\r\n<li>Configure call to be routed via this Vendor Connection.</li>\r\n</ol>\n<p></p>",
    "description_text": " Overview \n   \n The purpose of this IVR is to play an arbitrary IVR Prompt. \n   Here is how to prepare a prompt to work as an Early \nGreeting:\n  Create a prompt with the default audio recording:\n $ /home/ssp/scripts/ivr_prompt_utils -E I_ENVIRONMENT -c greet_audio.sln early_greeting 'This is an early prompt'\nNew prompt created with i_ivr_prompt = 30\n \n  \n   \n Call routing setup \n \n Add Vendor Connection. Set the Asterisk's host/port in the Destination field of Vendor Connection (ex:\u00a0192.168.0.100:5062). \n Set the CLD Translation Rule for the connection to the value for example\u00a0s/.*/prompt_30/, where 30 is the i_ivr_prompt value for the desired prompt. \n Configure call to be routed via this Vendor Connection. \n \n ",
    "seo_data": {
      "meta_title": "",
      "meta_description": "",
      "meta_keywords": ""
    },
    "tags": [],
    "attachments": [],
    "cloud_files": [],
    "thumbs_up": 0,
    "thumbs_down": 2,
    "hits": 890,
    "suggested": 0,
    "feedback_count": 0
  },
  {
    "id": 79047,
    "type": 1,
    "status": 2,
    "agent_id": 3763909,
    "created_at": "2013-04-25T08:56:34Z",
    "category_id": 82218,
    "folder_id": 134765,
    "title": "Tiny version of Calling Card IVR Application",
    "updated_at": "2015-04-22T08:11:18Z",
    "description": "<h3>\r\n<span style=\"font-size: 18px;\">Overview</span><br>\n</h3>\n<div>\r\n        \r\n          <h1><br></h1>\r\n<p>\r\nThis application differs from the\u00a0<a href=\"http://support.sippysoft.com/solution/categories/82218/folders/134765/articles/78278-calling-card-ivr-application\" target=\"\">Calling Card application</a>\u00a0in that that it doesn't use TTS at all. The Tiny Calling Card \r\nApplication requires the calling card account to have CLI mapping so it \r\ncan check the account and immediately prompt for the destination. The \r\napplication plays the dial tone to the user as the destination prompt. \r\nIt doesn't offer to redial last destination either but immediately hangs\r\n up after the call regardless either it was successful or unsuccessful. <br></p>\r\n<p><br></p>\r\n<h2>Call routing setup</h2>\r\n<p><br></p>\r\n<ol>\n<li>Add vendor connection. Set the Asterisk's host/port in the Destination field of Vendor Connection (ex: 192.168.0.100:5062).\r\n</li>\r\n<li>Set the CLD Translation Rule for the connection to the value <strong><tt>s/.*/cctiny/</tt></strong>.\r\n</li>\r\n<li>Add route to this connection and specify the Tiny Calling Card Extension number.</li>\r\n</ol>\n<p><br></p>\r\n<h2>Configuration options</h2>\r\n<p><br></p>\r\n<p>\r\n<strong><i>WARNING! </i></strong><i> Both Section and Option values MUST be lowercase in the database. They are mixed case here for readability only.</i>\r\n</p>\r\n<table><tbody>\n<tr>\n<td><strong>Section</strong></td>\r\n<td><strong>Option</strong></td>\r\n<td><strong>Meaning</strong></td>\r\n<td>\r\n<strong>Default</strong>\r\n</td>\r\n</tr>\n<tr>\n<td> <br>\n</td>\r\n<td> <br>\n</td>\r\n<td> <br>\n</td>\r\n<td> \r\n<br>\n</td>\r\n</tr>\n<tr>\n<td><strong>CallingCard</strong></td>\r\n<td><strong>MinCallDuration</strong></td>\r\n<td>Minimum\r\n allowed call duration. If calculated maximum duration of the call to \r\nthe requested destination is less than this value then the user will \r\nhear the prompt \"You have insufficient funds to make this call\"</td>\r\n<td>10 seconds\r\n</td>\r\n</tr>\n<tr>\n<td><strong>CallingCard</strong></td>\r\n<td><strong>MaxCallDuration</strong></td>\r\n<td>Maximum call duration</td>\r\n<td>3600 seconds\r\n</td>\r\n</tr>\n<tr>\n<td><strong>CallingCard</strong></td>\r\n<td><strong>OutgoingSIPHost</strong></td>\r\n<td>SIP proxy host:port to send the outgoing calls to (this option can also be set from the command line)</td>\r\n<td> 127.0.0.1:5060 \r\n</td>\r\n</tr>\n<tr>\n<td><strong>CallingCard</strong></td>\r\n<td><strong>KeepCLI</strong></td>\r\n<td>CLI\r\n from the initial call leg will be used to call destination if this \r\noption set to true. The calling card username will be used as CLI \r\notherwise.</td>\r\n<td> False \r\n</td>\r\n</tr>\n</tbody></table>\n<h2><br></h2>\r\n<h2>Database usage</h2>\r\n<p><br></p>\r\n<p>The <strong>calling_card_cli_map</strong> table is used to store \r\nCLI-to-CallingCard mappings. These mappings are used to automatically \r\nselect the calling card account based on the CLI of the user.\r\n</p>\r\n\r\n        \r\n        \r\n      </div>",
    "description_text": " \nOverview \n \n \n        \n             \n \nThis application differs from the\u00a0Calling Card application\u00a0in that that it doesn't use TTS at all. The Tiny Calling Card \nApplication requires the calling card account to have CLI mapping so it \ncan check the account and immediately prompt for the destination. The \napplication plays the dial tone to the user as the destination prompt. \nIt doesn't offer to redial last destination either but immediately hangs\n up after the call regardless either it was successful or unsuccessful.   \n   \n Call routing setup \n   \n \n Add vendor connection. Set the Asterisk's host/port in the Destination field of Vendor Connection (ex: 192.168.0.100:5062).\n \n Set the CLD Translation Rule for the connection to the value s/.*/cctiny/.\n \n Add route to this connection and specify the Tiny Calling Card Extension number. \n \n   \n Configuration options \n   \n \nWARNING!  Both Section and Option values MUST be lowercase in the database. They are mixed case here for readability only.\n \n\n\n Section \n Option \n Meaning \n \nDefault\n \n\n\n   \n \n   \n \n   \n \n  \n \n \n\n\n CallingCard \n MinCallDuration \n Minimum\n allowed call duration. If calculated maximum duration of the call to \nthe requested destination is less than this value then the user will \nhear the prompt \"You have insufficient funds to make this call\" \n 10 seconds\n \n\n\n CallingCard \n MaxCallDuration \n Maximum call duration \n 3600 seconds\n \n\n\n CallingCard \n OutgoingSIPHost \n SIP proxy host:port to send the outgoing calls to (this option can also be set from the command line) \n  127.0.0.1:5060 \n \n\n\n CallingCard \n KeepCLI \n CLI\n from the initial call leg will be used to call destination if this \noption set to true. The calling card username will be used as CLI \notherwise. \n  False \n \n\n\n   \n Database usage \n   \n The calling_card_cli_map table is used to store \nCLI-to-CallingCard mappings. These mappings are used to automatically \nselect the calling card account based on the CLI of the user.\n \n\n        \n        \n       ",
    "seo_data": {
      "meta_title": "",
      "meta_description": "",
      "meta_keywords": ""
    },
    "tags": [],
    "attachments": [],
    "cloud_files": [],
    "thumbs_up": 2,
    "thumbs_down": 1,
    "hits": 422,
    "suggested": 0,
    "feedback_count": 0
  },
  {
    "id": 79049,
    "type": 1,
    "status": 2,
    "agent_id": 3763909,
    "created_at": "2013-04-25T09:00:50Z",
    "category_id": 82218,
    "folder_id": 134765,
    "title": "Welcome Call IVR application",
    "updated_at": "2014-12-22T10:30:44Z",
    "description": "<h3><span style=\"font-size: 18px;\">Call routing setup</span></h3>\n<p><br></p>\n<div>\r\n<p>\r\nNo special routing setup required for the application to work. But \r\nspecial configuration may be created for the SER to prevent recording \r\nCDRs for the calls generated by the application. <strong><br></strong></p>\n<p><strong><br></strong></p>\n<p><strong>TODO: write simple ser.cfg example</strong>\r\n</p>\r\n<h3><br></h3>\n<h3><span style=\"font-size: 18px;\">Configuration options</span></h3>\n<p><br></p>\r\n<p>\r\n<i> <strong>WARNING! </strong> Both Section and Option values MUST be lowercase in the database. They are mixed case here for readability only.</i>\r\n</p>\r\n<table><tbody>\n<tr>\n<td> <strong>Section</strong> </td>\n<td> <strong>Option</strong> </td>\n<td> <strong>Meaning</strong> </td>\n<td> <strong>Default</strong> \r\n</td>\n</tr>\n<tr>\n<td> <strong>FirstRegistration</strong> </td>\n<td> <strong>ScanIntervalSec</strong> </td>\n<td> The time between the attempts to find accounts to make a Welcome Call to </td>\n<td> 30 seconds \r\n</td>\n</tr>\n<tr>\n<td> <strong>FirstRegistration</strong> </td>\n<td> <strong>BackoffIntervalSec</strong> </td>\n<td> Failed attempts to make welcome call will be retried after the interval increasing by this value </td>\n<td> 10 minutes \r\n</td>\n</tr>\n<tr>\n<td> <strong>FirstRegistration</strong> </td>\n<td> <strong>MaxCallIntervalSec</strong> </td>\n<td> The time between retries to make Welcome Call cannot exceed this value </td>\n<td> 14400 seconds (4 hours) \r\n</td>\n</tr>\n<tr>\n<td> <strong>FirstRegistration</strong> </td>\n<td> <strong>TimeoutMsec</strong> </td>\n<td> The amount of time the application will wait for answer </td>\n<td> 30000 milliseconds \r\n</td>\n</tr>\n<tr>\n<td> <strong>FirstRegistration</strong> </td>\n<td> <strong>ThresholdMsec</strong> </td>\n<td> The minimum amount of time that the user must keep listening to the message after which Welcome Call is considered successful* </td>\n<td> 3000 milliseconds \r\n</td>\n</tr>\n<tr>\n<td> <strong>FirstRegistration</strong> </td>\n<td> <strong>cli</strong> </td>\n<td> CLI to use while originating Welcome Calls** </td>\n<td> NULL (means Anonymous) \r\n</td>\n</tr>\n<tr>\n<td> <strong>FirstRegistration</strong> </td>\n<td> <strong>SIPProxy</strong> </td>\n<td> The <strong>host:port</strong> tuple defining the host where originated calls are to go </td>\n<td> 127.0.0.1:5060 \r\n</td>\n</tr>\n<tr>\n<td> <strong>FirstRegistration</strong> </td>\n<td> <strong>MaxAttempts</strong> </td>\n<td> The maximum number of failures to make welcome call. </td>\n<td> 20 \r\n</td>\n</tr>\n</tbody></table>\n<p><br></p>\n<p>* If the duration of the message is less than this value then a Welcome \r\nCall is considered successful after the whole prompt has been playe.\r\n</p>\r\n<p>\r\n** If the CLI is not NULL then the application finds the account \r\ncorresponding to CLI and uses it's authentication information to \r\noriginate a call.\r\n</p>\r\n<h3><br></h3>\n<h3><span style=\"font-size: 18px;\">Database usage</span></h3>\n<p><br></p>\r\n<p>\r\nThe application uses IVR Prompts facility for the Welcome Call message storage.\r\n</p>\r\n<h3><br></h3>\n<h3><span style=\"font-size: 18px;\">Setting a custom prompt</span></h3>\n<p><br></p>\r\n<p>\r\nIt is possible to play a custom greeting to the user from the Welcome \r\nCall application. The first step is to create an IVR prompt: <br></p>\n<p><br></p>\n<table id=\"table3066\"><tbody><tr><td class=\"current\"><pre>$ /home/ssp/scripts/ivr_prompt_utils -c welcome.sln welcome_prompt 'This is a Welcome Call prompt'\r\nNew prompt created with i_ivr_prompt = 30</pre></td></tr></tbody></table>\n<br><p>\r\nThe prompt is ready. Now assign this prompt to the accounts:\u00a0</p>\n<p><br></p>\n<table id=\"table52093\"><tbody><tr><td class=\"current\"><pre>UPDATE accounts SET welcome_call_ivr = 30 WHERE ...</pre></td></tr></tbody></table>\n<p><br></p>\r\n\r\n        \r\n        \r\n      </div>",
    "description_text": " Call routing setup \n   \n \n \nNo special routing setup required for the application to work. But \nspecial configuration may be created for the SER to prevent recording \nCDRs for the calls generated by the application.   \n   \n TODO: write simple ser.cfg example\n \n   \n Configuration options \n   \n \n WARNING!  Both Section and Option values MUST be lowercase in the database. They are mixed case here for readability only.\n \n\n\n  Section  \n  Option  \n  Meaning  \n  Default \n \n\n\n  FirstRegistration  \n  ScanIntervalSec  \n  The time between the attempts to find accounts to make a Welcome Call to  \n  30 seconds \n \n\n\n  FirstRegistration  \n  BackoffIntervalSec  \n  Failed attempts to make welcome call will be retried after the interval increasing by this value  \n  10 minutes \n \n\n\n  FirstRegistration  \n  MaxCallIntervalSec  \n  The time between retries to make Welcome Call cannot exceed this value  \n  14400 seconds (4 hours) \n \n\n\n  FirstRegistration  \n  TimeoutMsec  \n  The amount of time the application will wait for answer  \n  30000 milliseconds \n \n\n\n  FirstRegistration  \n  ThresholdMsec  \n  The minimum amount of time that the user must keep listening to the message after which Welcome Call is considered successful*  \n  3000 milliseconds \n \n\n\n  FirstRegistration  \n  cli  \n  CLI to use while originating Welcome Calls**  \n  NULL (means Anonymous) \n \n\n\n  FirstRegistration  \n  SIPProxy  \n  The host:port tuple defining the host where originated calls are to go  \n  127.0.0.1:5060 \n \n\n\n  FirstRegistration  \n  MaxAttempts  \n  The maximum number of failures to make welcome call.  \n  20 \n \n\n\n   \n * If the duration of the message is less than this value then a Welcome \nCall is considered successful after the whole prompt has been playe.\n \n \n** If the CLI is not NULL then the application finds the account \ncorresponding to CLI and uses it's authentication information to \noriginate a call.\n \n   \n Database usage \n   \n \nThe application uses IVR Prompts facility for the Welcome Call message storage.\n \n   \n Setting a custom prompt \n   \n \nIt is possible to play a custom greeting to the user from the Welcome \nCall application. The first step is to create an IVR prompt:   \n   \n  $ /home/ssp/scripts/ivr_prompt_utils -c welcome.sln welcome_prompt 'This is a Welcome Call prompt'\nNew prompt created with i_ivr_prompt = 30  \n  \nThe prompt is ready. Now assign this prompt to the accounts:\u00a0 \n   \n  UPDATE accounts SET welcome_call_ivr = 30 WHERE ...  \n   \n\n        \n        \n       ",
    "seo_data": {
      "meta_title": "",
      "meta_description": "",
      "meta_keywords": ""
    },
    "tags": [],
    "attachments": [],
    "cloud_files": [],
    "thumbs_up": 1,
    "thumbs_down": 0,
    "hits": 635,
    "suggested": 0,
    "feedback_count": 0
  },
  {
    "id": 79051,
    "type": 1,
    "status": 2,
    "agent_id": 3763909,
    "created_at": "2013-04-25T09:05:28Z",
    "category_id": 82218,
    "folder_id": 134765,
    "title": "ANI Callback IVR application",
    "updated_at": "2021-08-26T19:12:53Z",
    "description": "<h3><span style=\"font-size: 18px;\">Principle of operation</span></h3><p><br></p><div><p>The ANI Callback IVR application can be configured in two different ways:</p><ol><li dir=\"ltr\">Using a <strong>DID Pool</strong> and the <strong>IVR application</strong> menus (standard in the latest versions)&nbsp;</li><li dir=\"ltr\">Using a connection with the IP of environment and port 5062 which belongs to the internal Asterisk service.&nbsp;</li></ol></div><div><br></div><div>The <strong><u>first scenario</u></strong> is a standard one that we use in systems that are higher than 3.x version.</div><p><strong>&nbsp; &nbsp; &nbsp;&nbsp;</strong> 1. <strong>Open the IVR application</strong> menu and click Add New IVR application <strong>with Type = \"Calling Card\"&nbsp;</strong></p><p><strong>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</strong>using the following instruction: <a href=\"http://support.sippysoft.com/solution/articles/183496-step-1-add-calling-card-ivr-application\" target=\"_blank\">http://support.sippysoft.com/solution/articles/183496-step-1-add-calling-card-ivr-application</a></p><p>&nbsp; &nbsp; &nbsp; &nbsp;2.<strong>&nbsp;Open the IVR application</strong> menu again and click Add New IVR application with <strong>Type = \"ANI callback\"&nbsp;</strong>and with <strong>IVR Application (item #3 on image)</strong> that you have created in the<strong>&nbsp;item#1</strong><strong>.&nbsp;</strong>And then <strong>click \"save\"&nbsp;</strong>button to create it.</p><p><strong>&nbsp; &nbsp; &nbsp; &nbsp; See an example:</strong><strong><img class=\"fr-dib\" src=\"https://s3.amazonaws.com/cdn.freshdesk.com/data/helpdesk/attachments/production/3028956643/original/lRA884MQ4-R5PvElrtIhICHKxXL2GMZWbA.png?1496239514\" data-filelink=\"https://s3.amazonaws.com/cdn.freshdesk.com/data/helpdesk/attachments/production/3028956643/original/lRA884MQ4-R5PvElrtIhICHKxXL2GMZWbA.png?1496239514\" data-fileid=\"3028956643\" data-uniquekey=\"1496238226170\" style=\"width: 752px; height: 155.413px;\"></strong></p><p dir=\"ltr\"><strong>&nbsp; &nbsp; &nbsp;&nbsp;</strong> 3.<strong>&nbsp;</strong>After you save,<strong dir=\"ltr\">&nbsp;add the needed options in the&nbsp;</strong><strong>\"Advanced Parameters\"&nbsp;</strong>(scroll down the page to find the table with all available options)<strong>&nbsp;</strong>section of your application<strong>.</strong></p><p dir=\"ltr\">&nbsp; &nbsp; &nbsp; &nbsp;4. <strong>Open the DID Pool section</strong> menu and <strong dir=\"ltr\">add the DID number</strong> that later you will <strong dir=\"ltr\">assign to the IVR application</strong> with <strong>Type = \"ANI callback\"</strong>.</p><p dir=\"ltr\">&nbsp; &nbsp; &nbsp; &nbsp;5. <strong>Create a basic configuration</strong> of Sippy Softswitch using our video tutorial:</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<a dir=\"ltr\" href=\"https://sites.google.com/site/sippylearning/video-tutorials/home\" target=\"_blank\">https://sites.google.com/site/sippylearning/video-tutorials/home</a></p><div dir=\"ltr\">&nbsp; &nbsp; &nbsp; &nbsp;6. Create a special Account that you will use as a \"Default Account\" in the IVR application (for outgoing calls in scope of a callback service) where <strong>USERNAME&nbsp;</strong>should be used as a parameter.</div><p>&nbsp; &nbsp; &nbsp; &nbsp;<strong>See example:</strong></p><p><img class=\"fr-dib\" src=\"https://s3.amazonaws.com/cdn.freshdesk.com/data/helpdesk/attachments/production/3028955857/original/8EMXrOtWEsJdKm4LjSVU7m3jCrNTNdyVOw.png?1496238079\" data-filelink=\"https://s3.amazonaws.com/cdn.freshdesk.com/data/helpdesk/attachments/production/3028955857/original/8EMXrOtWEsJdKm4LjSVU7m3jCrNTNdyVOw.png?1496238079\" data-fileid=\"3028955857\" data-uniquekey=\"1496238039668\" style=\"width: 744px; height: 460.528px;\"></p><div dir=\"ltr\">&nbsp; &nbsp; &nbsp; &nbsp;7. &nbsp;Make a test call to the DID number that you have tied to your ANI callback application.&nbsp;</div><div dir=\"ltr\"><strong>Please note</strong>, when you call to the Callback application, the system initiates a callback to your CLI number and if the CLI answers the call, the system activates a Calling card application that requests the caller to enter the card number for proper authorization. In Sippy, Accounts play the role of Card Numbers this means you just need to enter the USERNAME of the Account for authorization and then Calling Card will ask you to enter the destination number.</div><p><br></p><div dir=\"ltr\">Below is described a <strong><u>second scenario</u></strong> of the ANI callback configuration that was used in older versions of Sippy Softswitch (in 3.x versions and lower).<br><ol><li>The ANI Callback application receives the call with the name of sub-application to invoke in its parameters (currently only <a href=\"https://sippysoft.freshdesk.com/support/solutions/articles/183496-calling\" target=\"\">CallingCard</a> and <a href=\"https://trac.sippysoft.com/trac/wiki/public/IVR/2WayCallback\" target=\"\">2Way Callback</a> IVR applications are supported).</li><li>The ANI Callback application checks if there is account matching incoming CLI for that call. The matchning performed against <strong>accounts</strong> table and then against <strong>calling_card_cli_map</strong> table to identify particular account.</li><li>If both matches in previous step have failed then the ANI Callback application tries to take the default callback username from configuration. So all foreign CLIs are called back using the default callback username as authname.</li><li>The ANI Callback application optionally indicates ringback via early media or sends ringing indication and then rejects incoming call without answering.</li><li>If the match has been successful the ANI Callback application initiates new call to that CLI using credentials of the user identified on the previous step.</li><li>If the call fails, the ANI Callback application makes several retries.</li><li>When the call has been aswered, the ANI Callback starts specified sub-application and passes control to it.</li></ol><p><br></p><h3><span style=\"font-size: 18px;\">Call routing setup</span></h3><ol><li>Add vendor connection. Set the Asterisk's host/port in the Destination field of Vendor Connection (ex: 192.168.0.100:5062).</li><li>Set the CLD Translation Rule for the connection to the value <strong>ani_&lt;options&gt;_&lt;string&gt;</strong>. For possible options please refer to the section <strong>CLD options</strong> below.</li><li>Add route to this connection to specify the ANI Callback Extension number.</li></ol><p>When user calls the specified extension the IVR server arranges the callback call and dials the user back in several seconds. The IVR applications consider this callback call as ordinary call with the CLI identical to original call and with CLD set to <strong>&lt;string&gt;</strong>.</p><p><br></p><p>Example:</p><ol><li>The Vendor connection has been created with the CLD Translation rule of <strong>ani_callingcard_en_th</strong>.</li><li>The user <strong>801</strong> called the callback extension and hanged up.</li><li>The IVR server calls the user and user picks up the phone.</li><li>The IVR session starts with the CLI <strong>801</strong> and CLD <strong>callingcard_en_th</strong>.</li><li>As expected the Calling Card application recognizes the call and handles it.</li></ol><h3><br></h3><h3>Available options for the \"Advanced parameters\" section of IVR application</h3><p><br></p><table><tbody><tr><td><strong>Option</strong><br></td><td><strong>Meaning</strong><br></td><td><strong>Default</strong><br></td></tr><tr><td><strong>Backoff Interval</strong><br></td><td>Failed attempts to make callback call will be retried after this amount of time<br></td><td>10 seconds<br></td></tr><tr><td><strong>Default Account Username</strong><br></td><td>The default account to use for CLIs that are not local accounts<br></td><td><br></td></tr><tr><td><strong>Enable_Anonymous_Accounting</strong><br></td><td>Should the real account also be charged for the first call leg of the callback call when using the Default Account. This option is the same as CLD option <strong>noanonacct</strong><br></td><td>True<br></td></tr><tr><td><strong>Delay Before Callback</strong><br></td><td>First callback attempt will be performed not earlier than this time has passed<br></td><td>5 seconds<br></td></tr><tr><td><strong>Hangup SIP Response Code</strong><br></td><td>Which SIP response code to use when hanging up. Possible hangup codes you can see <a class=\"wiki\" href=\"https://trac.sippysoft.com/trac/wiki/public/IVR/ANICallback#SupportedhangupSIPresponsecodes\">here</a>.<br></td><td>603<br></td></tr><tr><td><strong>Minimum Balance</strong><br></td><td>The minimum allowed balance when the account is accessible. When balance is lower then this threshold then the default user will be tried. The value can be suffixed with a currency (e.g. '2 USD') in which case it will be converted to the user's currency prior to comparison.<br></td><td>Not set<br></td></tr><tr><td><strong>Max # Of Callback Attempts</strong><br></td><td>The maximum number of attempts to call back before the call canceled<br></td><td>3<br></td></tr><tr><td><strong>Ringback Time</strong><br></td><td>How long to indicate ringing in seconds.<br></td><td>0 seconds<br></td></tr><tr><td><strong>Ringback Type</strong><br></td><td>How to indicate ringing. Possible values are 'indicate' and 'earlymedia'<br></td><td>'indicate'<br></td></tr><tr><td><strong>SIP Proxy For Callback Calls</strong><br></td><td>SIP proxy to use when doing the outbound calls<br></td><td>local IP address<br></td></tr><tr><td><strong>Scan Interval</strong><br></td><td>The time between attempts to find new callback calls<br></td><td>5 seconds<br></td></tr><tr><td><strong>Timeout</strong><br></td><td>Time to wait for answer<br></td><td>300 seconds<br></td></tr><tr><td><strong>Fixed CLI</strong><br></td><td>This value is used as CLI on the first call leg of the callback call.<br></td><td><br></td></tr><tr><td><strong>Disable CLI Authentication</strong><br></td><td>Completely disable CLI authentication. Useful together with <strong>Default Account Username</strong> option.<br></td><td>False<br></td></tr><tr><td><strong>Force CLI Authentication</strong><br></td><td>Reject calls from unknown CLIs. Can be used together with <strong>Force Default Account</strong> option.<br></td><td>False<br></td></tr><tr><td><strong>Force Default Account</strong><br></td><td>Always make the Default Account to be owner of the first callback call leg.<br></td><td>False<br></td></tr><tr><td><strong>The Reason For Diversion *</strong><br></td><td>The reason parameter for the Diversion SIP header<br></td><td>unconditional<br></td></tr></tbody></table><h3><span style=\"font-size: 14px;\">* starting from Sippy 2020</span></h3><h3><span style=\"font-size: 18px;\">CLD options</span></h3><p><br></p><table><tbody><tr><td><strong>Option</strong><br></td><td><strong>Description</strong><br></td></tr><tr><td><strong>noanonacct</strong><br></td><td>Should the real account also be charged for the first call leg of the callback call when using the Default Account. This option is equivalent to the <strong>Enable Anonymous Accounting</strong> option.<br></td></tr></tbody></table><h3><br></h3><h3><span style=\"font-size: 18px;\">Database usage</span></h3><p><br></p><p>The application uses <strong>callback_requests</strong> table to store new callback requests and completed call statistics.</p><p>Description of fields of the table <strong>callback_requests</strong></p><p><strong><br></strong></p><table><tbody><tr><td><strong>Field name</strong><br></td><td><strong>Description</strong><br></td></tr><tr><td><strong>anon_acct_enabled</strong><br></td><td>This field can help to enable or disable an accounting for calls which use the Default Account. When the accounting enabled, then a SIP header <strong>X-2Way-Need-Bind: yes</strong> is included in the INVITE SIP request while creating second call leg so to inform b2bua that the account making this outbound call should also be charged for the first callback call leg. Default is True<br></td></tr><tr><td><strong>authname</strong><br></td><td>The callback call is originated with this identity.<br></td></tr><tr><td><strong>call_count</strong><br></td><td>This field is used to reschedule the callback call<br></td></tr><tr><td><strong>call_id</strong><br></td><td>This field can be preset to some value in which case the callback call will use this Call-ID. If the field contains NULL then the random value is generated and placed in this field during the call.<br></td></tr><tr><td><strong>canceled</strong><br></td><td>This field is intended to be set from elsewhere (<a href=\"http://support.sippysoft.com/solution/categories/107132/folders/176848/articles/107448-manage-call-back-calls\" target=\"\">XMLRPC</a> for example). The corresponding call is forcibly canceled when this field is set to True.<br></td></tr><tr><td><strong>connect_time</strong><br></td><td>Statistics field indicating the connect time. It is NULL for failed calls.<br></td></tr><tr><td><strong>creation_time</strong><br></td><td>Statistics field containing date and time of request creation.<br></td></tr><tr><td><strong>credit_time</strong><br></td><td>First call leg of this callback call will be terminated in specified amount of seconds. This field is optional and defaults to NULL.<br></td></tr><tr><td><strong>default_user_used</strong><br></td><td>If the default callback user was chosen during callback request creation (see the Callback-&gt;DefaultUsername parameter)<br></td></tr><tr><td><strong>disconnect_time</strong><br></td><td>Statistics field indicating the end of the callback call<br></td></tr><tr><td><strong>finished</strong><br></td><td>If True then this record is statistics entry. Otherwise the record is schedule entry.<br></td></tr><tr><td><strong>i_callback_request</strong><br></td><td>The primary key<br></td></tr><tr><td><strong>md5secret</strong><br></td><td>HA1 hashed password of the user. HA1 is calculated as MD5 of the string \"&lt;username&gt;:&lt;realm&gt;:&lt;password&gt;\" (without quotes).<br></td></tr><tr><td><strong>next_call</strong><br></td><td>This field is used to reschedule the callback call<br></td></tr><tr><td><strong>original_cli</strong><br></td><td>Original CLI<br></td></tr><tr><td><strong>original_set_cli</strong><br></td><td>Use this CLI when creating callback call leg<br></td></tr><tr><td><strong>original_cld</strong><br></td><td>Original CLD<br></td></tr><tr><td><strong>setup_time</strong><br></td><td>Statistics field indicating the beginning of the callback call attempt<br></td></tr><tr><td><strong>result</strong><br></td><td>Callback result string (see below).<br></td></tr><tr><td><strong>status</strong><br></td><td>Callback status string (see below).<br></td></tr><tr><td><strong>twoway_call_id</strong><br></td><td>This field can be preset to some value in which case the call to destination will use this Call-ID. If the field contains NULL then the default value is constructed based on <strong>call_id</strong> and placed in this field during the call.<br></td></tr><tr><td><strong>twoway_cli</strong><br></td><td>Parameter for the 2WayCallback application.<br></td></tr><tr><td><strong>twoway_authname</strong><br></td><td>Parameter for the 2WayCallback application.<br></td></tr><tr><td><strong>twoway_md5secret</strong><br></td><td>Parameter for the 2WayCallback application.<br></td></tr><tr><td><strong>username</strong><br></td><td>The callback call is originated on behalf of this user<br></td></tr></tbody></table><h3><br></h3><h3><span style=\"font-size: 18px;\">Status and result strings</span></h3><p><br></p><p>Status and result are set by the callback subsystem and can also be extended by some applications. Currently 2 Way Callback Application is able to set own specific statuses and results.</p><h4><br></h4><h4><strong>Main flow</strong></h4><p><br></p><table><tbody><tr><td><strong>Order</strong><br></td><td><strong>Status</strong><br></td><td><strong>Result</strong><br></td><td><strong>Description</strong><br></td><td><strong>Is application specific</strong><br></td></tr><tr><td><br></td><td><br></td><td><br></td><td><br></td><td><br></td></tr><tr><td>1<br></td><td>Request received<br></td><td>NULL<br></td><td>Request received but not tried yet<br></td><td>No<br></td></tr><tr><td>2<br></td><td>First leg initiated<br></td><td>NULL<br></td><td>First leg initiated but not connected yet<br></td><td>No<br></td></tr><tr><td>3<br></td><td>First leg connected<br></td><td>NULL<br></td><td>First leg connected, and an IVR application started on the second call leg.<br></td><td>No<br></td></tr><tr><td>4<br></td><td>Second leg initiated<br></td><td>NULL<br></td><td>Second leg initiated but not connected yet<br></td><td>2 Way Callback<br></td></tr><tr><td>5<br></td><td>Second leg connected<br></td><td>NULL<br></td><td>Second leg connected and conversation takes place<br></td><td>2 Way Callback<br></td></tr><tr><td>6<br></td><td>Finished<br></td><td>Successful<br></td><td>Callback attempt succeeded<br></td><td>No<br></td></tr></tbody></table><h4><br></h4><h4><strong>Possible intermediate and error conditions</strong></h4><p><br></p><table><tbody><tr><td><strong>Status</strong><br></td><td><strong>Result</strong><br></td><td><strong>Description</strong><br></td><td><strong>Is application specific</strong><br></td></tr><tr><td><br></td><td><br></td><td><br></td><td><br></td></tr><tr><td>Waiting for retry<br></td><td>NULL<br></td><td>Callback attempt was unsuccessful but some more attempts are allowed<br></td><td>No<br></td></tr><tr><td>Finished<br></td><td>Out of retries<br></td><td>All possible attempts to call back have failed<br></td><td>No<br></td></tr><tr><td>Finished<br></td><td>Expired<br></td><td>The callback request was too old to even try it. This can happen if ivrd has been down for too long<br></td><td>No<br></td></tr><tr><td>Finished<br></td><td>First leg aborted<br></td><td>First call leg has hanged up before second call leg connects<br></td><td>2 Way Callback<br></td></tr><tr><td>Finished<br></td><td>Second leg failed<br></td><td>Second call leg has been rejected<br></td><td>2 Way Callback<br></td></tr><tr><td>Finished<br></td><td>Canceled<br></td><td>Call was canceled by administrator.<br></td><td>No<br></td></tr></tbody></table><h3><br></h3><h3><span style=\"font-size: 18px;\">Supported hangup SIP response codes</span></h3><br><table id=\"table67218\"><tbody><tr><td><pre><b class=\"current\">403 Forbidden\n404 Not found\n408 Request Timeout\n410 Gone\n480 Temporarily unavailable\n484 Address incomplete\n486 Busy here\n488 Not Acceptable Here\n500 Server internal failure\n501 Not Implemented\n503 Service Unavailable\n502 Bad Gateway\n603 Declined</b></pre></td></tr></tbody></table><p><br></p><h3><span style=\"font-size: 18px;\">Notes</span></h3><ol><li><strong>Max. Sessions</strong> parameter of the callback account should be equal to or greater than 2. Otherwise the second call leg won't go through.</li></ol></div>",
    "description_text": " Principle of operation      The ANI Callback IVR application can be configured in two different ways:   Using a DID Pool and the IVR application menus (standard in the latest versions)\u00a0  Using a connection with the IP of environment and port 5062 which belongs to the internal Asterisk service.\u00a0       The first scenario is a standard one that we use in systems that are higher than 3.x version.  \u00a0 \u00a0 \u00a0\u00a0 1. Open the IVR application menu and click Add New IVR application with Type = \"Calling Card\"\u00a0  \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0using the following instruction: http://support.sippysoft.com/solution/articles/183496-step-1-add-calling-card-ivr-application  \u00a0 \u00a0 \u00a0 \u00a02.\u00a0Open the IVR application menu again and click Add New IVR application with Type = \"ANI callback\"\u00a0and with IVR Application (item #3 on image) that you have created in the\u00a0item#1.\u00a0And then click \"save\"\u00a0button to create it.  \u00a0 \u00a0 \u00a0 \u00a0 See an example:  \u00a0 \u00a0 \u00a0\u00a0 3.\u00a0After you save,\u00a0add the needed options in the\u00a0\"Advanced Parameters\"\u00a0(scroll down the page to find the table with all available options)\u00a0section of your application.  \u00a0 \u00a0 \u00a0 \u00a04. Open the DID Pool section menu and add the DID number that later you will assign to the IVR application with Type = \"ANI callback\".  \u00a0 \u00a0 \u00a0 \u00a05. Create a basic configuration of Sippy Softswitch using our video tutorial:  \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0https://sites.google.com/site/sippylearning/video-tutorials/home  \u00a0 \u00a0 \u00a0 \u00a06. Create a special Account that you will use as a \"Default Account\" in the IVR application (for outgoing calls in scope of a callback service) where USERNAME\u00a0should be used as a parameter.  \u00a0 \u00a0 \u00a0 \u00a0See example:    \u00a0 \u00a0 \u00a0 \u00a07. \u00a0Make a test call to the DID number that you have tied to your ANI callback application.\u00a0  Please note, when you call to the Callback application, the system initiates a callback to your CLI number and if the CLI answers the call, the system activates a Calling card application that requests the caller to enter the card number for proper authorization. In Sippy, Accounts play the role of Card Numbers this means you just need to enter the USERNAME of the Account for authorization and then Calling Card will ask you to enter the destination number.     Below is described a second scenario of the ANI callback configuration that was used in older versions of Sippy Softswitch (in 3.x versions and lower).   The ANI Callback application receives the call with the name of sub-application to invoke in its parameters (currently only CallingCard and 2Way Callback IVR applications are supported).  The ANI Callback application checks if there is account matching incoming CLI for that call. The matchning performed against accounts table and then against calling_card_cli_map table to identify particular account.  If both matches in previous step have failed then the ANI Callback application tries to take the default callback username from configuration. So all foreign CLIs are called back using the default callback username as authname.  The ANI Callback application optionally indicates ringback via early media or sends ringing indication and then rejects incoming call without answering.  If the match has been successful the ANI Callback application initiates new call to that CLI using credentials of the user identified on the previous step.  If the call fails, the ANI Callback application makes several retries.  When the call has been aswered, the ANI Callback starts specified sub-application and passes control to it.      Call routing setup   Add vendor connection. Set the Asterisk's host/port in the Destination field of Vendor Connection (ex: 192.168.0.100:5062).  Set the CLD Translation Rule for the connection to the value ani_<options>_<string>. For possible options please refer to the section CLD options below.  Add route to this connection to specify the ANI Callback Extension number.   When user calls the specified extension the IVR server arranges the callback call and dials the user back in several seconds. The IVR applications consider this callback call as ordinary call with the CLI identical to original call and with CLD set to <string>.     Example:   The Vendor connection has been created with the CLD Translation rule of ani_callingcard_en_th.  The user 801 called the callback extension and hanged up.  The IVR server calls the user and user picks up the phone.  The IVR session starts with the CLI 801 and CLD callingcard_en_th.  As expected the Calling Card application recognizes the call and handles it.      Available options for the \"Advanced parameters\" section of IVR application     Option   Meaning   Default   Backoff Interval   Failed attempts to make callback call will be retried after this amount of time   10 seconds   Default Account Username   The default account to use for CLIs that are not local accounts      Enable_Anonymous_Accounting   Should the real account also be charged for the first call leg of the callback call when using the Default Account. This option is the same as CLD option noanonacct   True   Delay Before Callback   First callback attempt will be performed not earlier than this time has passed   5 seconds   Hangup SIP Response Code   Which SIP response code to use when hanging up. Possible hangup codes you can see here.   603   Minimum Balance   The minimum allowed balance when the account is accessible. When balance is lower then this threshold then the default user will be tried. The value can be suffixed with a currency (e.g. '2 USD') in which case it will be converted to the user's currency prior to comparison.   Not set   Max # Of Callback Attempts   The maximum number of attempts to call back before the call canceled   3   Ringback Time   How long to indicate ringing in seconds.   0 seconds   Ringback Type   How to indicate ringing. Possible values are 'indicate' and 'earlymedia'   'indicate'   SIP Proxy For Callback Calls   SIP proxy to use when doing the outbound calls   local IP address   Scan Interval   The time between attempts to find new callback calls   5 seconds   Timeout   Time to wait for answer   300 seconds   Fixed CLI   This value is used as CLI on the first call leg of the callback call.      Disable CLI Authentication   Completely disable CLI authentication. Useful together with Default Account Username option.   False   Force CLI Authentication   Reject calls from unknown CLIs. Can be used together with Force Default Account option.   False   Force Default Account   Always make the Default Account to be owner of the first callback call leg.   False   The Reason For Diversion *   The reason parameter for the Diversion SIP header   unconditional   * starting from Sippy 2020  CLD options     Option   Description   noanonacct   Should the real account also be charged for the first call leg of the callback call when using the Default Account. This option is equivalent to the Enable Anonymous Accounting option.      Database usage     The application uses callback_requests table to store new callback requests and completed call statistics.  Description of fields of the table callback_requests     Field name   Description   anon_acct_enabled   This field can help to enable or disable an accounting for calls which use the Default Account. When the accounting enabled, then a SIP header X-2Way-Need-Bind: yes is included in the INVITE SIP request while creating second call leg so to inform b2bua that the account making this outbound call should also be charged for the first callback call leg. Default is True   authname   The callback call is originated with this identity.   call_count   This field is used to reschedule the callback call   call_id   This field can be preset to some value in which case the callback call will use this Call-ID. If the field contains NULL then the random value is generated and placed in this field during the call.   canceled   This field is intended to be set from elsewhere (XMLRPC for example). The corresponding call is forcibly canceled when this field is set to True.   connect_time   Statistics field indicating the connect time. It is NULL for failed calls.   creation_time   Statistics field containing date and time of request creation.   credit_time   First call leg of this callback call will be terminated in specified amount of seconds. This field is optional and defaults to NULL.   default_user_used   If the default callback user was chosen during callback request creation (see the Callback->DefaultUsername parameter)   disconnect_time   Statistics field indicating the end of the callback call   finished   If True then this record is statistics entry. Otherwise the record is schedule entry.   i_callback_request   The primary key   md5secret   HA1 hashed password of the user. HA1 is calculated as MD5 of the string \"<username>:<realm>:<password>\" (without quotes).   next_call   This field is used to reschedule the callback call   original_cli   Original CLI   original_set_cli   Use this CLI when creating callback call leg   original_cld   Original CLD   setup_time   Statistics field indicating the beginning of the callback call attempt   result   Callback result string (see below).   status   Callback status string (see below).   twoway_call_id   This field can be preset to some value in which case the call to destination will use this Call-ID. If the field contains NULL then the default value is constructed based on call_id and placed in this field during the call.   twoway_cli   Parameter for the 2WayCallback application.   twoway_authname   Parameter for the 2WayCallback application.   twoway_md5secret   Parameter for the 2WayCallback application.   username   The callback call is originated on behalf of this user      Status and result strings     Status and result are set by the callback subsystem and can also be extended by some applications. Currently 2 Way Callback Application is able to set own specific statuses and results.     Main flow     Order   Status   Result   Description   Is application specific                  1   Request received   NULL   Request received but not tried yet   No   2   First leg initiated   NULL   First leg initiated but not connected yet   No   3   First leg connected   NULL   First leg connected, and an IVR application started on the second call leg.   No   4   Second leg initiated   NULL   Second leg initiated but not connected yet   2 Way Callback   5   Second leg connected   NULL   Second leg connected and conversation takes place   2 Way Callback   6   Finished   Successful   Callback attempt succeeded   No      Possible intermediate and error conditions     Status   Result   Description   Is application specific               Waiting for retry   NULL   Callback attempt was unsuccessful but some more attempts are allowed   No   Finished   Out of retries   All possible attempts to call back have failed   No   Finished   Expired   The callback request was too old to even try it. This can happen if ivrd has been down for too long   No   Finished   First leg aborted   First call leg has hanged up before second call leg connects   2 Way Callback   Finished   Second leg failed   Second call leg has been rejected   2 Way Callback   Finished   Canceled   Call was canceled by administrator.   No      Supported hangup SIP response codes    403 Forbidden\n404 Not found\n408 Request Timeout\n410 Gone\n480 Temporarily unavailable\n484 Address incomplete\n486 Busy here\n488 Not Acceptable Here\n500 Server internal failure\n501 Not Implemented\n503 Service Unavailable\n502 Bad Gateway\n603 Declined      Notes   Max. Sessions parameter of the callback account should be equal to or greater than 2. Otherwise the second call leg won't go through.   ",
    "seo_data": {
      "meta_title": "",
      "meta_description": "",
      "meta_keywords": ""
    },
    "tags": [],
    "attachments": [],
    "cloud_files": [],
    "thumbs_up": 0,
    "thumbs_down": 3,
    "hits": 1624,
    "suggested": 0,
    "feedback_count": 0
  },
  {
    "id": 79065,
    "type": 1,
    "status": 2,
    "agent_id": 3763909,
    "created_at": "2013-04-25T09:22:44Z",
    "category_id": 82218,
    "folder_id": 134765,
    "title": "2 Way Callback Application",
    "updated_at": "2016-10-12T11:02:09Z",
    "description": "<div dir=\"ltr\">\n<div dir=\"ltr\">\r\n<div dir=\"ltr\">\r\n<div dir=\"ltr\">\r\n<h3><span style=\"font-size: 18px;\">Principle of operation</span></h3>\r\n<p><br></p>\r\n<div>\r\n<p>\r\nThis is an application that user cannot use directly by calling some number. To initiate the application either the <b>XML-RPC interface</b> should be used or a special <b>CLD translation rule</b> on connection can be used or <b>A</b> record should be inserted directly into the <strong>callback_requests</strong> table. <br></p>\r\n<p><br></p>\r\n<p>\r\nThe main use case of the application is as follows.\r\n</p>\r\n<ol>\r\n<li>\n<b>A</b> record via tr. rule or by other means is created in the <strong>callback_requests</strong> table.\r\n</li>\r\n<li>Callback monitor discovers the record and initiates call leg to <strong>original_cli</strong> number with the given identity (<strong>original_cli</strong> as CLI, <strong>username</strong> or <strong>authname</strong> as authname and <strong>md5secret</strong>).\r\n</li>\r\n<li>User picks up his phone.\r\n</li>\r\n<li>2 Way Callback application starts and initiates the call to the <strong>actual CLD</strong> number with the given identity (<strong>username</strong> as CLI, <strong>authname</strong> and <strong>md5secret</strong>). Each of the identity values can be optionally overridden by explicit specification in corresponding field <strong>twoway_cli</strong>, <strong>twoway_authname</strong> and <strong>twoway_md5secret</strong>.\r\n</li>\r\n<li>The phone is picked up at the destination.\r\n</li>\r\n<li>Conversation takes place.\r\n</li>\r\n</ol>\r\n<br>\r\n<h3><span style=\"font-size: 18px;\">Using special CLD translation rule you can initiate a 2 way Callback<br></span></h3>\r\n<p><br></p>\r\n<p>\r\nYou may use a translation rule\r\n to create a 2 way callback request. <br></p>\n<p><br></p>\n<h3><span style=\"font-size: 18px;\">Call routing setup</span></h3>\n<ol>\n<li>Add vendor connection. Set the Asterisk's host/port in the Destination field of Vendor Connection (ex: <b>192.168.0.100:5062</b>).</li>\n<li>Set the CLD Translation Rule for the connection to the value: <b><span style=\"background-color: rgb(216, 216, 216);\">s/.*/ani_2way_&lt;actual CLD&gt;/</span></b>\n</li>\n<li>Add route to this connection.</li>\n</ol>\n<p><i>* For example if a user should be called back and then connected to the \r\nextension 12345 then the CLD translation rule should be look like this:</i><i> </i><span style=\"background-color: rgb(216, 216, 216);\"><i><b>s/.*/ani_2way_12345/</b></i></span><b><span style=\"background-color: rgb(216, 216, 216);\"><i></i></span></b></p>\n<p><br></p>\r\n<h3><span style=\"font-size: 18px;\">Using the callback_requests table directly</span></h3>\r\n<p><br></p>\r\n<p>\r\nLets review the table <strong>callback_requests</strong>, only significant fields.\r\n</p>\r\n<ul>\r\n<li>\r\n<strong>username</strong>, <strong>authname</strong> and <strong>md5secret</strong>  are the identity of the user to use when originating both call legs. The <strong>md5secret</strong>\r\n is HA1 value in hexadecimal representation. HA1 is calculated as MD5 of\r\n the string \"&lt;username&gt;:&lt;realm&gt;:&lt;password&gt;\" (without \r\nquotes).\r\n</li>\r\n<li>\r\n<strong>twoway_cli</strong>, <strong>twoway_authname</strong> and <strong>twoway_md5secret</strong> are optional identity pieces to use when originating second call leg.\r\n</li>\r\n<li>\r\n<strong>original_cli</strong> - The CLI of the user that requested the callback.\r\n</li>\r\n<li>\r\n<strong>original_set_cli</strong> - use this CLI when creating callback call leg.\r\n</li>\r\n<li>\r\n<strong>original_cld</strong> - This field must contain a value in the form <strong>\"2way_&lt;actual CLD&gt;\"</strong>.\r\n</li>\r\n<li>\r\n<strong>next_call</strong> - This field shows the time of the next attempt to call. It may be useful for scheduling the callback in a future.\r\n</li>\r\n<li>\r\n<strong>call_id</strong> - This field can be preset to some \r\nvalue in which case the callback call will use this Call-ID. If the \r\nfield contains NULL then the random value is generated and placed in \r\nthis field during the call.\r\n</li>\r\n<li>\r\n<strong>twoway_call_id</strong> - This field can be preset to \r\nsome value in which case the call to destination will use this Call-ID. \r\nIf the field contains NULL then the default value is constructed based \r\non <strong>call_id</strong> and placed in this field during the call.\r\n</li>\r\n<li>\r\n<strong>status</strong> and <strong>result</strong> - contain current status of the call. More information see <a href=\"http://sippysoft.freshdesk.com/support/solutions/articles/79051-ani-callback-ivr-application\" target=\"_blank\">here</a>\u00a0\r\n</li>\r\n</ul>\r\n<p><br></p>\r\n<p>For example if the user 801 should be called back at extension 87654321 \r\nand then connected to the extension 12345 then the corresponding SQL \r\nquery should look like this: <br></p>\r\n<p><br></p>\r\n\r\n<table id=\"table33888\"><tbody><tr><td><pre>  INSERT INTO callback_requests (\r\n     username, \r\n     authname,\r\n     md5secret,\r\n     original_cli,\r\n     original_cld\r\n  )\r\n  VALUES (\r\n    '801',\r\n    '902',\r\n    '&lt;md5secret&gt;',\r\n    '87654321',\r\n    '2way_12345'\r\n  )</pre></td></tr></tbody></table>\r\n<pre><strong><br>NOTE:</strong> The <strong>authname</strong> value can be omitted in which case the <strong>username</strong> value will be used as an authname instead.\r\n</pre>\r\n\r\n        \r\n        \r\n      </div>\r\n          <h3><br></h3>\r\n<h3>Attachments</h3>\r\n          <ul><li>\r\n      <a href=\"https://trac.sippysoft.com/trac/attachment/wiki/public/IVR/2WayCallback/2way_callback_mysql_dump.sql\" title=\"View attachment\">2way_callback_mysql_dump.sql</a>\r\n      <a href=\"https://trac.sippysoft.com/trac/raw-attachment/wiki/public/IVR/2WayCallback/2way_callback_mysql_dump.sql\" title=\"Download\" class=\"trac-rawlink\"><img src=\"https://trac.sippysoft.com/trac/chrome/common/download.png\" alt=\"Download\"></a>\r\n      (12.3 KB)<q></q>\r\n              </li></ul>\r\n</div>\r\n</div>\r\n</div>\r\n</div>",
    "description_text": " \n \n \n \n Principle of operation \n   \n \n \nThis is an application that user cannot use directly by calling some number. To initiate the application either the XML-RPC interface should be used or a special CLD translation rule on connection can be used or A record should be inserted directly into the callback_requests table.   \n   \n \nThe main use case of the application is as follows.\n \n \n \nA record via tr. rule or by other means is created in the callback_requests table.\n \n Callback monitor discovers the record and initiates call leg to original_cli number with the given identity (original_cli as CLI, username or authname as authname and md5secret).\n \n User picks up his phone.\n \n 2 Way Callback application starts and initiates the call to the actual CLD number with the given identity (username as CLI, authname and md5secret). Each of the identity values can be optionally overridden by explicit specification in corresponding field twoway_cli, twoway_authname and twoway_md5secret.\n \n The phone is picked up at the destination.\n \n Conversation takes place.\n \n \n \n Using special CLD translation rule you can initiate a 2 way Callback  \n   \n \nYou may use a translation rule\n to create a 2 way callback request.   \n   \n Call routing setup \n \n Add vendor connection. Set the Asterisk's host/port in the Destination field of Vendor Connection (ex: 192.168.0.100:5062). \n Set the CLD Translation Rule for the connection to the value: s/.*/ani_2way_<actual CLD>/\n \n Add route to this connection. \n \n * For example if a user should be called back and then connected to the \nextension 12345 then the CLD translation rule should be look like this: s/.*/ani_2way_12345/ \n   \n Using the callback_requests table directly \n   \n \nLets review the table callback_requests, only significant fields.\n \n \n \nusername, authname and md5secret  are the identity of the user to use when originating both call legs. The md5secret\n is HA1 value in hexadecimal representation. HA1 is calculated as MD5 of\n the string \"<username>:<realm>:<password>\" (without \nquotes).\n \n \ntwoway_cli, twoway_authname and twoway_md5secret are optional identity pieces to use when originating second call leg.\n \n \noriginal_cli - The CLI of the user that requested the callback.\n \n \noriginal_set_cli - use this CLI when creating callback call leg.\n \n \noriginal_cld - This field must contain a value in the form \"2way_<actual CLD>\".\n \n \nnext_call - This field shows the time of the next attempt to call. It may be useful for scheduling the callback in a future.\n \n \ncall_id - This field can be preset to some \nvalue in which case the callback call will use this Call-ID. If the \nfield contains NULL then the random value is generated and placed in \nthis field during the call.\n \n \ntwoway_call_id - This field can be preset to \nsome value in which case the call to destination will use this Call-ID. \nIf the field contains NULL then the default value is constructed based \non call_id and placed in this field during the call.\n \n \nstatus and result - contain current status of the call. More information see here\u00a0\n \n \n   \n For example if the user 801 should be called back at extension 87654321 \nand then connected to the extension 12345 then the corresponding SQL \nquery should look like this:   \n   \n\n    INSERT INTO callback_requests (\n     username, \n     authname,\n     md5secret,\n     original_cli,\n     original_cld\n  )\n  VALUES (\n    '801',\n    '902',\n    '<md5secret>',\n    '87654321',\n    '2way_12345'\n  )  \n  NOTE: The authname value can be omitted in which case the username value will be used as an authname instead.\n \n\n        \n        \n       \n             \n Attachments \n            \n      2way_callback_mysql_dump.sql\n      \n      (12.3 KB)\n                \n \n \n \n ",
    "seo_data": {
      "meta_title": "",
      "meta_description": "",
      "meta_keywords": ""
    },
    "tags": [],
    "attachments": [],
    "cloud_files": [],
    "thumbs_up": 0,
    "thumbs_down": 1,
    "hits": 489,
    "suggested": 0,
    "feedback_count": 0
  },
  {
    "id": 79066,
    "type": 1,
    "status": 1,
    "agent_id": 3763909,
    "created_at": "2013-04-25T09:26:48Z",
    "category_id": 82218,
    "folder_id": 134765,
    "title": "Campaigns IVR application (obsolete)",
    "updated_at": "2021-04-26T13:41:02Z",
    "description": "<p>This application is intended to ring round a specified set of destinations and play custom voice prompt.\n</p>\n<div>\n<h2><br></h2>\n<h3><span style=\"font-size: 18px;\">Call routing setup</span></h3>\n<p><br></p>\n<p>Not applicable\n</p>\n<h3><br></h3>\n<h3><span style=\"font-size: 18px;\">Configuration options</span></h3>\n<p>\n<strong><i><br></i></strong></p>\n<p><strong><i>WARNING! </i></strong><i> Both Section and Option values MUST be lowercase in the database. They are mixed case here for readability only.</i>\n</p>\n<table><tbody>\n<tr>\n<td><strong>Section</strong></td>\n<td><strong>Option</strong></td>\n<td><strong>Meaning</strong></td>\n<td>\n<strong>Default</strong>\n</td>\n</tr>\n<tr>\n<td> <br>\n</td>\n<td> <br>\n</td>\n<td> <br>\n</td>\n<td> \n<br>\n</td>\n</tr>\n<tr>\n<td> <strong>Campaign</strong> </td>\n<td> <strong>SIPProxy</strong> </td>\n<td> What SIP proxy to use for outgoing calls. </td>\n<td> The value specified in <strong>-l</strong> command line option but with port 5061 or 127.0.0.1:5061 \n</td>\n</tr>\n<tr>\n<td> <strong>Campaign</strong> </td>\n<td> <strong>ScanIntervalSec</strong> </td>\n<td> Delay between scans for new campaign calls. </td>\n<td> 5 seconds \n</td>\n</tr>\n</tbody></table>\n<h3><br></h3>\n<h3><span style=\"font-size: 18px;\">Database usage</span></h3>\n<p><br></p>\n<p>The application uses tables <strong>campaigns</strong> and <strong>campaign_phones</strong> to find new campaigns and keep track of call attempts. Additionally the <strong>schedules</strong> and <strong>schedule_records</strong> tables can be used to schedule the campaign calls.\n</p>\n<h3><br></h3>\n<h3><span style=\"font-size: 18px;\">Short table overview campaigns</span></h3>\n<p><br></p>\n<table><tbody>\n<tr>\n<td> <strong>Field</strong> </td>\n<td> <strong>Description</strong> \n</td>\n</tr>\n<tr>\n<td> <strong>i_campaign</strong> </td>\n<td> The primary key. \n</td>\n</tr>\n<tr>\n<td> <strong>name</strong> </td>\n<td> Short name of the campaign. \n</td>\n</tr>\n<tr>\n<td> <strong>description</strong> </td>\n<td> Long description of the campaign. \n</td>\n</tr>\n<tr>\n<td> <strong>i_ivr_prompt</strong> </td>\n<td> The identifier of <strong>ivr_prompt</strong> to play. \n</td>\n</tr>\n<tr>\n<td> <strong>paused</strong> </td>\n<td> Whether the campaign is temporarily stopped. \n</td>\n</tr>\n<tr>\n<td> <strong>username</strong> </td>\n<td> Authentication name to use while calling out. \n</td>\n</tr>\n<tr>\n<td> <strong>md5secret</strong> </td>\n<td> Password to use with the <strong>username</strong>. \n</td>\n</tr>\n<tr>\n<td> <strong>cli</strong> </td>\n<td> Use this value as CLI when calling out. If not set the CLD value used as CLI. \n</td>\n</tr>\n<tr>\n<td> <strong>i_schedule</strong> </td>\n<td> Optional schedule \n</td>\n</tr>\n<tr>\n<td> <strong>max_concurrent_calls</strong> </td>\n<td> The maximum number of concurrent calls per the campaign (default: 20) \n</td>\n</tr>\n<tr>\n<td> <strong>max_attempts</strong> </td>\n<td> The maximum number of attempts to call each destination (default: 3) \n</td>\n</tr>\n<tr>\n<td> <strong>timeout_sec</strong> </td>\n<td> How long to wait for destination to answer (default: 300 seconds) \n</td>\n</tr>\n<tr>\n<td> <strong>backoff_sec</strong> </td>\n<td> The delay after unsuccessful call before next attempt (default: 600 seconds) \n</td>\n</tr>\n<tr>\n<td> <strong>threshold_msec</strong> </td>\n<td> How long the prompt should have been playing to recognize the call as successful (default: 3000 milliseconds) \n</td>\n</tr>\n</tbody></table>\n<h4><br></h4>\n<h4><b>campaign_phones</b></h4>\n<p><br></p>\n<table><tbody>\n<tr>\n<td> <strong>Field</strong> </td>\n<td> <strong>Description</strong> \n</td>\n</tr>\n<tr>\n<td> <strong>i_campaign_phone</strong> </td>\n<td> The primary key. \n</td>\n</tr>\n<tr>\n<td> <strong>i_campaign</strong> </td>\n<td> Which campaign this phone belongs to. \n</td>\n</tr>\n<tr>\n<td> <strong>cld</strong> </td>\n<td> CLD \n</td>\n</tr>\n<tr>\n<td> <strong>finished</strong> </td>\n<td> False when the record still in progress. \n</td>\n</tr>\n<tr>\n<td> <strong>expires</strong> </td>\n<td> It is NULL when the record has never been processed. The expiration date and time is contained here otherwise. \n</td>\n</tr>\n<tr>\n<td> <strong>next_call</strong> </td>\n<td> The instant when next call attempt will take place. May be NULL which means <i>immediately</i>. \n</td>\n</tr>\n<tr>\n<td> <strong>call_count</strong> </td>\n<td> Number of call attempts made. \n</td>\n</tr>\n<tr>\n<td> <strong>setup_time</strong> </td>\n<td> Accounting information. \n</td>\n</tr>\n<tr>\n<td> <strong>connect_time</strong> </td>\n<td> Accounting information. \n</td>\n</tr>\n<tr>\n<td> <strong>disconnect_time</strong> </td>\n<td> Accounting information. \n</td>\n</tr>\n<tr>\n<td> <strong>status</strong> </td>\n<td> One of the values: 'idle', 'trying', 'answer', 'failure', 'premature hangup' or 'success'. The value is updated in real time. \n</td>\n</tr>\n</tbody></table>\n<h4><br></h4>\n<h4><b>schedules</b></h4>\n<p><br></p>\n<table><tbody>\n<tr>\n<td> <strong>Field</strong> </td>\n<td> <strong>Description</strong> \n</td>\n</tr>\n<tr>\n<td> <strong>i_schedule</strong> </td>\n<td> The primary key. \n</td>\n</tr>\n<tr>\n<td> <strong>name</strong> </td>\n<td> Short name of the schedule. \n</td>\n</tr>\n<tr>\n<td> <strong>description</strong> </td>\n<td> Long description of the schedule. \n</td>\n</tr>\n</tbody></table>\n<h4>schedule_records</h4>\n<table><tbody>\n<tr>\n<td> <strong>Field</strong> </td>\n<td> <strong>Description</strong> \n</td>\n</tr>\n<tr>\n<td> <strong>i_schedule_record</strong> </td>\n<td> The primary key. \n</td>\n</tr>\n<tr>\n<td> <strong>i_schedule</strong> </td>\n<td> Which schedule this record belongs to. \n</td>\n</tr>\n<tr>\n<td> <strong>start_wday</strong> </td>\n<td> Weekday when to start the campaign (1-Monday,... 7-Sunday) \n</td>\n</tr>\n<tr>\n<td> <strong>stop_wday</strong> </td>\n<td> Weekday when to stop the campaign (1-Monday,... 7-Sunday) \n</td>\n</tr>\n<tr>\n<td> <strong>start_time</strong> </td>\n<td> Daytime to start the campaign \n</td>\n</tr>\n<tr>\n<td> <strong>stop_time</strong> </td>\n<td> Daytime to stop the campaign \n</td>\n</tr>\n</tbody></table>\n<p>\n<strong><br></strong></p>\n<p><strong>Note:</strong> The start and stop can be reversed. For example if the <strong>start_wday</strong> is Saturday and <strong>stop_wday</strong> is Tuesday then the campaign will take place on Saturday, Sunday, Monday and Tuesday. The same rule applies to <strong>start_time</strong> and <strong>stop_time</strong>.\n</p>\n<p>\n<strong><br></strong></p>\n<p><strong>Note:</strong> The time intervals are inclusive (see the previous example).\n</p>\n<p>\n<strong><br></strong></p>\n<p><strong>Note:</strong> If some interval contains NULL start or stop value then this interval matches any time value.\n</p>\n\n        \n        \n      </div>",
    "description_text": " This application is intended to ring round a specified set of destinations and play custom voice prompt.\n \n \n   \n Call routing setup \n   \n Not applicable\n \n   \n Configuration options \n \n  \n WARNING!  Both Section and Option values MUST be lowercase in the database. They are mixed case here for readability only.\n \n\n\n Section \n Option \n Meaning \n \nDefault\n \n\n\n   \n \n   \n \n   \n \n  \n \n \n\n\n  Campaign  \n  SIPProxy  \n  What SIP proxy to use for outgoing calls.  \n  The value specified in -l command line option but with port 5061 or 127.0.0.1:5061 \n \n\n\n  Campaign  \n  ScanIntervalSec  \n  Delay between scans for new campaign calls.  \n  5 seconds \n \n\n\n   \n Database usage \n   \n The application uses tables campaigns and campaign_phones to find new campaigns and keep track of call attempts. Additionally the schedules and schedule_records tables can be used to schedule the campaign calls.\n \n   \n Short table overview campaigns \n   \n\n\n  Field  \n  Description \n \n\n\n  i_campaign  \n  The primary key. \n \n\n\n  name  \n  Short name of the campaign. \n \n\n\n  description  \n  Long description of the campaign. \n \n\n\n  i_ivr_prompt  \n  The identifier of ivr_prompt to play. \n \n\n\n  paused  \n  Whether the campaign is temporarily stopped. \n \n\n\n  username  \n  Authentication name to use while calling out. \n \n\n\n  md5secret  \n  Password to use with the username. \n \n\n\n  cli  \n  Use this value as CLI when calling out. If not set the CLD value used as CLI. \n \n\n\n  i_schedule  \n  Optional schedule \n \n\n\n  max_concurrent_calls  \n  The maximum number of concurrent calls per the campaign (default: 20) \n \n\n\n  max_attempts  \n  The maximum number of attempts to call each destination (default: 3) \n \n\n\n  timeout_sec  \n  How long to wait for destination to answer (default: 300 seconds) \n \n\n\n  backoff_sec  \n  The delay after unsuccessful call before next attempt (default: 600 seconds) \n \n\n\n  threshold_msec  \n  How long the prompt should have been playing to recognize the call as successful (default: 3000 milliseconds) \n \n\n\n   \n campaign_phones \n   \n\n\n  Field  \n  Description \n \n\n\n  i_campaign_phone  \n  The primary key. \n \n\n\n  i_campaign  \n  Which campaign this phone belongs to. \n \n\n\n  cld  \n  CLD \n \n\n\n  finished  \n  False when the record still in progress. \n \n\n\n  expires  \n  It is NULL when the record has never been processed. The expiration date and time is contained here otherwise. \n \n\n\n  next_call  \n  The instant when next call attempt will take place. May be NULL which means immediately. \n \n\n\n  call_count  \n  Number of call attempts made. \n \n\n\n  setup_time  \n  Accounting information. \n \n\n\n  connect_time  \n  Accounting information. \n \n\n\n  disconnect_time  \n  Accounting information. \n \n\n\n  status  \n  One of the values: 'idle', 'trying', 'answer', 'failure', 'premature hangup' or 'success'. The value is updated in real time. \n \n\n\n   \n schedules \n   \n\n\n  Field  \n  Description \n \n\n\n  i_schedule  \n  The primary key. \n \n\n\n  name  \n  Short name of the schedule. \n \n\n\n  description  \n  Long description of the schedule. \n \n\n\n schedule_records \n\n\n  Field  \n  Description \n \n\n\n  i_schedule_record  \n  The primary key. \n \n\n\n  i_schedule  \n  Which schedule this record belongs to. \n \n\n\n  start_wday  \n  Weekday when to start the campaign (1-Monday,... 7-Sunday) \n \n\n\n  stop_wday  \n  Weekday when to stop the campaign (1-Monday,... 7-Sunday) \n \n\n\n  start_time  \n  Daytime to start the campaign \n \n\n\n  stop_time  \n  Daytime to stop the campaign \n \n\n\n \n  \n Note: The start and stop can be reversed. For example if the start_wday is Saturday and stop_wday is Tuesday then the campaign will take place on Saturday, Sunday, Monday and Tuesday. The same rule applies to start_time and stop_time.\n \n \n  \n Note: The time intervals are inclusive (see the previous example).\n \n \n  \n Note: If some interval contains NULL start or stop value then this interval matches any time value.\n \n\n        \n        \n       ",
    "seo_data": {
      "meta_title": "",
      "meta_description": "",
      "meta_keywords": ""
    },
    "tags": [],
    "attachments": [],
    "cloud_files": [],
    "thumbs_up": 0,
    "thumbs_down": 0,
    "hits": 413,
    "suggested": 0,
    "feedback_count": 0
  },
  {
    "id": 79068,
    "type": 1,
    "status": 2,
    "agent_id": 3763909,
    "created_at": "2013-04-25T09:31:55Z",
    "category_id": 82218,
    "folder_id": 134765,
    "title": "Configuration options common to all IVR applications",
    "updated_at": "2016-04-19T07:50:00Z",
    "description": "<h3><span style=\"font-size: 18px;\">Common configuration options</span></h3>\r\n<p><br></p>\r\n<table><tbody>\r\n<tr>\r\n<td><strong>Option</strong></td>\r\n<td><strong>Meaning</strong></td>\r\n<td>\r\n<strong>Default</strong>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td> <br>\r\n</td>\r\n<td> <br>\r\n</td>\r\n<td> \r\n<br>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td><strong>Login Name Length</strong></td>\r\n<td class=\"current\">Maximum number of digits in the account name [deprecated value, relates to custom voicemail scenario in old versions]<br>\n</td>\r\n<td>19\r\n</td>\r\n</tr>\r\n<tr>\r\n<td><strong>PIN Length</strong></td>\r\n<td>Maximum number of digits in the PIN code</td>\r\n<td>10\r\n</td>\r\n</tr>\r\n<tr>\r\n<td><strong>Number_Of_Login_Attempts</strong></td>\r\n<td>Maximum number of attempts to enter the username or PIN code</td>\r\n<td>3\r\n</td>\r\n</tr>\r\n<tr>\r\n<td><strong>Prompt Timeout</strong></td>\r\n<td>Time to wait for keypress after the prompt has finished playing</td>\r\n<td>10000 milliseconds\r\n</td>\r\n</tr>\r\n<tr>\r\n<td><strong>Default IVR Language</strong></td>\r\n<td>This locale is used if all attempts to determine the locale have failed</td>\r\n<td> en \r\n</td>\r\n</tr>\r\n<tr>\r\n<td><strong>Initial Pause (PDD)</strong></td>\r\n<td>Time to insert pause (delay) at the very beginning of IVR session</td>\r\n<td>500 milliseconds\r\n</td>\r\n</tr>\r\n<tr>\r\n<td><strong>Alternative Prompts</strong></td>\r\n<td>Path to \r\nan alternative prompt set to be used instead of main set. This is \r\nusually partial prompt set that is used to change only few prompts of \r\nthe main set.</td>\r\n<td>\r\n<br>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td><strong>Early Media Mode</strong></td>\r\n<td>Start the application in the Early Media mode (SIP response <i>183 Session Progress</i>).</td>\r\n<td>False\r\n</td>\r\n</tr>\r\n<tr>\r\n<td><strong>Disable PIN</strong></td>\r\n<td>Disable PIN authentication in most applications.</td>\r\n<td>False\r\n</td>\r\n</tr>\r\n</tbody></table>\r\n<h2><br></h2>\r\n<h3><span style=\"font-size: 18px;\">Common CLD options</span></h3>\r\n<p><br></p>\r\n<table><tbody>\r\n<tr>\r\n<td>\r\n<strong>delay&lt;milliseconds&gt;</strong> or <strong>delaymsec&lt;milliseconds&gt;</strong>\r\n</td>\r\n<td>Time to insert pause (delay) at the very beginning of IVR session\r\n</td>\r\n</tr>\r\n<tr>\r\n<td><strong>earlymedia</strong></td>\r\n<td>Start the application in the Early Media mode (SIP response <i>183 Session Progress</i>).\r\n</td>\r\n</tr>\r\n<tr>\r\n<td><strong>nopin</strong></td>\r\n<td>Disable PIN authentication in most applications.\r\n</td>\r\n</tr>\r\n<tr>\r\n<td>\r\n<strong>instance&lt;num&gt;</strong> </td>\r\n<td> Use specified instance number while taking the configuration values from the <strong>ivr_config</strong> table. All configuration options in the database have instance number <i>i_ivr_instance</i>. If this number is 1 then the specified value overrides the default value for all instances. If the <i>i_ivr_instance</i> is not 1 then it will take effect only when IVR application is invoked with CLD option <strong>instance&lt;num&gt;</strong> \r\n</td>\r\n</tr>\r\n</tbody></table>\r\n<hr>\r\n<h3><span style=\"font-size: 18px;\">Database connection options</span></h3>\r\n<p><br></p>\r\n<p>\r\nCurrent implementation uses the database based storage of configuration \r\noptions. In order to connect to the configuration database administrator\r\n of ivrd should specify the database connection parameters via the \r\ncommand line: <br></p>\r\n<p><br></p>\r\n\r\n<table id=\"table11355\"><tbody><tr><td class=\"current\"><pre>    --dbhost=&lt;HOST&gt;     Address of database server\r\n    --dbport=&lt;PORT&gt;     Port on which the database server accepts connections\r\n    --database=&lt;NAME&gt;   The name of the database\r\n    --dbuser=&lt;NAME&gt;     The username to use to access the database\r\n    --dbpassword=&lt;STRING&gt;\r\n    --dbtype=&lt;postgresql|mysql&gt; The database driver to use (default: postgresql)</pre></td></tr></tbody></table>\r\n<p><br></p>\r\n<p>\r\nBut connection to the SSP database is considered different from \r\nconfiguration database. The following configuration parameters describe \r\nthe database connection to the SSP database: <br></p>\r\n<p><br></p>\r\n<table><tbody>\r\n<tr>\r\n<td><strong>Section</strong></td>\r\n<td><strong>Option</strong></td>\r\n<td><strong>Meaning</strong></td>\r\n<td>\r\n<strong>Default</strong>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td> <br>\r\n</td>\r\n<td> <br>\r\n</td>\r\n<td> <br>\r\n</td>\r\n<td> \r\n<br>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td><strong>Database</strong></td>\r\n<td><strong>Host</strong></td>\r\n<td>Database host</td>\r\n<td> \r\n<br>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td><strong>Database</strong></td>\r\n<td><strong>Port</strong></td>\r\n<td>TCP port that database server is listening</td>\r\n<td> \r\n<br>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td><strong>Database</strong></td>\r\n<td><strong>DbName</strong></td>\r\n<td>Database name</td>\r\n<td> sippy \r\n</td>\r\n</tr>\r\n<tr>\r\n<td><strong>Database</strong></td>\r\n<td><strong>UserName</strong></td>\r\n<td>Username to connect with</td>\r\n<td> sippy \r\n</td>\r\n</tr>\r\n<tr>\r\n<td><strong>Database</strong></td>\r\n<td><strong>Password</strong></td>\r\n<td>Password to use</td>\r\n<td> \r\n<br>\r\n</td>\r\n</tr>\r\n</tbody></table>\r\n<hr>\r\n<h3><span style=\"font-size: 18px;\">Other options</span></h3>\r\n<p><br></p>\r\n<p>\r\n<i>Do not change these defaults without absolute necessity! <br></i></p>\r\n<p><i><br></i>\r\n</p>\r\n\r\n<table><tbody>\r\n<tr>\r\n<td><strong>Section</strong></td>\r\n<td><strong>Option</strong></td>\r\n<td><strong>Meaning</strong></td>\r\n<td>\r\n<strong>Default</strong>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td> <br>\r\n</td>\r\n<td> <br>\r\n</td>\r\n<td> <br>\r\n</td>\r\n<td> \r\n<br>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td><strong>General</strong></td>\r\n<td><strong>TmpDir</strong></td>\r\n<td>Temporary directory location (used for temporary storage of voice messages, etc.)</td>\r\n<td> None (means OS specific default) \r\n</td>\r\n</tr>\r\n<tr>\r\n<td><strong>General</strong></td>\r\n<td><strong>DefaultFormat</strong></td>\r\n<td>This format will be used for message recording if session uses codec different from G.729</td>\r\n<td>sln\r\n</td>\r\n</tr>\r\n<tr>\r\n<td><strong>General</strong></td>\r\n<td><strong>PromptsDir</strong></td>\r\n<td>Location of prompts</td>\r\n<td>/home/ssp/prompts/ivrd\r\n</td>\r\n</tr>\r\n<tr>\r\n<td><strong>General</strong></td>\r\n<td><strong>G729QueueFile</strong></td>\r\n<td>Spool file location for G.729 converter, the subsystem of ivrd <i>(obsoleted in 1.5)</i>\r\n</td>\r\n<td>/var/spool/voicemail/vm_queue.txt\r\n</td>\r\n</tr>\r\n<tr>\r\n<td><strong>General</strong></td>\r\n<td><strong>PluginDir</strong></td>\r\n<td class=\"\">Location of IVR Applications</td>\r\n<td>/home/ssp/ivrd/plugins\r\n</td>\r\n</tr>\r\n<tr>\r\n<td><strong>General</strong></td>\r\n<td><strong>PluginEtcDir</strong></td>\r\n<td class=\"\">Location of configuration files for the IVR Applications. (Currently only <b class=\"current\">the App1027</b> uses configuration file).</td>\r\n<td>/home/ssp/etc\r\n</td>\r\n</tr>\r\n<tr>\r\n<td><strong>General</strong></td>\r\n<td><strong>UnknownCurrencyPrecision</strong></td>\r\n<td class=\"current\">How many digits to say after the decimal point. This applies to unknown currencies only</td>\r\n<td>2\r\n</td>\r\n</tr>\r\n</tbody></table>\r\n",
    "description_text": " Common configuration options \n   \n\n\n Option \n Meaning \n \nDefault\n \n\n\n   \n \n   \n \n  \n \n \n\n\n Login Name Length \n Maximum number of digits in the account name [deprecated value, relates to custom voicemail scenario in old versions] \n \n 19\n \n\n\n PIN Length \n Maximum number of digits in the PIN code \n 10\n \n\n\n Number_Of_Login_Attempts \n Maximum number of attempts to enter the username or PIN code \n 3\n \n\n\n Prompt Timeout \n Time to wait for keypress after the prompt has finished playing \n 10000 milliseconds\n \n\n\n Default IVR Language \n This locale is used if all attempts to determine the locale have failed \n  en \n \n\n\n Initial Pause (PDD) \n Time to insert pause (delay) at the very beginning of IVR session \n 500 milliseconds\n \n\n\n Alternative Prompts \n Path to \nan alternative prompt set to be used instead of main set. This is \nusually partial prompt set that is used to change only few prompts of \nthe main set. \n \n \n \n\n\n Early Media Mode \n Start the application in the Early Media mode (SIP response 183 Session Progress). \n False\n \n\n\n Disable PIN \n Disable PIN authentication in most applications. \n False\n \n\n\n   \n Common CLD options \n   \n\n\n \ndelay<milliseconds> or delaymsec<milliseconds>\n \n Time to insert pause (delay) at the very beginning of IVR session\n \n\n\n earlymedia \n Start the application in the Early Media mode (SIP response 183 Session Progress).\n \n\n\n nopin \n Disable PIN authentication in most applications.\n \n\n\n \ninstance<num>  \n  Use specified instance number while taking the configuration values from the ivr_config table. All configuration options in the database have instance number i_ivr_instance. If this number is 1 then the specified value overrides the default value for all instances. If the i_ivr_instance is not 1 then it will take effect only when IVR application is invoked with CLD option instance<num> \n \n\n\n \n Database connection options \n   \n \nCurrent implementation uses the database based storage of configuration \noptions. In order to connect to the configuration database administrator\n of ivrd should specify the database connection parameters via the \ncommand line:   \n   \n\n      --dbhost=<HOST>     Address of database server\n    --dbport=<PORT>     Port on which the database server accepts connections\n    --database=<NAME>   The name of the database\n    --dbuser=<NAME>     The username to use to access the database\n    --dbpassword=<STRING>\n    --dbtype=<postgresql|mysql> The database driver to use (default: postgresql)  \n   \n \nBut connection to the SSP database is considered different from \nconfiguration database. The following configuration parameters describe \nthe database connection to the SSP database:   \n   \n\n\n Section \n Option \n Meaning \n \nDefault\n \n\n\n   \n \n   \n \n   \n \n  \n \n \n\n\n Database \n Host \n Database host \n  \n \n \n\n\n Database \n Port \n TCP port that database server is listening \n  \n \n \n\n\n Database \n DbName \n Database name \n  sippy \n \n\n\n Database \n UserName \n Username to connect with \n  sippy \n \n\n\n Database \n Password \n Password to use \n  \n \n \n\n\n \n Other options \n   \n \nDo not change these defaults without absolute necessity!   \n  \n \n\n\n\n Section \n Option \n Meaning \n \nDefault\n \n\n\n   \n \n   \n \n   \n \n  \n \n \n\n\n General \n TmpDir \n Temporary directory location (used for temporary storage of voice messages, etc.) \n  None (means OS specific default) \n \n\n\n General \n DefaultFormat \n This format will be used for message recording if session uses codec different from G.729 \n sln\n \n\n\n General \n PromptsDir \n Location of prompts \n /home/ssp/prompts/ivrd\n \n\n\n General \n G729QueueFile \n Spool file location for G.729 converter, the subsystem of ivrd (obsoleted in 1.5)\n \n /var/spool/voicemail/vm_queue.txt\n \n\n\n General \n PluginDir \n Location of IVR Applications \n /home/ssp/ivrd/plugins\n \n\n\n General \n PluginEtcDir \n Location of configuration files for the IVR Applications. (Currently only the App1027 uses configuration file). \n /home/ssp/etc\n \n\n\n General \n UnknownCurrencyPrecision \n How many digits to say after the decimal point. This applies to unknown currencies only \n 2\n \n\n\n",
    "seo_data": {
      "meta_title": "",
      "meta_description": "",
      "meta_keywords": ""
    },
    "tags": [],
    "attachments": [],
    "cloud_files": [],
    "thumbs_up": 1,
    "thumbs_down": 0,
    "hits": 728,
    "suggested": 0,
    "feedback_count": 0
  },
  {
    "id": 79070,
    "type": 1,
    "status": 2,
    "agent_id": 3763909,
    "created_at": "2013-04-25T09:42:20Z",
    "category_id": 82218,
    "folder_id": 134765,
    "title": "TTS Translation guide for developer",
    "updated_at": "2021-06-25T08:57:15Z",
    "description": "<div>Translation of phrases in the IVR applications is almost the same as for the usual applications using gettext. But gettext is not simple package and there are so many utilities in it that it's worth to create this small manual.<h3><br></h3><h3><span style=\"font-size: 18px;\">Helper scripts</span></h3><p><br></p><p>To simplify the translation process the <em>po</em> directory is present in the <em>ivrd</em> folder which contains several helper scripts.</p><ul><li><strong>ivrd/po/xgetpo.sh</strong> - the script gathers all the phrases from all the python source files in the <em>ivrd</em> directory and its subfolders and merges all new changes into the <em>ivrd/po/ivrd.pot</em> file.</li><li><strong>ivrd/po/mergepo.sh</strong> - this script merges changes from the <em>ivrd/po/ivrd.pot</em> file into <em>ivrd/po/${LANG}.po</em> file. The script requires a parameter - two-letter language code.</li><li><strong>ivrd/compilepo.sh</strong> - the script compiles translated <em>ivrd/po/${LANG}.po</em> file into <em>ssp/locale/${LANG}/LC_MESSAGES/ivrd.mo</em> file. The script requires a parameter - two-letter language code.</li><li><strong>ivrd/prompt_utils.py</strong> - the script can make several useful tests and can gather some statistics on prompt sets</li></ul><h3><br></h3><h3><span style=\"font-size: 18px;\">Preparing for translation to a new language</span></h3><p><br></p><p>Imagine that the ivrd applications is to be translated into the Turkish language (language code is <strong>tr</strong>). This assumption will be used in the all the text below.</p><p><br></p><p>First of all the translation file is to be created. This can be achieved by running:</p><p><br></p><table id=\"table42529\"><tbody><tr><td class=\"current\"><pre>  $ cd ivrd/po\n  $ ./mergepo.sh tr</pre></td></tr></tbody></table><p><br></p><p>This will create <em>ivrd/po/tr.po</em> file. This file is plain text file so it can be edited by any text editor.</p><h3><br></h3><h3><span style=\"font-size: 18px;\">Translating the translation file</span></h3><p><br></p><p>Now when you have the <em>tr.po</em> the translation can be done. The file contains header like this:</p><br><table id=\"table20764\"><tbody><tr><td class=\"current\"><pre>msgid \"\"\nmsgstr \"\"\n\"Project-Id-Version: PACKAGE VERSION\\n\"\n\"Report-Msgid-Bugs-To: \\n\"\n\"POT-Creation-Date: 2007-08-23 12:44+0300\\n\"\n\"PO-Revision-Date: 2007-08-23 12:44+0300\\n\"\n\"Last-Translator: Automatically generated\\n\"\n\"Language-Team: none\\n\"\n\"MIME-Version: 1.0\\n\"\n\"Content-Type: text/plain; charset=ASCII\\n\"\n\"Content-Transfer-Encoding: 8bit\\n\"\n\"Plural-Forms: nplurals=1; plural=0;\\n\"</pre></td></tr></tbody></table><p><br></p><p>Note that you <em>must</em> change the <strong>Project-Id-Version</strong> value. Otherwise compiler will annoy you with warning.</p><p>The rest of the file is the phrases to translate. The phrases are of two forms - for simple phrases:</p><p><br></p><table id=\"table81100\"><tbody><tr><td class=\"current\"><pre>msgid \"Some English text\"\nmsgstr \"\"</pre></td></tr></tbody></table><pre></pre><p>and for plural forms:</p><p><br></p><table id=\"table6675\"><tbody><tr><td><pre>msgid \"There is one apple\"\nmsgid_plural \"There are %n apples\"\nmsgstr[0] \"\"</pre></td></tr></tbody></table><pre></pre>The <em>msgid*</em> are the phrases to translate and <em>msgstr*</em>are the translations (they are empty for the moment). Turkish has no plural form so you can see that the plural form for translation hasn't been offered.<p><br></p><p>This was a quick overview of the file content so you can start translation. All the empty strings in the <em>msgstr</em> are to be filled with the translated phrases. You are free to use any encoding but do not forget to specify correct encoding name in the <em>charset</em> subfield of the <strong>Content-Type</strong> field.</p><h3><br></h3><h3><span style=\"font-size: 18px;\">Notes for translators</span></h3><p><br></p><p>So here is the point when the phrases are to be passed to a human for translation. The notes for translators you can find <a href=\"https://support.sippysoft.com/a/solutions/articles/79095\">here</a></p><h3><br></h3><h3><span style=\"font-size: 18px;\">TTS language module</span></h3><p><br></p><p>To support the number into text, date into text, duration into text, etc conversions the language specific python module has to be created.</p><p>The module must be named by two-letter language code in uppercase. So for Turkish you have to create the <em>TR.py</em> file. This file is to be placed into <em>ivrd/TextSynth</em> directory. The existing language modules should be used to create new module. Here is a list of requirements to the module:</p><p>the _phrase_noop() function is to be defined and it has to convert your language specific phrases into UNICODE (unless the ASCII is sufficient). All the words and phrases must be encapsulated into _phrase_noop() calls. Also you cannot use any TTS features in this module to avoid infinite recursions.</p><p>When using non-ASCII encoding you must define it in the <strong>second</strong> line of the module:</p><pre></pre><table id=\"table13155\"><tbody><tr><td class=\"current\"><pre>#!/usr/local/bin/python\n# -*- coding: UTF-8 -*-</pre></td></tr></tbody></table><pre></pre><p>These methods are to be created:</p><ul><li>sayNumber()</li><li>sayDigits()</li><li>sayDuration()</li><li>sayDatetime() (this is used by the Voicemail app for now)</li></ul><p><br></p><p>The TextSynth/__init__.py file is to be modified to support your new module.</p><p>The information to be obtained to create the module is summarized <a href=\"https://support.sippysoft.com/a/solutions/articles/79090\">here</a>.</p><h3><br></h3><h3><span style=\"font-size: 18px;\">Prompt creation</span></h3><p><br></p><p>After the translations has been done and placed into the <em>po/tr.po</em> file the translation is to be compiled:</p><p><br></p><table id=\"table15600\"><tbody><tr><td><pre class=\"current\">$ cd ivrd/po\n$ ./compilepo.sh tr</pre></td></tr></tbody></table><pre></pre><p>Last thing to do is to create the prompt directory:</p><p><br></p><table id=\"table75396\"><tbody><tr><td><pre>$ mkdir ~ssp/prompts/ivrd/tr</pre></td></tr></tbody></table><pre></pre><p>Now the <em>prompt_utils.py</em> script can be used to generate the prompt list:</p><br><table id=\"table15056\"><tbody><tr><td class=\"current\"><pre>$ cd ivrd\n$ ./prompt_utils.py -l tr list unmapped</pre></td></tr></tbody></table><br>This will create <em>unmapped-tr.html</em>file containing all the phrase chunks in Turkish language and corresponding English phrases.<p><br></p><p>Here is the point where the narrator starts his work.</p><h3><br></h3><h3><span style=\"font-size: 18px;\">Registering prompts</span></h3><p><br></p><p>After prompts have been recorded they are to be placed into the <em>ssp/prompts/ivrd/tr</em> folder in signed linear 16 bit 8000 Hz mono format and in g729-encoded format.</p><p>Then the <em>ssp/prompts/ivrd/tr/prompt_map.txt</em> file is to be created. The first line of the file must contain the encoding used to present phrase chunks and then prompt mappings follow:</p><p><br></p><table id=\"table75559\"><tbody><tr><td class=\"current\"><pre># encoding: utf-8\nfile1|First phrase\nfile2|second phrase</pre></td></tr></tbody></table><p><br></p><p>After this you can run again the</p><p><br></p><table id=\"table21055\"><tbody><tr><td class=\"current\"><pre>./prompt_utils.py -l tr list unmapped</pre></td></tr></tbody></table><p><br></p>to make sure that all phrases are mapped to audio prompts.</div>",
    "description_text": " Translation of phrases in the IVR applications is almost the same as for the usual applications using gettext. But gettext is not simple package and there are so many utilities in it that it's worth to create this small manual.    Helper scripts     To simplify the translation process the po directory is present in the ivrd folder which contains several helper scripts.   ivrd/po/xgetpo.sh - the script gathers all the phrases from all the python source files in the ivrd directory and its subfolders and merges all new changes into the ivrd/po/ivrd.pot file.  ivrd/po/mergepo.sh - this script merges changes from the ivrd/po/ivrd.pot file into ivrd/po/${LANG}.po file. The script requires a parameter - two-letter language code.  ivrd/compilepo.sh - the script compiles translated ivrd/po/${LANG}.po file into ssp/locale/${LANG}/LC_MESSAGES/ivrd.mo file. The script requires a parameter - two-letter language code.  ivrd/prompt_utils.py - the script can make several useful tests and can gather some statistics on prompt sets      Preparing for translation to a new language     Imagine that the ivrd applications is to be translated into the Turkish language (language code is tr). This assumption will be used in the all the text below.     First of all the translation file is to be created. This can be achieved by running:        $ cd ivrd/po\n  $ ./mergepo.sh tr      This will create ivrd/po/tr.po file. This file is plain text file so it can be edited by any text editor.     Translating the translation file     Now when you have the tr.po the translation can be done. The file contains header like this:    msgid \"\"\nmsgstr \"\"\n\"Project-Id-Version: PACKAGE VERSION\\n\"\n\"Report-Msgid-Bugs-To: \\n\"\n\"POT-Creation-Date: 2007-08-23 12:44+0300\\n\"\n\"PO-Revision-Date: 2007-08-23 12:44+0300\\n\"\n\"Last-Translator: Automatically generated\\n\"\n\"Language-Team: none\\n\"\n\"MIME-Version: 1.0\\n\"\n\"Content-Type: text/plain; charset=ASCII\\n\"\n\"Content-Transfer-Encoding: 8bit\\n\"\n\"Plural-Forms: nplurals=1; plural=0;\\n\"      Note that you must change the Project-Id-Version value. Otherwise compiler will annoy you with warning.  The rest of the file is the phrases to translate. The phrases are of two forms - for simple phrases:      msgid \"Some English text\"\nmsgstr \"\"    and for plural forms:      msgid \"There is one apple\"\nmsgid_plural \"There are %n apples\"\nmsgstr[0] \"\"   The msgid* are the phrases to translate and msgstr*are the translations (they are empty for the moment). Turkish has no plural form so you can see that the plural form for translation hasn't been offered.    This was a quick overview of the file content so you can start translation. All the empty strings in the msgstr are to be filled with the translated phrases. You are free to use any encoding but do not forget to specify correct encoding name in the charset subfield of the Content-Type field.     Notes for translators     So here is the point when the phrases are to be passed to a human for translation. The notes for translators you can find here     TTS language module     To support the number into text, date into text, duration into text, etc conversions the language specific python module has to be created.  The module must be named by two-letter language code in uppercase. So for Turkish you have to create the TR.py file. This file is to be placed into ivrd/TextSynth directory. The existing language modules should be used to create new module. Here is a list of requirements to the module:  the _phrase_noop() function is to be defined and it has to convert your language specific phrases into UNICODE (unless the ASCII is sufficient). All the words and phrases must be encapsulated into _phrase_noop() calls. Also you cannot use any TTS features in this module to avoid infinite recursions.  When using non-ASCII encoding you must define it in the second line of the module:    #!/usr/local/bin/python\n# -*- coding: UTF-8 -*-    These methods are to be created:   sayNumber()  sayDigits()  sayDuration()  sayDatetime() (this is used by the Voicemail app for now)      The TextSynth/__init__.py file is to be modified to support your new module.  The information to be obtained to create the module is summarized here.     Prompt creation     After the translations has been done and placed into the po/tr.po file the translation is to be compiled:      $ cd ivrd/po\n$ ./compilepo.sh tr    Last thing to do is to create the prompt directory:      $ mkdir ~ssp/prompts/ivrd/tr    Now the prompt_utils.py script can be used to generate the prompt list:    $ cd ivrd\n$ ./prompt_utils.py -l tr list unmapped   This will create unmapped-tr.htmlfile containing all the phrase chunks in Turkish language and corresponding English phrases.    Here is the point where the narrator starts his work.     Registering prompts     After prompts have been recorded they are to be placed into the ssp/prompts/ivrd/tr folder in signed linear 16 bit 8000 Hz mono format and in g729-encoded format.  Then the ssp/prompts/ivrd/tr/prompt_map.txt file is to be created. The first line of the file must contain the encoding used to present phrase chunks and then prompt mappings follow:      # encoding: utf-8\nfile1|First phrase\nfile2|second phrase      After this you can run again the      ./prompt_utils.py -l tr list unmapped     to make sure that all phrases are mapped to audio prompts. ",
    "seo_data": {
      "meta_title": "",
      "meta_description": "",
      "meta_keywords": ""
    },
    "tags": [],
    "attachments": [],
    "cloud_files": [],
    "thumbs_up": 0,
    "thumbs_down": 0,
    "hits": 199,
    "suggested": 0,
    "feedback_count": 0
  },
  {
    "id": 79090,
    "type": 1,
    "status": 2,
    "agent_id": 3763909,
    "created_at": "2013-04-25T11:54:42Z",
    "category_id": 82218,
    "folder_id": 134765,
    "title": "Information required to create TTS language module",
    "updated_at": "2014-06-30T12:24:55Z",
    "description": "<div>These rules have to be clarified in order to create the TTS language module:\r\n\r\n<ul>\n<li>Rules for number pronunciation.\r\n</li>\r\n<li>Rules to pronounce ordinal forms of numbers.\r\n</li>\r\n<li>Rules to pronounce a sequence of a digits.\r\n</li>\r\n<li>Rules to pronounce a time interval.\r\n</li>\r\n<li>Rules for datetime pronunciation.\r\n</li>\r\n</ul>\n<h3><br></h3>\r\n<h3><span style=\"font-size: 18px;\">Rules for number pronunciation</span></h3>\r\n<p><br></p>\r\n<p>\r\nThis is most difficult part of text synthesizer. Number creation rules \r\ncan be very different in different languages. It's purpose is to convert\r\n number into sequence of prompts that represents this number audibly. \r\nFor example the number 12345 in English is converted into phrase \"twelve thousand, three hundred forty five\".\r\n</p>\r\n<p><br></p>\r\n<p>It's impossible to present universal set of required prompts that will \r\nbe valid for all languages. Some languages can have cases and other \r\nmodifications of the numbers. So as an example here is the set of \r\nrequired prompts for English language but don't forget that it can be \r\ncompletely different for target language.<br></p>\r\n<p><br></p>\r\n<table id=\"table87162\"><tbody><tr><td class=\"current\"><pre>one\r\ntwo\r\nthree\r\nfour\r\nfive\r\nsix\r\nseven\r\neight\r\nnine\r\nten\r\neleven\r\ntwelve\r\nthirteen\r\nfourteen\r\nfifteen\r\nsixteen\r\nseventeen\r\neighteen\r\nnineteen\r\ntwenty\r\nthirty\r\nforty\r\nfifty\r\nsixty\r\nseventy\r\neighty\r\nninety\r\n\r\nhundred\r\nthousand\r\nmillion\r\nminus\r\nmore than one billion\r\nless then minus one billion</pre></td></tr></tbody></table>\n<p><br></p>\r\n<h3><span style=\"font-size: 18px;\">Rules to pronounce ordinal form of numbers</span></h3>\r\n<p><br></p>\r\n<p>\r\nThis feature enables the TTS subsystem to pronounce ordinals such as \r\n\"first\", \"twenty seventh\", etc. Some languages can have cases and other \r\nmodifications of the ordinals.\r\n</p>\r\n<p><br></p>\r\n<p>The following additional words in English are required for this feature to work:\r\n</p>\r\n<br><table id=\"table52360\"><tbody><tr><td class=\"current\">\r\n<pre>first\r\nsecond\r\nthird\r\nfourth\r\n</pre>\r\n<p>\r\nand so on.\r\n</p>\r\n</td></tr></tbody></table>\n<p><br></p>\r\n<h3><span style=\"font-size: 18px;\">Rules to pronounce a sequence of a digits</span></h3>\r\n<p><br></p>\r\n<p>\r\nThis is usually one of the most simple rules but English for example \r\nuses a trick here - the sequence of digits in English is pronounced with\r\n the word 'oh' instead of 'zero' and 'double oh' in place of two zeros \r\nin a row, so the sequence \"1 0 2\" will sound as \"one oh two\". So it is \r\nnecessary to apply such language dependent rules.\r\n</p>\r\n<h3><br></h3>\r\n<h3><span style=\"font-size: 18px;\">Rules to pronounce a time interval</span></h3>\r\n<p><br></p>\r\n<p>In English the intervals are pronounced for example as \"one hour twenty \r\nfour minutes and thirty seconds\". This feature requires the following \r\nwords when using English: <br></p>\r\n<p><br></p>\r\n<table id=\"table60319\"><tbody><tr><td><pre>hour\r\nhours\r\nminute\r\nminutes\r\nsecond\r\nseconds</pre></td></tr></tbody></table>\n<p><br></p>Please note that there is no need to make translation for plural forms \r\nif the target language has no plural forms. But at the same all the \r\nforms are to be specified for the languages that have one and more \r\nplural forms.\r\n\r\n<h3><br></h3>\r\n<h3><span style=\"font-size: 18px;\">Rules for datetime pronunciation</span></h3>\r\n<p><br></p>\r\n<p>In English date and time are pronounced like this: \"October twenty first\r\n nineteen eighty seven two fifty five PM\". This feature usually requires\r\n at least words representing the months:\r\n</p>\r\n<br><table id=\"table67967\"><tbody><tr><td class=\"\">\r\n<pre class=\"current\">January\r\nFebruary\r\nMarch\r\nApril\r\nMay\r\nJune\r\nJuly\r\nAugust\r\nSeptember\r\nOctober\r\nNovember\r\nDecember\r\n</pre>\r\n</td></tr></tbody></table>\n</div>\r\n<br><p>\r\nIt may require also the days of week and words:\r\n</p>\r\n<br><table id=\"table82378\"><tbody><tr><td class=\"current\"><pre>today\r\nyesterday\r\ntomorrow</pre></td></tr></tbody></table>\n<p><br></p>\r\n<pre></pre>\r\n<br>",
    "description_text": " These rules have to be clarified in order to create the TTS language module:\n\n \n Rules for number pronunciation.\n \n Rules to pronounce ordinal forms of numbers.\n \n Rules to pronounce a sequence of a digits.\n \n Rules to pronounce a time interval.\n \n Rules for datetime pronunciation.\n \n \n   \n Rules for number pronunciation \n   \n \nThis is most difficult part of text synthesizer. Number creation rules \ncan be very different in different languages. It's purpose is to convert\n number into sequence of prompts that represents this number audibly. \nFor example the number 12345 in English is converted into phrase \"twelve thousand, three hundred forty five\".\n \n   \n It's impossible to present universal set of required prompts that will \nbe valid for all languages. Some languages can have cases and other \nmodifications of the numbers. So as an example here is the set of \nrequired prompts for English language but don't forget that it can be \ncompletely different for target language.  \n   \n  one\ntwo\nthree\nfour\nfive\nsix\nseven\neight\nnine\nten\neleven\ntwelve\nthirteen\nfourteen\nfifteen\nsixteen\nseventeen\neighteen\nnineteen\ntwenty\nthirty\nforty\nfifty\nsixty\nseventy\neighty\nninety\n\nhundred\nthousand\nmillion\nminus\nmore than one billion\nless then minus one billion  \n   \n Rules to pronounce ordinal form of numbers \n   \n \nThis feature enables the TTS subsystem to pronounce ordinals such as \n\"first\", \"twenty seventh\", etc. Some languages can have cases and other \nmodifications of the ordinals.\n \n   \n The following additional words in English are required for this feature to work:\n \n  \n first\nsecond\nthird\nfourth\n \n \nand so on.\n \n \n   \n Rules to pronounce a sequence of a digits \n   \n \nThis is usually one of the most simple rules but English for example \nuses a trick here - the sequence of digits in English is pronounced with\n the word 'oh' instead of 'zero' and 'double oh' in place of two zeros \nin a row, so the sequence \"1 0 2\" will sound as \"one oh two\". So it is \nnecessary to apply such language dependent rules.\n \n   \n Rules to pronounce a time interval \n   \n In English the intervals are pronounced for example as \"one hour twenty \nfour minutes and thirty seconds\". This feature requires the following \nwords when using English:   \n   \n  hour\nhours\nminute\nminutes\nsecond\nseconds  \n   Please note that there is no need to make translation for plural forms \nif the target language has no plural forms. But at the same all the \nforms are to be specified for the languages that have one and more \nplural forms.\n\n   \n Rules for datetime pronunciation \n   \n In English date and time are pronounced like this: \"October twenty first\n nineteen eighty seven two fifty five PM\". This feature usually requires\n at least words representing the months:\n \n  \n January\nFebruary\nMarch\nApril\nMay\nJune\nJuly\nAugust\nSeptember\nOctober\nNovember\nDecember\n \n \n \n  \nIt may require also the days of week and words:\n \n   today\nyesterday\ntomorrow  \n   \n \n ",
    "seo_data": {
      "meta_title": "",
      "meta_description": "",
      "meta_keywords": ""
    },
    "tags": [
      "language",
      "i18n",
      "localization"
    ],
    "attachments": [],
    "cloud_files": [],
    "thumbs_up": 0,
    "thumbs_down": 0,
    "hits": 105,
    "suggested": 0,
    "feedback_count": 0
  },
  {
    "id": 79095,
    "type": 1,
    "status": 2,
    "agent_id": 3763909,
    "created_at": "2013-04-25T12:00:30Z",
    "category_id": 82218,
    "folder_id": 134765,
    "title": "TTS Translation Guide for translator",
    "updated_at": "2014-03-20T09:57:22Z",
    "description": "<p>The special file called <i>gettext PO file</i> is offered to a translator. It can be edited using special program. We recommend the <a href=\"http://www.poedit.net/download.php\" target=\"\">poedit</a> program for PO file editing. <br></p>\r\n<p><br></p>\r\n<div>\r\n<h3><span style=\"font-size: 18px;\">Substitutions in translations</span></h3>\r\n<p><br></p>\r\n<p>\r\nThe phrases in an IVR application often contain the substitutions called also %-tags. Currently supported substitutions are:\r\n</p>\r\n<ul>\n<li>%n - numbers and digits\r\n</li>\r\n<li>%d - durations\r\n</li>\r\n<li>%D - datetime\r\n</li>\r\n<li>%s - simple string substitution\r\n</li>\r\n</ul>\n<p><br></p>\r\n<p>The <strong>%n</strong> substitution has two frequently used forms:\r\n</p>\r\n<ul>\n<li>%[H]n - ordinal form (i.e. \"first\", \"twenty third\")\r\n</li>\r\n<li>%[D]n - string of digits (i.e. number \"1234\" will be pronounced as \"one two three four\")\r\n</li>\r\n</ul>\n<p><br></p>\r\n<p>Suppose we have the phrase <strong>\"For English press %n\"</strong>. The <strong>%n</strong>\r\n symbol tells that the IVR application will replace this %-tag with some\r\n number so the final phrase that the user will hear would be for example\r\n <strong>\"For English press four\"</strong>.\r\n</p>\r\n<p><br></p>\r\n<p>The full form of the substitutions is %(ident)[flags]n. Here are some examples of possible substitutions:\r\n</p>\r\n<ul>\n<li>%[H]n\r\n</li>\r\n<li>%(extension)[D]n\r\n</li>\r\n<li>%(duration)d\r\n</li>\r\n</ul>\n<p><br></p>\r\n<p>The English text in braces <i>must not be translated</i>, as it refers to internal names of variables. Therefore, for example the phrase:\r\n</p>\r\n<br><table id=\"table64198\"><tbody><tr><td class=\"current\">\"You have %(<strong>number</strong>)n new\"\r\n\r\n</td></tr></tbody></table>\n<br><p>\r\nin Russian will become:\r\n</p>\r\n<br><table id=\"table20898\"><tbody><tr><td class=\"current\">\"\u0423 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c %(<strong>number</strong>)n \u043d\u043e\u0432\u044b\u0445\"\r\n\r\n</td></tr></tbody></table>\n<br><h3><span style=\"font-size: 18px;\">Translation of phrases with substitutions</span></h3>\r\n<p><br></p>\r\n<p>The translated phrases are to preserve all the substitutions from the \r\noriginal English phrase but you are free to place them anywhere within \r\nthe phrase. For example suppose the <strong>\"For English press %n\"</strong> phrase has to be translated into Russian. In Russian it will sound <strong>\"\u041d\u0430\u0436\u043c\u0438\u0442\u0435 %n \u0447\u0442\u043e\u0431\u044b \u043c\u0435\u043d\u044e \u0431\u044b\u043b\u043e \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0435\"</strong>. As you can see the <strong>%n</strong> substitution moved from the end of the phrase into middle of it.\r\n</p>\r\n<h3>\r\n<br><span style=\"font-size: 18px;\"></span>\r\n</h3>\r\n<h3><span style=\"font-size: 18px;\">Special phrases</span></h3>\r\n<p><br></p>\r\n<p>The <a href=\"http://support.sippysoft.com/support/solutions/articles/78278-calling-card-ivr-application\" target=\"\">Calling Card IVR</a> application contains a special phrase: <strong>\"For English press %n\"</strong>.\r\n This phrase is used in language selection procedure so this phrase has \r\nto offer the language into which the phrase translated. For example when\r\n translated to Turkish it will be in Turkish and <strong>means</strong> \"For Turkish press %n\", for Russian it is <i>\"\u041d\u0430\u0436\u043c\u0438\u0442\u0435 %n \u0447\u0442\u043e\u0431\u044b \u043c\u0435\u043d\u044e \u0431\u044b\u043b\u043e \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0435\"</i> and means <i>\"For Russian press %n\"</i> and so on.\r\n</p>\r\n\r\n        \r\n        \r\n      </div>",
    "description_text": " The special file called gettext PO file is offered to a translator. It can be edited using special program. We recommend the poedit program for PO file editing.   \n   \n \n Substitutions in translations \n   \n \nThe phrases in an IVR application often contain the substitutions called also %-tags. Currently supported substitutions are:\n \n \n %n - numbers and digits\n \n %d - durations\n \n %D - datetime\n \n %s - simple string substitution\n \n \n   \n The %n substitution has two frequently used forms:\n \n \n %[H]n - ordinal form (i.e. \"first\", \"twenty third\")\n \n %[D]n - string of digits (i.e. number \"1234\" will be pronounced as \"one two three four\")\n \n \n   \n Suppose we have the phrase \"For English press %n\". The %n\n symbol tells that the IVR application will replace this %-tag with some\n number so the final phrase that the user will hear would be for example\n \"For English press four\".\n \n   \n The full form of the substitutions is %(ident)[flags]n. Here are some examples of possible substitutions:\n \n \n %[H]n\n \n %(extension)[D]n\n \n %(duration)d\n \n \n   \n The English text in braces must not be translated, as it refers to internal names of variables. Therefore, for example the phrase:\n \n  \"You have %(number)n new\"\n\n \n  \nin Russian will become:\n \n  \"\u0423 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c %(number)n \u043d\u043e\u0432\u044b\u0445\"\n\n \n  Translation of phrases with substitutions \n   \n The translated phrases are to preserve all the substitutions from the \noriginal English phrase but you are free to place them anywhere within \nthe phrase. For example suppose the \"For English press %n\" phrase has to be translated into Russian. In Russian it will sound \"\u041d\u0430\u0436\u043c\u0438\u0442\u0435 %n \u0447\u0442\u043e\u0431\u044b \u043c\u0435\u043d\u044e \u0431\u044b\u043b\u043e \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0435\". As you can see the %n substitution moved from the end of the phrase into middle of it.\n \n \n \n \n Special phrases \n   \n The Calling Card IVR application contains a special phrase: \"For English press %n\".\n This phrase is used in language selection procedure so this phrase has \nto offer the language into which the phrase translated. For example when\n translated to Turkish it will be in Turkish and means \"For Turkish press %n\", for Russian it is \"\u041d\u0430\u0436\u043c\u0438\u0442\u0435 %n \u0447\u0442\u043e\u0431\u044b \u043c\u0435\u043d\u044e \u0431\u044b\u043b\u043e \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0435\" and means \"For Russian press %n\" and so on.\n \n\n        \n        \n       ",
    "seo_data": {
      "meta_title": "",
      "meta_description": "",
      "meta_keywords": ""
    },
    "tags": [
      "language",
      "i18n",
      "localization"
    ],
    "attachments": [],
    "cloud_files": [],
    "thumbs_up": 1,
    "thumbs_down": 0,
    "hits": 273,
    "suggested": 0,
    "feedback_count": 0
  },
  {
    "id": 125824,
    "type": 1,
    "status": 1,
    "agent_id": 3012089524,
    "created_at": "2013-08-21T15:51:26Z",
    "category_id": 82218,
    "folder_id": 134765,
    "title": "IVR Supported Languages",
    "updated_at": "2020-04-10T07:36:18Z",
    "description": "<p>Placed to draft as duplicate of <a href=\"http://support.sippysoft.com/solution/articles/3000007379-support-languages-adding-languages\" target>http://support.sippysoft.com/solution/articles/3000007379-support-languages-adding-languages</a> on 09.09.15<br></p>\n<p><br></p>\n<p><br></p>\n<p><br></p>\n<p>IVR Supported Language list as of Version 4.0\u00a0</p>\n<div>\n<span style=\"line-height: normal;\"><br></span><table id=\"table38514\"><tbody>\n<tr>\n<td class=\"current\">Language Code</td>\n<td>Language Name</td>\n\n</tr>\n<tr>\n<td class=\"\">ar</td>\n<td>Arabic<br>\n</td>\n</tr>\n<tr>\n<td class=\"\">de</td>\n<td>German</td>\n</tr>\n<tr>\n<td>es</td>\n<td>Spanish</td>\n</tr>\n<tr>\n<td>fr</td>\n<td>French</td>\n</tr>\n<tr>\n<td>hy</td>\n<td>Armenian<br>\n</td>\n</tr>\n<tr>\n<td>ja</td>\n<td>Japanese</td>\n</tr>\n<tr>\n<td>ru</td>\n<td>Russian</td>\n</tr>\n<tr>\n<td>th</td>\n<td>Thai<br>\n</td>\n</tr>\n<tr>\n<td>tr</td>\n<td>Turkish</td>\n</tr>\n<tr>\n<td>zh</td>\n<td>Chinese</td>\n</tr>\n</tbody></table>\n</div>\n",
    "description_text": " Placed to draft as duplicate of http://support.sippysoft.com/solution/articles/3000007379-support-languages-adding-languages on 09.09.15  \n   \n   \n   \n IVR Supported Language list as of Version 4.0\u00a0 \n \n \n\n Language Code \n Language Name \n\n\n\n ar \n Arabic \n \n\n\n de \n German \n\n\n es \n Spanish \n\n\n fr \n French \n\n\n hy \n Armenian \n \n\n\n ja \n Japanese \n\n\n ru \n Russian \n\n\n th \n Thai \n \n\n\n tr \n Turkish \n\n\n zh \n Chinese \n\n\n \n",
    "seo_data": {
      "meta_title": "",
      "meta_description": "",
      "meta_keywords": ""
    },
    "tags": [],
    "attachments": [],
    "cloud_files": [],
    "thumbs_up": 3,
    "thumbs_down": 0,
    "hits": 71,
    "suggested": 0,
    "feedback_count": 0
  },
  {
    "id": 3000028517,
    "type": 1,
    "status": 2,
    "agent_id": 3901167,
    "created_at": "2015-02-24T14:43:38Z",
    "category_id": 82218,
    "folder_id": 134765,
    "title": "ssptest IVR application",
    "updated_at": "2015-02-24T14:44:48Z",
    "description": "<h3><span style=\"font-size: 18px;\">Overview</span></h3>\r\n<br>This IVR application could be used for checking the cdrs recording, and to check the call termination without sending the call to the real vendor.<br>Two cdrs are expected:<br><ul>\r\n<li>cdr on the origination size</li>\r\n<li>cdr on the termination side</li>\r\n</ul>\r\n<p><br></p>\r\n<h3><span style=\"font-size: 18px;\">Call routing setup</span></h3>\r\n<p><br></p>\r\n<ol>\r\n<li>Add vendor connection. Set the Asterisk's host/port in the Destination field of Vendor Connection (ex: <b>192.168.0.100:5062</b>).</li>\r\n<li>Set the CLD Translation Rule for the connection to the value <b>s/^/ssptest/</b>\r\n</li>\r\n<li>Add this connection to the routing group</li>\r\n<li>Place the call through the account using this connection\u00a0</li>\r\n</ol>\r\n<p><br></p>\r\n<p>You'd be able to hear the IVR, that pronounces the CLD you've dialed and the CLI that has been used.</p>Only numeric parts of CLD and CLI would be pronounced.<br>Both vendor and customer cdrs would be available after the call is over.<br><br><i><b>Feature is available since 4.3 version of the Sippy.</b></i><br><p></p>\r\n",
    "description_text": " Overview \n This IVR application could be used for checking the cdrs recording, and to check the call termination without sending the call to the real vendor. Two cdrs are expected:  \n cdr on the origination size \n cdr on the termination side \n \n   \n Call routing setup \n   \n \n Add vendor connection. Set the Asterisk's host/port in the Destination field of Vendor Connection (ex: 192.168.0.100:5062). \n Set the CLD Translation Rule for the connection to the value s/^/ssptest/\n \n Add this connection to the routing group \n Place the call through the account using this connection\u00a0 \n \n   \n You'd be able to hear the IVR, that pronounces the CLD you've dialed and the CLI that has been used. Only numeric parts of CLD and CLI would be pronounced. Both vendor and customer cdrs would be available after the call is over.  Feature is available since 4.3 version of the Sippy.  \n",
    "seo_data": {
      "meta_title": "",
      "meta_description": "",
      "meta_keywords": ""
    },
    "tags": [],
    "attachments": [],
    "cloud_files": [],
    "thumbs_up": 0,
    "thumbs_down": 1,
    "hits": 232,
    "suggested": 0,
    "feedback_count": 0
  },
  {
    "id": 3000059426,
    "type": 1,
    "status": 2,
    "agent_id": 3901167,
    "created_at": "2016-10-20T09:59:24Z",
    "category_id": 82218,
    "folder_id": 134765,
    "title": "TopUp IVR application",
    "updated_at": "2016-10-20T09:59:24Z",
    "description": "<div dir=\"ltr\">\n<p>This IVR application is the cut version of <a href=\"http://support.sippysoft.com/solution/articles/78278-calling-card-ivr-application\" target=\"\">CallingCard IVR application</a></p>\n<p>Supported features:</p>\n<p>- announce balance</p>\n<p>- register CLI as the trusted number</p>\n<p>- top-up the balance of authenticated account using pre-configured <a href=\"http://support.sippysoft.com/solution/articles/3000059425-topup-vouchers-payment-processor\" target=\"\">vouchers</a></p>\n<p><br></p>\n<p>Vast majority of options from Calling Card IVR application are supported:</p>\n<p><br></p>\n<p></p>\n<p></p>\n<p></p>\n<p><img src=\"https://s3.amazonaws.com/cdn.freshdesk.com/data/helpdesk/attachments/production/3023271030/original/blob1476957312169.png?1476957314\" class=\"inline-image\" data-id=\"3023271030\" alt=\"blob1476957312169.png\" title=\"blob1476957312169.png\"></p>\n<br><p></p>\r\n</div>",
    "description_text": " \n This IVR application is the cut version of CallingCard IVR application \n Supported features: \n - announce balance \n - register CLI as the trusted number \n - top-up the balance of authenticated account using pre-configured vouchers \n   \n Vast majority of options from Calling Card IVR application are supported: \n   \n \n \n \n  \n  \n ",
    "seo_data": {
      "meta_title": "",
      "meta_description": "",
      "meta_keywords": ""
    },
    "tags": [],
    "attachments": [],
    "cloud_files": [],
    "thumbs_up": 0,
    "thumbs_down": 0,
    "hits": 314,
    "suggested": 0,
    "feedback_count": 0
  }
]