[
  {
    "id": 107442,
    "type": 1,
    "status": 2,
    "agent_id": 3901167,
    "created_at": "2013-07-09T17:51:54Z",
    "category_id": 107132,
    "folder_id": 176838,
    "title": "XML-RPC API - Debit and Credit Card Manipulation",
    "updated_at": "2020-04-10T07:35:49Z",
    "description": "<div id=\"altlinks\" style=\"clear: both; text-align: center; color: rgb(0, 0, 0); font-family: Verdana, Arial, 'Bitstream Vera Sans', Helvetica, sans-serif; font-style: normal; line-height: normal;\"><br></div><div class=\"wiki\" id=\"content\" style=\"padding-bottom: 2em; position: relative; color: rgb(0, 0, 0); font-family: Verdana, Arial, 'Bitstream Vera Sans', Helvetica, sans-serif; font-style: normal; line-height: normal;\"><div class=\"wikipage searchable\" style=\"padding-left: 18px;\">\n<h1 id=\"DebitCreditCardsmanipulations\" style=\"font-family: Arial, Verdana, 'Bitstream Vera Sans', Helvetica, sans-serif; font-weight: bold; letter-spacing: -0.018em; page-break-after: avoid; font-size: 19px; margin: 0.15em 1em 0.5em -18px;\">\n<a rel=\"noreferrer noopener\" style=\"color: rgb(153, 153, 136);\" title=\"no permission to view this wiki page\">Debit/Credit</a> Cards manipulations<a rel=\"noreferrer noopener\" href=\"https://trac.sippysoft.com/trac/wiki/public/XMLAPI/debitCreditCards#DebitCreditCardsmanipulations\" title=\"Link to this section\" style=\"color: rgb(215, 215, 215); border-style: none; font-size: 0.8em; vertical-align: text-top; visibility: hidden;\"></a>\n</h1>\n<h2 id=\"addDebitCreditCard\" style=\"font-family: Arial, Verdana, 'Bitstream Vera Sans', Helvetica, sans-serif; font-weight: bold; letter-spacing: -0.018em; page-break-after: avoid; font-size: 16px; margin-left: -18px;\">addDebitCreditCard()<a rel=\"noreferrer noopener\" href=\"https://trac.sippysoft.com/trac/wiki/public/XMLAPI/debitCreditCards#addDebitCreditCard\" title=\"Link to this section\" style=\"color: rgb(215, 215, 215); border-style: none; font-size: 0.8em; vertical-align: text-top; visibility: hidden;\"></a>\n</h2>\n<p>This application is used to add a <a rel=\"noreferrer noopener\" style=\"color: rgb(153, 153, 136);\" title=\"no permission to view this wiki page\">Debit/Credit</a> Card.</p>\n<p><strong>Note!\u00a0</strong>Either <strong>i_account</strong> or <strong>i_customer</strong> is to be supplied.</p>\n<p>Parameters:</p>\n<ul>\n<li>i_account - i_account of owner of the card. Integer. Required.</li>\n<li>i_customer - i_customer of owner of the card. Integer. Required.</li>\n<li>alias - Alias of the card. String. Required.</li>\n<li>i_card_type - Card Type. Integer. Required. Possible values are:<ul>\n<li>1 - Visa</li>\n<li>2 - American Express</li>\n<li>3 - MasterCard</li>\n<li>4 - Discover</li>\n<li>5 - JCB</li>\n<li>6 - Diner's Club</li>\n</ul>\n</li>\n<li>number - Card number. String. Required.</li>\n<li>holder - Card holder's name. String. Required.</li>\n<li>exp_mm - Month of expiration date (1 - January, 2 - February, etc). Integer. Required.</li>\n<li>exp_yy - Year of expiration date in 4-digits format (2010, 2011, etc). Integer. Required.</li>\n<li>cvv - CVV/CVC code. String. Optional.</li>\n<li>street_addr1 - Street address, line #1. String. Required.</li>\n<li>street_addr2 - Street address, line #2. String. Optional.</li>\n<li>state - <a rel=\"noreferrer noopener\" style=\"color: rgb(153, 153, 136);\" title=\"no permission to view this wiki page\">Province/State</a>. String. Required.</li>\n<li>postal_code - ZIP/Postal Code. String. Required.</li>\n<li>city - City. String. Required.</li>\n<li>country - <a rel=\"noreferrer noopener\" style=\"color: rgb(153, 153, 136);\" title=\"no permission to view this wiki page\">Country/Region</a> in <a rel=\"noreferrer noopener\" href=\"https://support.sippysoft.com/solution/articles/3000073101-xml-rpc-api-data-types-specifications\">iso-3166</a> format (2 letters). String. Required.</li>\n<li>phone - Phone number. String. Required.</li>\n<li>primary - Is the card primary one. Boolean. Optional.</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>\n<strong>result</strong> - <strong>OK</strong>. String.</li>\n<li>\n<strong>i_debit_credit_card</strong> - ID of the newly created card. Integer.</li>\n<li>XMLRPC fault in case of any error.</li>\n</ul>\n<hr style=\"border-right-style: none; border-bottom-style: none; border-left-style: none; border-top-color: rgb(204, 204, 187); margin-top: 2em; margin-bottom: 2em;\">\n<h2 id=\"updateDebitCreditCard\" style=\"font-family: Arial, Verdana, 'Bitstream Vera Sans', Helvetica, sans-serif; font-weight: bold; letter-spacing: -0.018em; page-break-after: avoid; font-size: 16px; margin-left: -18px;\">updateDebitCreditCard()<a rel=\"noreferrer noopener\" href=\"https://trac.sippysoft.com/trac/wiki/public/XMLAPI/debitCreditCards#updateDebitCreditCard\" title=\"Link to this section\" style=\"color: rgb(215, 215, 215); border-style: none; font-size: 0.8em; vertical-align: text-top; visibility: hidden;\"></a>\n</h2>\n<p>This application is used to update a <a rel=\"noreferrer noopener\" style=\"color: rgb(153, 153, 136);\" title=\"no permission to view this wiki page\">Debit/Credit</a> Card.</p>\n<p><strong>Note!\u00a0</strong>Either <strong>i_account</strong> or <strong>i_customer</strong> is to be supplied.</p>\n<p>Parameters:</p>\n<ul>\n<li>i_account - i_account of owner of the card. Integer. Required.</li>\n<li>i_customer - i_customer of owner of the card. Integer. Required.</li>\n<li>i_debit_credit_card - i_debit_credit_card of updated card. Integer. Required.</li>\n<li>any of parameter(s) from <a rel=\"noreferrer noopener\" href=\"https://trac.sippysoft.com/trac/wiki/public/XMLAPI/debitCreditCards#addDebitCreditCard\" style=\"color: rgb(187, 0, 0); border-bottom-width: 1px; border-bottom-style: dotted; border-bottom-color: rgb(187, 187, 187);\">addDebitCreditCard()</a> call.</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>\n<strong>result</strong> - <strong>OK</strong>. String.</li>\n<li>XMLRPC fault in case of any error.</li>\n</ul>\n<hr style=\"border-right-style: none; border-bottom-style: none; border-left-style: none; border-top-color: rgb(204, 204, 187); margin-top: 2em; margin-bottom: 2em;\">\n<h2 id=\"deleteDebitCreditCard\" style=\"font-family: Arial, Verdana, 'Bitstream Vera Sans', Helvetica, sans-serif; font-weight: bold; letter-spacing: -0.018em; page-break-after: avoid; font-size: 16px; margin-left: -18px;\">deleteDebitCreditCard()<a rel=\"noreferrer noopener\" href=\"https://trac.sippysoft.com/trac/wiki/public/XMLAPI/debitCreditCards#deleteDebitCreditCard\" title=\"Link to this section\" style=\"color: rgb(215, 215, 215); border-style: none; font-size: 0.8em; vertical-align: text-top; visibility: hidden;\"></a>\n</h2>\n<p>This application is used to delete a <a rel=\"noreferrer noopener\" style=\"color: rgb(153, 153, 136);\" title=\"no permission to view this wiki page\">Debit/Credit</a> Card.</p>\n<p><strong>Note!\u00a0</strong>Either <strong>i_account</strong> or <strong>i_customer</strong> is to be supplied.</p>\n<p>Parameters:</p>\n<ul>\n<li>i_account - i_account of owner of the card. Integer. Required.</li>\n<li>i_customer - i_customer of owner of the card. Integer. Required.</li>\n<li>i_debit_credit_card - i_debit_credit_card of updated card. Integer. Required.</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>\n<strong>result</strong> - <strong>OK</strong>. String.</li>\n<li>XMLRPC fault in case of any error.</li>\n</ul>\n<hr style=\"border-right-style: none; border-bottom-style: none; border-left-style: none; border-top-color: rgb(204, 204, 187); margin-top: 2em; margin-bottom: 2em;\">\n<h2 id=\"getDebitCreditCardInfo\" style=\"font-family: Arial, Verdana, 'Bitstream Vera Sans', Helvetica, sans-serif; font-weight: bold; letter-spacing: -0.018em; page-break-after: avoid; font-size: 16px; margin-left: -18px;\">getDebitCreditCardInfo()<a rel=\"noreferrer noopener\" href=\"https://trac.sippysoft.com/trac/wiki/public/XMLAPI/debitCreditCards#getDebitCreditCardInfo\" title=\"Link to this section\" style=\"color: rgb(215, 215, 215); border-style: none; font-size: 0.8em; vertical-align: text-top; visibility: hidden;\"></a>\n</h2>\n<p>This application is used to get <a rel=\"noreferrer noopener\" style=\"color: rgb(153, 153, 136);\" title=\"no permission to view this wiki page\">Debit/Credit</a> Card info.</p>\n<p><strong>Note!\u00a0</strong>Either <strong>i_account</strong> or <strong>i_customer</strong> is to be supplied.<br><strong>Note!\u00a0</strong>Card Number is returned as 4 last digits. CVV/CVC code is never returned.</p>\n<p>Parameters:</p>\n<ul>\n<li>i_account - i_account of owner of the card. Integer. Required.</li>\n<li>i_customer - i_customer of owner of the card. Integer. Required.</li>\n<li>i_debit_credit_card - i_debit_credit_card of updated card. Integer. Required.</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>\n<strong>result</strong> - <strong>OK</strong>. String.</li>\n<li>parameters from <a rel=\"noreferrer noopener\" href=\"https://trac.sippysoft.com/trac/wiki/public/XMLAPI/debitCreditCards#addDebitCreditCard\" style=\"color: rgb(187, 0, 0); border-bottom-width: 1px; border-bottom-style: dotted; border-bottom-color: rgb(187, 187, 187);\">addDebitCreditCard()</a> call.</li>\n<li>XMLRPC fault in case of any error.</li>\n</ul>\n<hr style=\"border-right-style: none; border-bottom-style: none; border-left-style: none; border-top-color: rgb(204, 204, 187); margin-top: 2em; margin-bottom: 2em;\">\n<h2 id=\"listDebitCreditCards\" style=\"font-family: Arial, Verdana, 'Bitstream Vera Sans', Helvetica, sans-serif; font-weight: bold; letter-spacing: -0.018em; page-break-after: avoid; font-size: 16px; margin-left: -18px;\">listDebitCreditCards()<a rel=\"noreferrer noopener\" href=\"https://trac.sippysoft.com/trac/wiki/public/XMLAPI/debitCreditCards#listDebitCreditCards\" title=\"Link to this section\" style=\"color: rgb(215, 215, 215); border-style: none; font-size: 0.8em; vertical-align: text-top; visibility: hidden;\"></a>\n</h2>\n<p>This application is used to delete a <a rel=\"noreferrer noopener\" style=\"color: rgb(153, 153, 136);\" title=\"no permission to view this wiki page\">Debit/Credit</a> Card.</p>\n<p><strong>Note!\u00a0</strong>Either <strong>i_account</strong> or <strong>i_customer</strong> is to be supplied.</p>\n<p>Parameters:</p>\n<ul>\n<li>i_account - i_account of owner of the card. Integer. Required.</li>\n<li>i_customer - i_customer of owner of the card. Integer. Required.</li>\n<li>offset - skip first <em>offset</em> entries. Integer. Optional.</li>\n<li>limit - fetch only <em>limit</em> entries. Integer. Optional.</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>\n<strong>result</strong> - <strong>OK</strong>. String.</li>\n<li>\n<strong>debit_credit_cards</strong> - array of structures (see <a rel=\"noreferrer noopener\" href=\"https://trac.sippysoft.com/trac/wiki/public/XMLAPI/debitCreditCards#addDebitCreditCard\" style=\"color: rgb(187, 0, 0); border-bottom-width: 1px; border-bottom-style: dotted; border-bottom-color: rgb(187, 187, 187);\">addDebitCreditCard()</a> call for more explanation):<ul>\n<li>i_debit_credit_card - Integer.</li>\n<li>primary - Boolean.</li>\n<li>alias - String.</li>\n<li>i_card_type - Integer.</li>\n<li>card_name - Human readable type of the card (Visa, MasterCard, etc). String.</li>\n<li>number - Last 4 digits of card number. String.</li>\n<li>exp_mm - Integer.</li>\n<li>exp_yy - Integer.</li>\n</ul>\n</li>\n<li>XMLRPC fault in case of any error.</li>\n</ul>\n<hr style=\"border-right-style: none; border-bottom-style: none; border-left-style: none; border-top-color: rgb(204, 204, 187); margin-top: 2em; margin-bottom: 2em;\">\n<br>\n</div></div>",
    "description_text": "     \n \nDebit/Credit Cards manipulations\n \n addDebitCreditCard()\n \n This application is used to add a Debit/Credit Card. \n Note!\u00a0Either i_account or i_customer is to be supplied. \n Parameters: \n \n i_account - i_account of owner of the card. Integer. Required. \n i_customer - i_customer of owner of the card. Integer. Required. \n alias - Alias of the card. String. Required. \n i_card_type - Card Type. Integer. Required. Possible values are: \n 1 - Visa \n 2 - American Express \n 3 - MasterCard \n 4 - Discover \n 5 - JCB \n 6 - Diner's Club \n \n \n number - Card number. String. Required. \n holder - Card holder's name. String. Required. \n exp_mm - Month of expiration date (1 - January, 2 - February, etc). Integer. Required. \n exp_yy - Year of expiration date in 4-digits format (2010, 2011, etc). Integer. Required. \n cvv - CVV/CVC code. String. Optional. \n street_addr1 - Street address, line #1. String. Required. \n street_addr2 - Street address, line #2. String. Optional. \n state - Province/State. String. Required. \n postal_code - ZIP/Postal Code. String. Required. \n city - City. String. Required. \n country - Country/Region in iso-3166 format (2 letters). String. Required. \n phone - Phone number. String. Required. \n primary - Is the card primary one. Boolean. Optional. \n \n Returns: \n \n \nresult - OK. String. \n \ni_debit_credit_card - ID of the newly created card. Integer. \n XMLRPC fault in case of any error. \n \n \n updateDebitCreditCard()\n \n This application is used to update a Debit/Credit Card. \n Note!\u00a0Either i_account or i_customer is to be supplied. \n Parameters: \n \n i_account - i_account of owner of the card. Integer. Required. \n i_customer - i_customer of owner of the card. Integer. Required. \n i_debit_credit_card - i_debit_credit_card of updated card. Integer. Required. \n any of parameter(s) from addDebitCreditCard() call. \n \n Returns: \n \n \nresult - OK. String. \n XMLRPC fault in case of any error. \n \n \n deleteDebitCreditCard()\n \n This application is used to delete a Debit/Credit Card. \n Note!\u00a0Either i_account or i_customer is to be supplied. \n Parameters: \n \n i_account - i_account of owner of the card. Integer. Required. \n i_customer - i_customer of owner of the card. Integer. Required. \n i_debit_credit_card - i_debit_credit_card of updated card. Integer. Required. \n \n Returns: \n \n \nresult - OK. String. \n XMLRPC fault in case of any error. \n \n \n getDebitCreditCardInfo()\n \n This application is used to get Debit/Credit Card info. \n Note!\u00a0Either i_account or i_customer is to be supplied. Note!\u00a0Card Number is returned as 4 last digits. CVV/CVC code is never returned. \n Parameters: \n \n i_account - i_account of owner of the card. Integer. Required. \n i_customer - i_customer of owner of the card. Integer. Required. \n i_debit_credit_card - i_debit_credit_card of updated card. Integer. Required. \n \n Returns: \n \n \nresult - OK. String. \n parameters from addDebitCreditCard() call. \n XMLRPC fault in case of any error. \n \n \n listDebitCreditCards()\n \n This application is used to delete a Debit/Credit Card. \n Note!\u00a0Either i_account or i_customer is to be supplied. \n Parameters: \n \n i_account - i_account of owner of the card. Integer. Required. \n i_customer - i_customer of owner of the card. Integer. Required. \n offset - skip first offset entries. Integer. Optional. \n limit - fetch only limit entries. Integer. Optional. \n \n Returns: \n \n \nresult - OK. String. \n \ndebit_credit_cards - array of structures (see addDebitCreditCard() call for more explanation): \n i_debit_credit_card - Integer. \n primary - Boolean. \n alias - String. \n i_card_type - Integer. \n card_name - Human readable type of the card (Visa, MasterCard, etc). String. \n number - Last 4 digits of card number. String. \n exp_mm - Integer. \n exp_yy - Integer. \n \n \n XMLRPC fault in case of any error. \n \n \n \n  ",
    "seo_data": {
      "meta_title": "",
      "meta_description": "",
      "meta_keywords": ""
    },
    "tags": [],
    "attachments": [],
    "cloud_files": [],
    "thumbs_up": 3,
    "thumbs_down": 2,
    "hits": 1424,
    "suggested": 0,
    "feedback_count": 0
  },
  {
    "id": 107446,
    "type": 1,
    "status": 2,
    "agent_id": 3901167,
    "created_at": "2013-07-09T17:53:58Z",
    "category_id": 107132,
    "folder_id": 176838,
    "title": "XML-RPC API - Get Payment Details",
    "updated_at": "2020-06-03T08:34:18Z",
    "description": "<div dir=\"ltr\"><div dir=\"ltr\"><div dir=\"ltr\"><div dir=\"ltr\"><div><h3></h3><p></p><h3 id=\"getPaymentsList\" style='font-family: Arial,Verdana,\"Bitstream Vera Sans\",Helvetica,sans-serif; font-weight: bold; font-size: 16px;  color: rgb(0, 0, 0); line-height: normal;'><span style=\"font-size: 24px;\">getPaymentInfo()</span></h3><p><br></p><p style='color: rgb(0, 0, 0); font-family: Verdana,Arial,\"Bitstream Vera Sans\",Helvetica,sans-serif; line-height: normal;'>This API call is used to get a payment details.</p><p style='color: rgb(0, 0, 0); font-family: Verdana,Arial,\"Bitstream Vera Sans\",Helvetica,sans-serif; line-height: normal;'><br></p><p style='color: rgb(0, 0, 0); font-family: Verdana,Arial,\"Bitstream Vera Sans\",Helvetica,sans-serif; line-height: normal;'>Trusted mode requires <strong>i_wholesaler</strong> parameter to be supplied to identify the caller.</p><p style='color: rgb(0, 0, 0); font-family: Verdana,Arial,\"Bitstream Vera Sans\",Helvetica,sans-serif; line-height: normal;'><br></p><p style='color: rgb(0, 0, 0); font-family: Verdana,Arial,\"Bitstream Vera Sans\",Helvetica,sans-serif; line-height: normal;'><strong>Note!\u00a0</strong>Either <strong>i_account</strong> or <strong>i_customer</strong> is to be supplied.</p><p style='color: rgb(0, 0, 0); font-family: Verdana,Arial,\"Bitstream Vera Sans\",Helvetica,sans-serif; line-height: normal;'><br></p><p style='color: rgb(0, 0, 0); font-family: Verdana,Arial,\"Bitstream Vera Sans\",Helvetica,sans-serif; line-height: normal;'>Parameters:</p><ul style='color: rgb(0, 0, 0); font-family: Verdana,Arial,\"Bitstream Vera Sans\",Helvetica,sans-serif; line-height: normal;'><li>i_account - <em>i_account</em> of account that made the payment. Integer. Required.</li><li>i_customer - <em>i_customer</em> of customer that made the payment. Integer. Required.</li><li>i_payment - <em>i_payment</em> reference returned by <a href=\"https://support.sippysoft.com/en/support/solutions/articles/107443-xml-rpc-api-make-payments-with-a-debit-credit-card\" style=\"color: rgb(187, 0, 0); border-bottom-width: 1px; border-bottom-style: dotted; border-bottom-color: rgb(187, 187, 187);\">makePayment()</a>. Integer. Required.</li></ul><p style='color: rgb(0, 0, 0); font-family: Verdana,Arial,\"Bitstream Vera Sans\",Helvetica,sans-serif; line-height: normal;'>Returns:</p><ul style='color: rgb(0, 0, 0); font-family: Verdana,Arial,\"Bitstream Vera Sans\",Helvetica,sans-serif; line-height: normal;'><li><strong>result</strong> - <em>OK</em>. String.</li><li><strong>payment_time</strong> - time of the payment in '%H:%M:%S.000 GMT %a %b %d %Y' format (e.g. <strong>09:57:29.000 GMT Wed Nov 18 2009</strong>). String.</li><li><strong>amount</strong> - payment amount. Double.</li><li><strong>currency</strong> - payer base currency. Double.</li><li><strong>tx_id</strong> - transaction ID returned by payment processor. String.</li><li><strong>tx_error</strong> - error returned by payment processor. String.</li><li><strong>tx_result</strong>- transaction result. Integer. Possible values:<ul><li>1 - successful payment</li><li>2 - failed payment</li></ul></li><li><strong>by_credit_debit_card</strong> - the payment was made using credit/debit card via payment processor. Boolean.</li><li><strong>by_voucher</strong> - the payment was made using top-up voucher. Boolean.</li><li><strong>notes</strong> - payment notes. String.</li><li>XMLRPC fault in case of any error.</li></ul><hr style='border-top-color: rgb(204, 204, 187); margin-top: 2em; margin-bottom: 2em; color: rgb(0, 0, 0); font-family: Verdana,Arial,\"Bitstream Vera Sans\",Helvetica,sans-serif; line-height: normal;'><h3 id=\"getPaymentsList\" style='font-family: Arial,Verdana,\"Bitstream Vera Sans\",Helvetica,sans-serif; font-weight: bold; font-size: 16px;  color: rgb(0, 0, 0); line-height: normal;'><span style=\"font-size: 24px;\">getPaymentsList()</span></h3><p><br></p><p style='color: rgb(0, 0, 0); font-family: Verdana,Arial,\"Bitstream Vera Sans\",Helvetica,sans-serif; line-height: normal;'>This API call is used to get a list of payments.</p><p style='color: rgb(0, 0, 0); font-family: Verdana,Arial,\"Bitstream Vera Sans\",Helvetica,sans-serif; line-height: normal;'><br></p><p style='color: rgb(0, 0, 0); font-family: Verdana,Arial,\"Bitstream Vera Sans\",Helvetica,sans-serif; line-height: normal;'>Trusted mode requires <strong>i_wholesaler</strong> parameter to be supplied to identify the caller.</p><p style='color: rgb(0, 0, 0); font-family: Verdana,Arial,\"Bitstream Vera Sans\",Helvetica,sans-serif; line-height: normal;'><br></p><p style='color: rgb(0, 0, 0); font-family: Verdana,Arial,\"Bitstream Vera Sans\",Helvetica,sans-serif; line-height: normal;'>Parameters:</p><ul style='color: rgb(0, 0, 0); font-family: Verdana,Arial,\"Bitstream Vera Sans\",Helvetica,sans-serif; line-height: normal;'><li>i_account - <em>i_account</em> of account that made the payment. Integer. Optional.</li><li>i_customer - <em>i_customer</em> of customer that made the payment. Integer. Optional.</li><li>offset - skip first <em>offset</em> CDRs. Integer. Optional.</li><li>limit - return only <em>limit</em> CDRs. Integer. Optional.</li><li>start_date - fetch payments from <em>start_date</em>, format is '%H:%M:%S.000 GMT %a %b %d %Y' (e.g. <strong>09:57:29.000 GMT Wed Nov 18 2009</strong>). String. Optional.</li><li>end_date - fetch payments till <em>end_date</em>, format is '%H:%M:%S.000 GMT %a %b %d %Y' (e.g. <strong>09:57:29.000 GMT Wed Nov 18 2009</strong>). String. Optional.</li><li>type - type of payment. String. Optional. Possible values:<ul><li>credit - return only <em>credit</em> payments</li><li>debit - return only <em>debit</em> payments</li></ul></li></ul><p style='color: rgb(0, 0, 0); font-family: Verdana,Arial,\"Bitstream Vera Sans\",Helvetica,sans-serif; line-height: normal;'>Returns:</p><ul style='color: rgb(0, 0, 0); font-family: Verdana,Arial,\"Bitstream Vera Sans\",Helvetica,sans-serif; line-height: normal;'><li><strong>result</strong> - <em>OK</em>. String.</li><li><strong>payments</strong>- an array containing structures:<ul><li><strong>payment_time</strong> - time of the payment in '%H:%M:%S.000 GMT %a %b %d %Y' format (e.g. <strong>09:57:29.000 GMT Wed Nov 18 2009</strong>). String.</li><li><strong>amount</strong> - payment amount. Double.</li><li><strong>currency</strong> - payer base currency. Double.</li><li><strong>i_payment</strong> - internal transaction ID. Integer.</li><li><strong>tx_id</strong> - transaction ID returned by payment processor. String.</li><li><strong>tx_error</strong> - error returned by payment processor. String.</li><li><strong>tx_result</strong>- transaction result. Integer. Possible values:<ul><li>1 - successful payment</li><li>2 - failed payment</li></ul></li><li><strong>i_account</strong> - <em>i_account</em> of account that made the payment. Integer.</li><li><strong>i_customer</strong> - <em>i_customer</em> of customer that made the payment. Integer.</li><li><strong>by_credit_debit_card</strong> - the payment was made using credit/debit card via payment processor. Boolean.</li><li><strong>by_voucher</strong> - the payment was made using top-up voucher. Boolean.</li><li><strong>notes</strong> - payment notes. String.</li></ul></li><li>XMLRPC fault in case of any error.</li></ul></div></div></div></div></div>",
    "description_text": "        getPaymentInfo()     This API call is used to get a payment details.     Trusted mode requires i_wholesaler parameter to be supplied to identify the caller.     Note!\u00a0Either i_account or i_customer is to be supplied.     Parameters:   i_account - i_account of account that made the payment. Integer. Required.  i_customer - i_customer of customer that made the payment. Integer. Required.  i_payment - i_payment reference returned by makePayment(). Integer. Required.   Returns:   result - OK. String.  payment_time - time of the payment in '%H:%M:%S.000 GMT %a %b %d %Y' format (e.g. 09:57:29.000 GMT Wed Nov 18 2009). String.  amount - payment amount. Double.  currency - payer base currency. Double.  tx_id - transaction ID returned by payment processor. String.  tx_error - error returned by payment processor. String.  tx_result- transaction result. Integer. Possible values:  1 - successful payment  2 - failed payment    by_credit_debit_card - the payment was made using credit/debit card via payment processor. Boolean.  by_voucher - the payment was made using top-up voucher. Boolean.  notes - payment notes. String.  XMLRPC fault in case of any error.    getPaymentsList()     This API call is used to get a list of payments.     Trusted mode requires i_wholesaler parameter to be supplied to identify the caller.     Parameters:   i_account - i_account of account that made the payment. Integer. Optional.  i_customer - i_customer of customer that made the payment. Integer. Optional.  offset - skip first offset CDRs. Integer. Optional.  limit - return only limit CDRs. Integer. Optional.  start_date - fetch payments from start_date, format is '%H:%M:%S.000 GMT %a %b %d %Y' (e.g. 09:57:29.000 GMT Wed Nov 18 2009). String. Optional.  end_date - fetch payments till end_date, format is '%H:%M:%S.000 GMT %a %b %d %Y' (e.g. 09:57:29.000 GMT Wed Nov 18 2009). String. Optional.  type - type of payment. String. Optional. Possible values:  credit - return only credit payments  debit - return only debit payments     Returns:   result - OK. String.  payments- an array containing structures:  payment_time - time of the payment in '%H:%M:%S.000 GMT %a %b %d %Y' format (e.g. 09:57:29.000 GMT Wed Nov 18 2009). String.  amount - payment amount. Double.  currency - payer base currency. Double.  i_payment - internal transaction ID. Integer.  tx_id - transaction ID returned by payment processor. String.  tx_error - error returned by payment processor. String.  tx_result- transaction result. Integer. Possible values:  1 - successful payment  2 - failed payment    i_account - i_account of account that made the payment. Integer.  i_customer - i_customer of customer that made the payment. Integer.  by_credit_debit_card - the payment was made using credit/debit card via payment processor. Boolean.  by_voucher - the payment was made using top-up voucher. Boolean.  notes - payment notes. String.    XMLRPC fault in case of any error.       ",
    "seo_data": {
      "meta_title": "",
      "meta_description": "",
      "meta_keywords": ""
    },
    "tags": [],
    "attachments": [],
    "cloud_files": [],
    "thumbs_up": 0,
    "thumbs_down": 2,
    "hits": 1682,
    "suggested": 0,
    "feedback_count": 0
  },
  {
    "id": 107440,
    "type": 1,
    "status": 2,
    "agent_id": 3763909,
    "created_at": "2013-07-09T17:50:36Z",
    "category_id": 107132,
    "folder_id": 176838,
    "title": "XML-RPC API - Refunding an Account",
    "updated_at": "2021-06-10T11:10:22Z",
    "description": "<div dir=\"ltr\"><div dir=\"ltr\"><div><div style=\"padding-left: 18px;\">\n<h2 id=\"accountAddFundsaccountCreditandaccountDebit\" style='font-family: Arial,Verdana,\"Bitstream Vera Sans\",Helvetica,sans-serif; font-weight: bold; letter-spacing: -0.018em; font-size: 16px; margin-left: -18px;'>accountAddFunds(), accountCredit() and accountDebit()</h2>\n<p>These applications allow to refund or charge the Account's balance with the specified sum.</p>\n<p><br></p>\n<h3 id=\"Input\" style='font-family: Arial,Verdana,\"Bitstream Vera Sans\",Helvetica,sans-serif; font-weight: bold; letter-spacing: -0.018em; page-break-after: avoid; font-size: 14px; margin-left: -18px;'>Input</h3>\n<p>These functions receive struct with the following fields:</p>\n<p><br></p>\n<h4 id=\"Mandatoryfields\" style='font-family: Arial,Verdana,\"Bitstream Vera Sans\",Helvetica,sans-serif; font-weight: bold; letter-spacing: -0.018em; page-break-after: avoid;'>Mandatory fields</h4>\n<ul>\n<li>\n<strong>i_account</strong> (integer) - ID of account. Integer.</li>\n<li>\n<strong>amount</strong> - amount to refund or charge. Double.</li>\n<li>\n<strong>currency</strong> - currency in iso_4217 format (3 letters). String.</li>\n</ul>\n<h4 id=\"Optionalfields\" style='font-family: Arial,Verdana,\"Bitstream Vera Sans\",Helvetica,sans-serif; font-weight: bold; letter-spacing: -0.018em; page-break-after: avoid;'>Optional fields</h4>\n<ul>\n<li>\n<strong>payment_notes</strong> - String</li>\n<li>\n<strong>payment_time</strong> - time of the payment in '%H:%M:%S.000 GMT %a %b %d %Y' format (e.g. <strong>09:57:29.000 GMT Wed Nov 18 2009</strong>). (from version &gt;= 5.0). String.</li>\n</ul>\n<p style=\"\"><br></p>\n<h3 id=\"Output\" style='font-family: Arial,Verdana,\"Bitstream Vera Sans\",Helvetica,sans-serif; font-weight: bold; letter-spacing: -0.018em; page-break-after: avoid; font-size: 14px; margin-left: -18px;'>Output</h3>\n<p style=\"\">The function returns:</p>\n<ul>\n<li>\n<strong>result</strong> - 'OK'</li>\n<li>XMLRPC fault in case of any error.</li>\n</ul>\n<h3 id=\"Example\" style='font-family: Arial,Verdana,\"Bitstream Vera Sans\",Helvetica,sans-serif; font-weight: bold; letter-spacing: -0.018em; page-break-after: avoid; font-size: 14px; margin-left: -18px;'>Example</h3>\n<p>Python example:</p>\n<div style=\"background-color: rgb(247, 247, 247); border: 1px solid rgb(215, 215, 215); margin: 1em 1.75em; padding: 0.25em; overflow: auto;\">\n<pre style=\"background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(153, 153, 136); font-style: italic;\"># this script requires httplib2 to be installed from http://code.google.com/p/httplib2/</span>\n<strong>import</strong> <span style=\"color: rgb(85, 85, 85);\">httplib2</span>\n<strong>import</strong> <span style=\"color: rgb(85, 85, 85);\">urllib</span>\n<strong>from</strong> <span style=\"color: rgb(85, 85, 85);\">xmlrpclib</span> <strong>import</strong> ServerProxy<span>,</span> getparser<span>,</span> ProtocolError\n\n<strong>class</strong> <span style=\"color: rgb(68, 85, 136); font-weight: bold;\">HTTPSDigestAuthTransport</span><span>:</span>\n\u00a0 \u00a0 <strong>def</strong> <span style=\"color: rgb(153, 0, 0); font-weight: bold;\">request</span><span>(</span><span style=\"color: rgb(153, 153, 153);\">self</span><span>,</span> host<span>,</span> handler<span>,</span> request_body<span>,</span> verbose<strong>=</strong><span style=\"color: rgb(0, 153, 153);\">0</span><span>):</span>\n\u00a0 \u00a0 \u00a0 \u00a0 auth<span>,</span> host <strong>=</strong> urllib<strong>.</strong>splituser<span>(</span>host<span>)</span>\n\u00a0 \u00a0 \u00a0 \u00a0 username<span>,</span> password <strong>=</strong> urllib<strong>.</strong>splitpasswd<span>(</span>auth<span>)</span>\n\n\u00a0 \u00a0 \u00a0 \u00a0 h <strong>=</strong> httplib2<strong>.</strong>Http<span>()</span>\n\u00a0 \u00a0 \u00a0 \u00a0 <strong>if</strong> verbose<span>:</span>\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 h<strong>.</strong>debuglevel <strong>=</strong> <span style=\"color: rgb(0, 153, 153);\">1</span>\n\u00a0 \u00a0 \u00a0 \u00a0 h<strong>.</strong>add_credentials<span>(</span>username<span>,</span> password<span>)</span>\n\n\u00a0 \u00a0 \u00a0 \u00a0 resp<span>,</span> content <strong>=</strong> h<strong>.</strong>request<span>(</span><span style=\"color: rgb(187, 136, 68);\">\"https://\"</span> <strong>+</strong> host <strong>+</strong> handler<span>,</span> <span style=\"color: rgb(187, 136, 68);\">\"POST\"</span><span>,</span> body<strong>=</strong>request_body<span>,</span>\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 headers<strong>=</strong><span>{</span><span style=\"color: rgb(187, 136, 68);\">'content-type'</span><span>:</span><span style=\"color: rgb(187, 136, 68);\">'text/xml'</span><span>})</span>\n\n\u00a0 \u00a0 \u00a0 \u00a0 <strong>if</strong> resp<strong>.</strong>status <strong>!=</strong> <span style=\"color: rgb(0, 153, 153);\">200</span><span>:</span>\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <strong>raise</strong> ProtocolError<span>(</span><span style=\"color: rgb(187, 136, 68);\">\"https://\"</span> <strong>+</strong> host <strong>+</strong> handler<span>,</span>\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 resp<strong>.</strong>status<span>,</span> resp<strong>.</strong>reason<span>,</span> <span style=\"color: rgb(153, 153, 153);\">None</span><span>)</span>\n\n\u00a0 \u00a0 \u00a0 \u00a0 p<span>,</span> u <strong>=</strong> getparser<span>(</span><span style=\"color: rgb(0, 153, 153);\">0</span><span>)</span>\n\u00a0 \u00a0 \u00a0 \u00a0 p<strong>.</strong>feed<span>(</span>content<span>)</span>\n\n\u00a0 \u00a0 \u00a0 \u00a0 <strong>return</strong> u<strong>.</strong>close<span>()</span>\n\ntransport <strong>=</strong> HTTPSDigestAuthTransport<span>()</span>\nclient <strong>=</strong> ServerProxy<span>(</span><span style=\"color: rgb(187, 136, 68);\">\"https://username:password@1.2.3.4/xmlapi/xmlapi\"</span><span>,</span> transport<span>)</span>\nres <strong>=</strong> client<strong>.</strong>accountAddFunds<span>({</span> <span style=\"color: rgb(187, 136, 68);\">'i_account'</span> <span>:</span> <span style=\"color: rgb(0, 153, 153);\">1234</span><span>,</span> <span style=\"color: rgb(187, 136, 68);\">'amount'</span> <span>:</span> <span style=\"color: rgb(0, 153, 153);\">1.23</span><span>,</span> <span style=\"color: rgb(187, 136, 68);\">'currency'</span> <span>:</span> <span style=\"color: rgb(187, 136, 68);\">'USD'</span><span>,</span> <span style=\"color: rgb(187, 136, 68);\">'payment_notes'</span> <span>:</span> <span style=\"color: rgb(187, 136, 68);\">'Test credit'</span> <span>})</span>\n<strong>print</strong> res<span>[</span><span style=\"color: rgb(187, 136, 68);\">'result'</span><span>]</span></pre>\n<div><span><br></span></div>\n<p style=\"\"><br></p>\n</div>\n</div></div></div></div>",
    "description_text": "    \n accountAddFunds(), accountCredit() and accountDebit() \n These applications allow to refund or charge the Account's balance with the specified sum. \n   \n Input \n These functions receive struct with the following fields: \n   \n Mandatory fields \n \n \ni_account (integer) - ID of account. Integer. \n \namount - amount to refund or charge. Double. \n \ncurrency - currency in iso_4217 format (3 letters). String. \n \n Optional fields \n \n \npayment_notes - String \n \npayment_time - time of the payment in '%H:%M:%S.000 GMT %a %b %d %Y' format (e.g. 09:57:29.000 GMT Wed Nov 18 2009). (from version >= 5.0). String. \n \n   \n Output \n The function returns: \n \n \nresult - 'OK' \n XMLRPC fault in case of any error. \n \n Example \n Python example: \n \n # this script requires httplib2 to be installed from http://code.google.com/p/httplib2/\nimport httplib2\nimport urllib\nfrom xmlrpclib import ServerProxy, getparser, ProtocolError\n\nclass HTTPSDigestAuthTransport:\n\u00a0 \u00a0 def request(self, host, handler, request_body, verbose=0):\n\u00a0 \u00a0 \u00a0 \u00a0 auth, host = urllib.splituser(host)\n\u00a0 \u00a0 \u00a0 \u00a0 username, password = urllib.splitpasswd(auth)\n\n\u00a0 \u00a0 \u00a0 \u00a0 h = httplib2.Http()\n\u00a0 \u00a0 \u00a0 \u00a0 if verbose:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 h.debuglevel = 1\n\u00a0 \u00a0 \u00a0 \u00a0 h.add_credentials(username, password)\n\n\u00a0 \u00a0 \u00a0 \u00a0 resp, content = h.request(\"https://\" + host + handler, \"POST\", body=request_body,\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 headers={'content-type':'text/xml'})\n\n\u00a0 \u00a0 \u00a0 \u00a0 if resp.status != 200:\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 raise ProtocolError(\"https://\" + host + handler,\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 resp.status, resp.reason, None)\n\n\u00a0 \u00a0 \u00a0 \u00a0 p, u = getparser(0)\n\u00a0 \u00a0 \u00a0 \u00a0 p.feed(content)\n\n\u00a0 \u00a0 \u00a0 \u00a0 return u.close()\n\ntransport = HTTPSDigestAuthTransport()\nclient = ServerProxy(\"https://username:password@1.2.3.4/xmlapi/xmlapi\", transport)\nres = client.accountAddFunds({ 'i_account' : 1234, 'amount' : 1.23, 'currency' : 'USD', 'payment_notes' : 'Test credit' })\nprint res['result'] \n   \n   \n \n    ",
    "seo_data": {
      "meta_title": "",
      "meta_description": "",
      "meta_keywords": ""
    },
    "tags": [],
    "attachments": [],
    "cloud_files": [],
    "thumbs_up": 0,
    "thumbs_down": 5,
    "hits": 1522,
    "suggested": 0,
    "feedback_count": 0
  },
  {
    "id": 151210,
    "type": 1,
    "status": 2,
    "agent_id": 3763909,
    "created_at": "2013-10-17T08:11:34Z",
    "category_id": 107132,
    "folder_id": 176838,
    "title": "XML-RPC API - Refund a Vendor",
    "updated_at": "2017-08-14T13:51:04Z",
    "description": "<p><span style=\"font-size: 18px;\"><strong>vendorAddFunds(), vendorCredit() and vendorDebit()</strong></span><br><br>These applications allow to refund or charge the Vendors's balance with the specified sum.</p><p><br></p><p><u>The methods are applicable for all Sippy version starting from <strong>4.0</strong></u></p><p><br></p><p><strong><span style=\"font-size: 18px;\">Input</span></strong></p><p>\u00a0</p><p>\u00a0 These functions receive structure with the following fields:</p><p style=\"\"><br></p><p style=\"\">\u00a0 <strong>Mandatory fields</strong></p><ul>\n<li>\n<strong>i_vendor</strong> - which vendor to update. Integer.</li>\n<li>\n<strong>amount\u00a0</strong>- amount to refund or charge. Double.</li>\n<li>\n<strong>currency\u00a0</strong>- currency in which the amount specified. String.</li>\n</ul><p style=\"\"><br>\u00a0<strong>\u00a0Optional fields</strong></p><ul>\n<li>\n<strong>payment_notes</strong> - String.</li>\n<li>\n<strong>payment_time</strong> - time of the payment in '%H:%M:%S.000 GMT %a %b %d %Y' format (e.g. <strong>09:57:29.000 GMT Wed Nov 18 2009</strong>). (from version &gt;= 5.0). String.</li>\n</ul><p style=\"\"><br><span style=\"font-size: 18px;\"><strong>Output</strong></span><br><br>\u00a0 The function returns:</p><ul>\n<li>\u00a0 <strong>result</strong> - 'OK'</li>\n<li>\u00a0 XMLRPC fault in case of any error.</li>\n</ul><p>\u00a0</p>",
    "description_text": " vendorAddFunds(), vendorCredit() and vendorDebit()  These applications allow to refund or charge the Vendors's balance with the specified sum.     The methods are applicable for all Sippy version starting from 4.0     Input  \u00a0  \u00a0 These functions receive structure with the following fields:     \u00a0 Mandatory fields  \n \ni_vendor - which vendor to update. Integer. \n \namount\u00a0- amount to refund or charge. Double. \n \ncurrency\u00a0- currency in which the amount specified. String. \n   \u00a0\u00a0Optional fields  \n \npayment_notes - String. \n \npayment_time - time of the payment in '%H:%M:%S.000 GMT %a %b %d %Y' format (e.g. 09:57:29.000 GMT Wed Nov 18 2009). (from version >= 5.0). String. \n   Output  \u00a0 The function returns:  \n \u00a0 result - 'OK' \n \u00a0 XMLRPC fault in case of any error. \n  \u00a0 ",
    "seo_data": {
      "meta_title": "",
      "meta_description": "",
      "meta_keywords": ""
    },
    "tags": [],
    "attachments": [],
    "cloud_files": [],
    "thumbs_up": 0,
    "thumbs_down": 1,
    "hits": 420,
    "suggested": 0,
    "feedback_count": 0
  },
  {
    "id": 150644,
    "type": 1,
    "status": 2,
    "agent_id": 3763909,
    "created_at": "2013-10-16T09:08:51Z",
    "category_id": 107132,
    "folder_id": 176838,
    "title": "XML-RPC API - Refund a Customer",
    "updated_at": "2017-08-14T13:51:06Z",
    "description": "<div dir=\"ltr\"><div dir=\"ltr\">\n<h2 id=\"customerAddFundscustomerCreditandcustomerDebit\">customerAddFunds(), customerCredit() and customerDebit()</h2>\n<p><br></p>\n<p>These applications allow to refund or charge the Customer's balance with the specified sum.</p>\n<p><br></p>\n<p>The applications support <strong>trusted mode</strong> and <strong>i_wholesaler</strong> parameter should be supplied in this case.</p>\n<h3 id=\"Input\"><br></h3>\n<h3 id=\"Input\"><span style=\"font-size: 24px;\">Input</span></h3>\n<p><br></p>\n<p>These functions receive struct with the following fields:</p>\n<h4 id=\"Mandatoryfields\"><br></h4>\n<h4 id=\"Mandatoryfields\">\u00a0 \u00a0<span style=\"font-size: 18px;\">Mandatory fields</span>\n</h4>\n<ul>\n<li>\n<strong>i_customer</strong> - which customer to update. Integer.</li>\n<li>\n<strong>amount</strong> - amount to refund or charge. Double. The amount is also applied to the customer which is used in the HTTP authentication.</li>\n<li>\n<strong>currency</strong> - currency in which the amount specified. String.</li>\n</ul>\n<h4 id=\"Optionalfields\">\u00a0 \u00a0<span style=\"font-size: 18px;\">Optional fields</span>\n</h4>\n<ul>\n<li>\n<strong>payment_notes</strong> - String.</li>\n<li>\n<strong>payment_time</strong> - time of the payment in '%H:%M:%S.000 GMT %a %b %d %Y' format (e.g. <strong>09:57:29.000 GMT Wed Nov 18 2009</strong>). (from version &gt;= 5.0). String.</li>\n</ul>\n<p style=\"\"><br></p>\n<h3 id=\"Output\" style=\"\"><span style=\"font-size: 24px;\">Output</span></h3>\n<p style=\"\">\u00a0 \u00a0</p>\n<p>\u00a0 \u00a0The function returns:</p>\n<ul>\n<li>\n<strong>result</strong> - 'OK'</li>\n<li>XMLRPC fault in case of any error.</li>\n</ul>\n</div></div>",
    "description_text": "  \n customerAddFunds(), customerCredit() and customerDebit() \n   \n These applications allow to refund or charge the Customer's balance with the specified sum. \n   \n The applications support trusted mode and i_wholesaler parameter should be supplied in this case. \n   \n Input \n   \n These functions receive struct with the following fields: \n   \n \u00a0 \u00a0Mandatory fields\n \n \n \ni_customer - which customer to update. Integer. \n \namount - amount to refund or charge. Double. The amount is also applied to the customer which is used in the HTTP authentication. \n \ncurrency - currency in which the amount specified. String. \n \n \u00a0 \u00a0Optional fields\n \n \n \npayment_notes - String. \n \npayment_time - time of the payment in '%H:%M:%S.000 GMT %a %b %d %Y' format (e.g. 09:57:29.000 GMT Wed Nov 18 2009). (from version >= 5.0). String. \n \n   \n Output \n \u00a0 \u00a0 \n \u00a0 \u00a0The function returns: \n \n \nresult - 'OK' \n XMLRPC fault in case of any error. \n \n  ",
    "seo_data": {
      "meta_title": "",
      "meta_description": "",
      "meta_keywords": ""
    },
    "tags": [],
    "attachments": [],
    "cloud_files": [],
    "thumbs_up": 1,
    "thumbs_down": 1,
    "hits": 597,
    "suggested": 0,
    "feedback_count": 0
  },
  {
    "id": 107438,
    "type": 1,
    "status": 2,
    "agent_id": 3763909,
    "created_at": "2013-07-09T17:50:06Z",
    "category_id": 107132,
    "folder_id": 176838,
    "title": "XML-RPC API - Top-Up Account Using Recharge Voucher",
    "updated_at": "2021-04-13T09:08:07Z",
    "description": "<div><h2 id=\"rechargeVoucher\" style='font-family: Arial,Verdana,\"Bitstream Vera Sans\",Helvetica,sans-serif; font-weight: bold; font-size: 16px; color: rgb(0, 0, 0); line-height: normal; margin-left: 20px;'>rechargeVoucher()</h2></div><h2 id=\"rechargeVoucher\" style='font-family: Arial,Verdana,\"Bitstream Vera Sans\",Helvetica,sans-serif; font-weight: bold; font-size: 16px; color: rgb(0, 0, 0); line-height: normal;'><br></h2><p style='color: rgb(0, 0, 0); font-family: Verdana,Arial,\"Bitstream Vera Sans\",Helvetica,sans-serif; line-height: normal;'>This application allows to Top-up Account's balance using a Recharge Voucher.</p><p style='color: rgb(0, 0, 0); font-family: Verdana,Arial,\"Bitstream Vera Sans\",Helvetica,sans-serif; line-height: normal;'><br></p><h3 id=\"Input\" style='font-family: Arial,Verdana,\"Bitstream Vera Sans\",Helvetica,sans-serif; font-weight: bold; page-break-after: avoid; font-size: 14px; color: rgb(0, 0, 0); line-height: normal; margin-left: 20px;'>Input</h3><p><br></p><p dir=\"ltr\" style='color: rgb(0, 0, 0); font-family: Verdana,Arial,\"Bitstream Vera Sans\",Helvetica,sans-serif; line-height: normal;'>The function receives struct with the following fields:</p><h4 dir=\"ltr\" id=\"Mandatoryfields\" style='font-family: Arial,Verdana,\"Bitstream Vera Sans\",Helvetica,sans-serif; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); line-height: normal; margin-left: 20px;'>Mandatory fields</h4><p><strong dir=\"ltr\" style=\"line-height: 1.3; color: rgb(0, 0, 0);\">i_account</strong><span style=\"line-height: 1.3; color: rgb(0, 0, 0);\">\u00a0(integer) or\u00a0</span><strong style=\"line-height: 1.3; color: rgb(0, 0, 0);\">username</strong><span style=\"line-height: 1.3; color: rgb(0, 0, 0);\">\u00a0(string). you choose which one is more convenient to you.<br></span><strong dir=\"ltr\" style=\"line-height: 1.3; color: rgb(0, 0, 0);\">voucher_id</strong><span dir=\"ltr\" style=\"line-height: 1.3; color: rgb(0, 0, 0);\">\u00a0- ID of the voucher to refill the given account. String. Required.</span></p><h4 dir=\"ltr\" id=\"Optionalfields\" style='font-family: Arial,Verdana,\"Bitstream Vera Sans\",Helvetica,sans-serif; font-weight: bold; page-break-after: avoid; color: rgb(0, 0, 0); line-height: normal; margin-left: 20px;'>Optional fields</h4><p><strong dir=\"ltr\" style=\"line-height: 1.3; color: rgb(0, 0, 0);\">secret_pin</strong><span style=\"line-height: 1.3; color: rgb(0, 0, 0);\">\u00a0- String.</span></p><p><br></p><h3 dir=\"ltr\" id=\"Output\" style='font-family: Arial,Verdana,\"Bitstream Vera Sans\",Helvetica,sans-serif; font-weight: bold; page-break-after: avoid; font-size: 14px; color: rgb(0, 0, 0); line-height: normal; margin-left: 20px;'>Output</h3><p dir=\"ltr\" style='color: rgb(0, 0, 0); font-family: Verdana,Arial,\"Bitstream Vera Sans\",Helvetica,sans-serif; line-height: normal;'>The function returns structure with the following fields</p><p><strong dir=\"ltr\" style=\"line-height: 1.3; color: rgb(0, 0, 0);\">value</strong><span style=\"line-height: 1.3; color: rgb(0, 0, 0);\">\u00a0- voucher's value. Double.<br></span><strong dir=\"ltr\" style=\"line-height: 1.3; color: rgb(0, 0, 0);\">voucher_currency</strong><span style=\"line-height: 1.3; color: rgb(0, 0, 0);\">\u00a0- String.<br></span><strong dir=\"ltr\" style=\"line-height: 1.3; color: rgb(0, 0, 0);\">payer_amount</strong><span style=\"line-height: 1.3; color: rgb(0, 0, 0);\">\u00a0- voucher's value in account's currency. Double.</span></p><p><strong dir=\"ltr\">result</strong> - 'OK'</p><p dir=\"ltr\">XMLRPC fault in case of any error.</p><p style=\"margin-left: 40px;\"><br></p><h3 dir=\"ltr\" id=\"Trustedmode\" style='font-family: Arial,Verdana,\"Bitstream Vera Sans\",Helvetica,sans-serif; font-weight: bold; page-break-after: avoid; font-size: 14px; color: rgb(0, 0, 0); line-height: normal; margin-left: 20px;'>Trusted mode</h3><p dir=\"ltr\" style='color: rgb(0, 0, 0); font-family: Verdana,Arial,\"Bitstream Vera Sans\",Helvetica,sans-serif; line-height: normal;'>When used in trusted mode the caller may use <strong>i_voucher</strong> (integer) directly instead of <strong>voucher_id</strong> and <strong>secret_pin</strong></p>",
    "description_text": "  rechargeVoucher()      This application allows to Top-up Account's balance using a Recharge Voucher.     Input     The function receives struct with the following fields:  Mandatory fields  i_account\u00a0(integer) or\u00a0username\u00a0(string). you choose which one is more convenient to you. voucher_id\u00a0- ID of the voucher to refill the given account. String. Required.  Optional fields  secret_pin\u00a0- String.     Output  The function returns structure with the following fields  value\u00a0- voucher's value. Double. voucher_currency\u00a0- String. payer_amount\u00a0- voucher's value in account's currency. Double.  result - 'OK'  XMLRPC fault in case of any error.     Trusted mode  When used in trusted mode the caller may use i_voucher (integer) directly instead of voucher_id and secret_pin ",
    "seo_data": {
      "meta_title": "",
      "meta_description": "",
      "meta_keywords": ""
    },
    "tags": [],
    "attachments": [],
    "cloud_files": [],
    "thumbs_up": 0,
    "thumbs_down": 2,
    "hits": 679,
    "suggested": 0,
    "feedback_count": 0
  },
  {
    "id": 107443,
    "type": 1,
    "status": 2,
    "agent_id": 3901167,
    "created_at": "2013-07-09T17:52:25Z",
    "category_id": 107132,
    "folder_id": 176838,
    "title": "XML-RPC API - Make Payments with a Debit/Credit Card",
    "updated_at": "2020-06-03T09:20:38Z",
    "description": "<div data-identifyelement=\"476\" dir=\"ltr\"><div data-identifyelement=\"477\" dir=\"ltr\"><blockquote data-identifyelement=\"478\" style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><h1 data-identifyelement=\"479\" id=\"MakepaymentusingDebitCreditCard\" style=\"font-family: Arial, Verdana, 'Bitstream Vera Sans', Helvetica, sans-serif; font-weight: bold; page-break-after: avoid; font-size: 19px; margin: 0.15em 1em 0.5em -18px; color: rgb(0, 0, 0); line-height: normal;\">Make payment using <a data-identifyelement=\"480\" style=\"color: rgb(153, 153, 136);\" title=\"no permission to view this wiki page\">Debit/Credit</a> Card</h1><h2 data-identifyelement=\"481\" id=\"makePayment\" style=\"font-family: Arial, Verdana, 'Bitstream Vera Sans', Helvetica, sans-serif; font-weight: bold; page-break-after: avoid; font-size: 16px; margin-left: -18px; color: rgb(0, 0, 0); line-height: normal;\"><span style=\"font-size: 24px;\">makePayment()</span></h2><p data-identifyelement=\"482\" style='color: rgb(0, 0, 0); font-family: Verdana,Arial,\"Bitstream Vera Sans\",Helvetica,sans-serif; line-height: normal;'>This API call is used to make payments using <a data-identifyelement=\"483\" style=\"color: rgb(153, 153, 136);\" title=\"no permission to view this wiki page\">Credit/Debit</a> Cards info stored in the Sippy SoftSwitch. For more information about cards see <a data-identifyelement=\"484\" href=\"107442\" target>Debit/Credit Cards manipulations</a> <a href=\"#107442\" target data-identifyelement=\"485\"></a> <a href=\"https://trac.sippysoft.com/trac/wiki/public/XMLAPI/debitCreditCards\" style=\"color: rgb(187, 0, 0); border-bottom-width: 1px; border-bottom-style: dotted; border-bottom-color: rgb(187, 187, 187);\" data-identifyelement=\"486\"></a>.</p></blockquote></div></div><div data-identifyelement=\"487\" dir=\"ltr\"><blockquote data-identifyelement=\"488\" style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><p data-identifyelement=\"489\" style='color: rgb(0, 0, 0); font-family: Verdana,Arial,\"Bitstream Vera Sans\",Helvetica,sans-serif; line-height: normal;'><br data-identifyelement=\"490\"></p><p data-identifyelement=\"491\" style='color: rgb(0, 0, 0); font-family: Verdana,Arial,\"Bitstream Vera Sans\",Helvetica,sans-serif; line-height: normal;'><strong data-identifyelement=\"492\">Note!\u00a0</strong>Either <strong data-identifyelement=\"493\">i_account</strong> or <strong data-identifyelement=\"494\">i_customer</strong> is to be supplied.</p></blockquote></div><p data-identifyelement=\"495\"><br data-identifyelement=\"496\"></p><p data-identifyelement=\"497\">\u00a0 \u00a0 \u00a0 \u00a0 <span data-identifyelement=\"498\" style=\"font-family: Verdana,Geneva,sans-serif;\">Trusted mode requires <strong data-identifyelement=\"499\">i_wholesaler</strong> parameter.</span></p><blockquote data-identifyelement=\"500\" style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><p data-identifyelement=\"501\" style='color: rgb(0, 0, 0); font-family: Verdana,Arial,\"Bitstream Vera Sans\",Helvetica,sans-serif; line-height: normal;'><br data-identifyelement=\"502\"></p><p data-identifyelement=\"503\" style=\"color: rgb(0, 0, 0); font-family: Verdana, Arial, 'Bitstream Vera Sans', Helvetica, sans-serif; line-height: normal;\">Parameters:</p></blockquote><ul data-identifyelement=\"504\" style=\"color: rgb(0, 0, 0); font-family: Verdana, Arial, 'Bitstream Vera Sans', Helvetica, sans-serif; font-size: 13px; font-style: normal; line-height: normal;\"><ul data-identifyelement=\"506\"><li data-identifyelement=\"507\">i_account - <em data-identifyelement=\"508\">i_account</em> of account that makes the payment. Integer. Required.</li><li data-identifyelement=\"509\">i_customer - <em data-identifyelement=\"510\">i_customer</em> of customer that makes the payment. Integer. Required.</li><li data-identifyelement=\"511\">amount - payment amount. Double. Required.</li><li data-identifyelement=\"512\">currency - payment currency in ISO 4217 format (USD, EUR, etc.). String. Required.</li><li data-identifyelement=\"513\">payer_ip_address - IP address of the payer. String. Required.</li><li data-identifyelement=\"514\">i_debit_credit_card - <em data-identifyelement=\"515\">i_debit_credit_card</em> of card to make the payment. If not specified than <em data-identifyelement=\"516\">primary</em> Debit/Credit card will be used. Integer. Optional.</li></ul></ul><blockquote data-identifyelement=\"518\" style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><p data-identifyelement=\"602\" style='color: rgb(0, 0, 0); font-family: Verdana, Arial, \"Bitstream Vera Sans\", Helvetica, sans-serif; line-height: normal;'>Returns:</p><ul data-identifyelement=\"603\" style='color: rgb(0, 0, 0); font-family: Verdana,Arial,\"Bitstream Vera Sans\",Helvetica,sans-serif; line-height: normal;'><li data-identifyelement=\"604\"><strong data-identifyelement=\"605\">result</strong> - <u>OK / FAILED / PENDING</u> (Approval on Payment Processor's side is required). String</li><li data-identifyelement=\"607\"><strong data-identifyelement=\"608\">i_payment</strong> - reference to transaction details. Integer.</li></ul><ul data-identifyelement=\"619\" style='color: rgb(0, 0, 0); font-family: Verdana, Arial, \"Bitstream Vera Sans\", Helvetica, sans-serif; font-size: 13px; line-height: normal;'><li data-identifyelement=\"625\">XMLRPC fault in case of other error.</li></ul></blockquote><blockquote data-identifyelement=\"551\" style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><hr style=\"border-top-color: rgb(204, 204, 187); margin-top: 2em; margin-bottom: 2em; color: rgb(0, 0, 0); font-family: Verdana, Arial, 'Bitstream Vera Sans', Helvetica, sans-serif; line-height: normal;\" data-identifyelement=\"552\"><h2 data-identifyelement=\"553\" id=\"makePaymentByCard\" style=\"font-family: Arial, Verdana, 'Bitstream Vera Sans', Helvetica, sans-serif; font-weight: bold; page-break-after: avoid; font-size: 16px; margin-left: -18px; color: rgb(0, 0, 0); line-height: normal;\"><span style=\"font-size: 24px;\">makePaymentByCard()</span></h2><p data-identifyelement=\"554\" style=\"color: rgb(0, 0, 0); font-family: Verdana, Arial, 'Bitstream Vera Sans', Helvetica, sans-serif; line-height: normal;\">This API call is used to make payments using <a data-identifyelement=\"555\" style=\"color: rgb(153, 153, 136);\" title=\"no permission to view this wiki page\">Credit/Debit</a> Card info supplied in the request.</p><p data-identifyelement=\"556\" style='color: rgb(0, 0, 0); font-family: Verdana,Arial,\"Bitstream Vera Sans\",Helvetica,sans-serif; line-height: normal;'><strong data-identifyelement=\"557\">Note!\u00a0</strong>Either <strong data-identifyelement=\"558\">i_account</strong> or <strong data-identifyelement=\"559\">i_customer</strong> is to be supplied.</p></blockquote><p data-identifyelement=\"560\"><br data-identifyelement=\"561\"></p><p data-identifyelement=\"562\">\u00a0 \u00a0 \u00a0 \u00a0 <span data-identifyelement=\"563\" style=\"font-family: Verdana,Geneva,sans-serif;\">Trusted mode requires <strong data-identifyelement=\"564\">i_wholesaler</strong> parameter.</span></p><blockquote data-identifyelement=\"565\" style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><p data-identifyelement=\"566\"><br data-identifyelement=\"567\"></p><p data-identifyelement=\"568\" style=\"color: rgb(0, 0, 0); font-family: Verdana, Arial, 'Bitstream Vera Sans', Helvetica, sans-serif; line-height: normal;\">Parameters:</p></blockquote><ul data-identifyelement=\"569\" style=\"color: rgb(0, 0, 0); font-family: Verdana, Arial, 'Bitstream Vera Sans', Helvetica, sans-serif; font-size: 13px; font-style: normal; line-height: normal;\"><ul data-identifyelement=\"571\"><li data-identifyelement=\"572\">i_account - <em data-identifyelement=\"573\">i_account</em> of account that makes the payment. Integer. Required.</li><li data-identifyelement=\"574\">i_customer - <em data-identifyelement=\"575\">i_customer</em> of customer that makes the payment. Integer. Required.</li><li data-identifyelement=\"576\">amount - payment amount. Double. Required.</li><li data-identifyelement=\"577\">currency - payment currency in ISO 4217 format (USD, GBP, EUR, etc.). String. Required.</li><li data-identifyelement=\"578\">payer_ip_address - IP address of the payer. String. Required.</li><li data-identifyelement=\"579\">i_card_type - card type. Integer. Required. Supported card types:<ul data-identifyelement=\"580\"><li data-identifyelement=\"581\">1 - Visa</li><li data-identifyelement=\"582\">2 - American Express</li><li data-identifyelement=\"583\">3 - MasterCard</li><li data-identifyelement=\"584\">4 - Discover</li><li data-identifyelement=\"585\">5 - JCB</li><li data-identifyelement=\"586\">6 - Diner's Club</li></ul></li></ul><li data-identifyelement=\"587\">number - card number. String. Required.</li><li data-identifyelement=\"588\">exp_mm - expiration month (1 - 12). Integer. Required.</li><li data-identifyelement=\"589\">exp_yy - expiration year in 4-digits format (e.g. 2015). Integer. Required.</li><li data-identifyelement=\"590\">cvv - CVV/CVC code. String. Optional.</li><li data-identifyelement=\"591\">holder - card holder. String. Required.</li><li data-identifyelement=\"592\">street_addr1 - street address (line #1). String. Required.</li><li data-identifyelement=\"593\">street_addr2 - street address (line #2). String. Optional.</li><li data-identifyelement=\"594\">state - <a data-identifyelement=\"595\" style=\"color: rgb(153, 153, 136);\" title=\"no permission to view this wiki page\">Province/State</a>. String. Required.</li><li data-identifyelement=\"596\">postal_code - ZIP/Postal Code. String. Required.</li><li data-identifyelement=\"597\">city - city. String. Required.</li><li data-identifyelement=\"598\">country - country in 2-letters.\u00a0<a data-identifyelement=\"599\" href=\"http://en.wikipedia.org/wiki/ISO_3166-2\" style=\"color: rgb(187, 0, 0); border-bottom-width: 1px; border-bottom-style: dotted; border-bottom-color: rgb(187, 187, 187);\">ISO_3166-2</a> format (US, GB, etc). String. Required.</li><li data-identifyelement=\"601\">phone - phone number. String. Required.</li></ul><p data-identifyelement=\"602\" style=\"color: rgb(0, 0, 0); font-family: Verdana, Arial, 'Bitstream Vera Sans', Helvetica, sans-serif; font-style: normal; line-height: normal;\">Returns:</p><ul data-identifyelement=\"603\" style='color: rgb(0, 0, 0); font-family: Verdana,Arial,\"Bitstream Vera Sans\",Helvetica,sans-serif; line-height: normal;'><li data-identifyelement=\"604\"><strong data-identifyelement=\"605\">result</strong> - <u>OK / FAILED / PENDING</u> (Approval on Payment Processor's side is required). String</li><li data-identifyelement=\"607\"><strong data-identifyelement=\"608\">i_payment</strong> - reference to transaction details. Integer.</li></ul><ul data-identifyelement=\"619\" style=\"color: rgb(0, 0, 0); font-family: Verdana, Arial, 'Bitstream Vera Sans', Helvetica, sans-serif; font-size: 13px; font-style: normal; line-height: normal;\"><li data-identifyelement=\"625\">XMLRPC fault in case of other error.</li></ul><p data-identifyelement=\"626\"><br data-identifyelement=\"627\"></p><p data-identifyelement=\"628\"><br data-identifyelement=\"629\"></p><p data-identifyelement=\"630\"><br data-identifyelement=\"631\"></p><p data-identifyelement=\"632\"><br data-identifyelement=\"633\"></p>",
    "description_text": "    Make payment using Debit/Credit Card  makePayment()  This API call is used to make payments using Credit/Debit Cards info stored in the Sippy SoftSwitch. For more information about cards see Debit/Credit Cards manipulations  .          Note!\u00a0Either i_account or i_customer is to be supplied.       \u00a0 \u00a0 \u00a0 \u00a0 Trusted mode requires i_wholesaler parameter.      Parameters:     i_account - i_account of account that makes the payment. Integer. Required.  i_customer - i_customer of customer that makes the payment. Integer. Required.  amount - payment amount. Double. Required.  currency - payment currency in ISO 4217 format (USD, EUR, etc.). String. Required.  payer_ip_address - IP address of the payer. String. Required.  i_debit_credit_card - i_debit_credit_card of card to make the payment. If not specified than primary Debit/Credit card will be used. Integer. Optional.     Returns:   result - OK / FAILED / PENDING (Approval on Payment Processor's side is required). String  i_payment - reference to transaction details. Integer.    XMLRPC fault in case of other error.      makePaymentByCard()  This API call is used to make payments using Credit/Debit Card info supplied in the request.  Note!\u00a0Either i_account or i_customer is to be supplied.      \u00a0 \u00a0 \u00a0 \u00a0 Trusted mode requires i_wholesaler parameter.      Parameters:     i_account - i_account of account that makes the payment. Integer. Required.  i_customer - i_customer of customer that makes the payment. Integer. Required.  amount - payment amount. Double. Required.  currency - payment currency in ISO 4217 format (USD, GBP, EUR, etc.). String. Required.  payer_ip_address - IP address of the payer. String. Required.  i_card_type - card type. Integer. Required. Supported card types:  1 - Visa  2 - American Express  3 - MasterCard  4 - Discover  5 - JCB  6 - Diner's Club     number - card number. String. Required.  exp_mm - expiration month (1 - 12). Integer. Required.  exp_yy - expiration year in 4-digits format (e.g. 2015). Integer. Required.  cvv - CVV/CVC code. String. Optional.  holder - card holder. String. Required.  street_addr1 - street address (line #1). String. Required.  street_addr2 - street address (line #2). String. Optional.  state - Province/State. String. Required.  postal_code - ZIP/Postal Code. String. Required.  city - city. String. Required.  country - country in 2-letters.\u00a0ISO_3166-2 format (US, GB, etc). String. Required.  phone - phone number. String. Required.   Returns:   result - OK / FAILED / PENDING (Approval on Payment Processor's side is required). String  i_payment - reference to transaction details. Integer.    XMLRPC fault in case of other error.              ",
    "seo_data": {
      "meta_title": "",
      "meta_description": "",
      "meta_keywords": ""
    },
    "tags": [],
    "attachments": [],
    "cloud_files": [],
    "thumbs_up": 2,
    "thumbs_down": 0,
    "hits": 974,
    "suggested": 0,
    "feedback_count": 0
  },
  {
    "id": 107444,
    "type": 1,
    "status": 2,
    "agent_id": 3012089524,
    "created_at": "2013-07-09T17:53:35Z",
    "category_id": 107132,
    "folder_id": 176838,
    "title": "XML-RPC API - Manipulate Low Balances",
    "updated_at": "2021-06-09T08:56:12Z",
    "description": "<h1 id=\"ManipulateLowBalance\" style=\"font-family: Arial, Verdana, 'Bitstream Vera Sans', Helvetica, sans-serif; font-weight: bold; page-break-after: avoid; font-size: 19px; margin: 0.15em 1em 0.5em -18px; color: rgb(0, 0, 0); line-height: normal;\"><span style=\"font-size: 24px;\">Manipulate Low Balance</span></h1><h2 id=\"getLowBalance\" style=\"font-family: Arial, Verdana, 'Bitstream Vera Sans', Helvetica, sans-serif; font-weight: bold; page-break-after: avoid; font-size: 16px; color: rgb(0, 0, 0); line-height: normal;\"><span style=\"font-size: 18px;\">getLowBalance()</span></h2><p><br></p><p style=\"color: rgb(0, 0, 0); font-family: Verdana, Arial, 'Bitstream Vera Sans', Helvetica, sans-serif; line-height: normal;\">This API call is used to retrieve Low Balance information of an account or customer.</p><p style=\"color: rgb(0, 0, 0); font-family: Verdana, Arial, 'Bitstream Vera Sans', Helvetica, sans-serif; line-height: normal;\">Note!\u00a0Either i_account or i_customer is to be supplied.</p><p><br></p><p style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><span style=\"font-size: 16px;\">Parameters:</span></p><ul><li dir=\"ltr\"><strong>i_account</strong> - i_account of account. Integer. Required.</li><li><strong>i_customer</strong> - i_customer of customer. Integer. Required.</li></ul><p><br></p><p style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><span style=\"font-size: 16px;\">Returns:</span></p><ul><li><strong style=\"line-height: 1.3; color: rgb(0, 0, 0);\">result</strong><span style=\"line-height: 1.3; color: rgb(0, 0, 0);\">\u00a0-\u00a0</span><i style=\"line-height: 1.3; color: rgb(0, 0, 0);\">OK</i><span dir=\"ltr\" style=\"line-height: 1.3; color: rgb(0, 0, 0);\">. Means operation was successful. String.</span></li><li><strong style=\"line-height: 1.3; color: rgb(0, 0, 0);\">threshold</strong><span dir=\"ltr\" style=\"line-height: 1.3; color: rgb(0, 0, 0);\">\u00a0- Low Balance Threshold value. Double.</span></li><li><strong style=\"line-height: 1.3; color: rgb(0, 0, 0);\">notify_by_email</strong><span dir=\"ltr\" style=\"line-height: 1.3; color: rgb(0, 0, 0);\">\u00a0- if account/customer should be notified. Boolean.</span></li><li><strong style=\"line-height: 1.3; color: rgb(0, 0, 0);\">charge_card</strong><span dir=\"ltr\" style=\"line-height: 1.3; color: rgb(0, 0, 0);\">\u00a0- if account/customer should be auto-charged. Boolean.</span></li><li><strong style=\"line-height: 1.3; color: rgb(0, 0, 0);\">charge_amount</strong><span dir=\"ltr\" style=\"line-height: 1.3; color: rgb(0, 0, 0);\">\u00a0- amount to be charged. Double.</span></li><li><strong style=\"line-height: 1.3; color: rgb(0, 0, 0);\">i_debit_credit_card</strong><span style=\"line-height: 1.3; color: rgb(0, 0, 0);\">\u00a0- Use specified debit/credit card for auto-charging. Integer.</span></li></ul><p><br></p><p><br></p><p style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><span style=\"font-size: 16px;\">Next parameters are only applicable for accounts:</span></p><ul><li><strong style=\"line-height: 1.3; color: rgb(0, 0, 0);\">br_charge_card</strong><span dir=\"ltr\" style=\"line-height: 1.3; color: rgb(0, 0, 0);\">\u00a0- if an account should be auto-charged on billing run. Boolean.</span></li><li><strong style=\"line-height: 1.3; color: rgb(0, 0, 0);\">br_charge_amount</strong><span dir=\"ltr\" style=\"line-height: 1.3; color: rgb(0, 0, 0);\">\u00a0- amount to be charged on billing run. Double.</span></li><li><strong style=\"line-height: 1.3; color: rgb(0, 0, 0);\">br_i_debit_credit_card</strong><span style=\"line-height: 1.3; color: rgb(0, 0, 0);\">\u00a0- Use specified debit/credit card for auto-charging on billing_run. Integer.</span></li></ul><p><span dir=\"ltr\" style=\"line-height: 1.3; color: rgb(0, 0, 0);\"><br></span></p><ul><li dir=\"ltr\"><span dir=\"ltr\" style=\"font-size: 16px;\"><strong>XMLRPC fault</strong> in case of other error.</span></li></ul><p><span dir=\"ltr\" style=\"font-size: 16px;\"><br></span></p><p id=\"setLowBalance\" style=\"font-family: Arial, Verdana, 'Bitstream Vera Sans', Helvetica, sans-serif; font-weight: bold; page-break-after: avoid; font-size: 16px; color: rgb(0, 0, 0); line-height: normal;\"><span dir=\"ltr\" style=\"font-size: 18px;\">setLowBalance()</span></p><p><br></p><p style=\"color: rgb(0, 0, 0); font-family: Verdana, Arial, 'Bitstream Vera Sans', Helvetica, sans-serif; line-height: normal;\">This API call is used to set Low Balance parameters of an account or customer.</p><p style=\"color: rgb(0, 0, 0); font-family: Verdana, Arial, 'Bitstream Vera Sans', Helvetica, sans-serif; line-height: normal;\"><strong>Note!\u00a0</strong>Either <strong>i_account</strong> or <strong>i_customer</strong> is to be supplied.</p><p><br></p><p><span style=\"font-size: 16px;\">Parameters:</span></p><ul><li><span style=\"line-height: 1.3; color: rgb(0, 0, 0);\"><strong>i_account</strong> -\u00a0</span><i style=\"line-height: 1.3; color: rgb(0, 0, 0);\">i_account</i><span style=\"line-height: 1.3; color: rgb(0, 0, 0);\">\u00a0of account. Integer. Required.</span></li><li><span dir=\"ltr\" style=\"line-height: 1.3; color: rgb(0, 0, 0);\"><strong>i_customer</strong> -\u00a0</span><i style=\"line-height: 1.3; color: rgb(0, 0, 0);\">i_customer</i><span dir=\"ltr\" style=\"line-height: 1.3; color: rgb(0, 0, 0);\">\u00a0of customer. Integer. Required.</span></li><li><strong style=\"line-height: 1.3; color: rgb(0, 0, 0);\">threshold</strong><span style=\"line-height: 1.3; color: rgb(0, 0, 0);\">\u00a0- Low Balance Threshold value. Double. Optional.\u00a0</span><i style=\"line-height: 1.3; color: rgb(0, 0, 0);\">Null</i><span dir=\"ltr\" style=\"line-height: 1.3; color: rgb(0, 0, 0);\">\u00a0value means that threshold is disabled.</span></li><li><strong style=\"line-height: 1.3; color: rgb(0, 0, 0);\">notify_by_email</strong><span dir=\"ltr\" style=\"line-height: 1.3; color: rgb(0, 0, 0);\">\u00a0- if account/customer should be notified. Boolean. Optional.</span></li><li><strong style=\"line-height: 1.3; color: rgb(0, 0, 0);\">charge_card</strong><span dir=\"ltr\" style=\"line-height: 1.3; color: rgb(0, 0, 0);\">\u00a0- if account/customer should be auto-charged. Boolean. Optional.</span></li><li><strong style=\"line-height: 1.3; color: rgb(0, 0, 0);\">charge_amount</strong><span dir=\"ltr\" style=\"line-height: 1.3; color: rgb(0, 0, 0);\">\u00a0- amount to be charged. Double. Optional.</span></li><li><strong style=\"line-height: 1.3; color: rgb(0, 0, 0);\">i_debit_credit_card</strong><span style=\"line-height: 1.3; color: rgb(0, 0, 0);\">\u00a0- Use specified debit/credit card for auto-charging. Integer. Optional.\u00a0</span><i style=\"line-height: 1.3; color: rgb(0, 0, 0);\">Null</i><span style=\"line-height: 1.3; color: rgb(0, 0, 0);\">\u00a0value means to use primary debit/credit card.</span></li></ul><p><br></p><p><span style=\"font-size: 16px;\">Next parameters are only applicable for accounts:</span></p><ul><li><strong style=\"line-height: 1.3; color: rgb(0, 0, 0);\">br_charge_card</strong><span dir=\"ltr\" style=\"line-height: 1.3; color: rgb(0, 0, 0);\">\u00a0- if an account should be auto-charged on billing run. Boolean. Optional.</span></li><li><strong style=\"line-height: 1.3; color: rgb(0, 0, 0);\">br_charge_amount</strong><span style=\"line-height: 1.3; color: rgb(0, 0, 0);\">\u00a0- amount to be charged on billing run. Double. Optional.\u00a0</span><i style=\"line-height: 1.3; color: rgb(0, 0, 0);\">Null</i><span style=\"line-height: 1.3; color: rgb(0, 0, 0);\">\u00a0value means\u00a0</span><i style=\"line-height: 1.3; color: rgb(0, 0, 0);\">Plan Price</i><span dir=\"ltr\" style=\"line-height: 1.3; color: rgb(0, 0, 0);\">.</span></li><li><strong style=\"line-height: 1.3; color: rgb(0, 0, 0);\">br_i_debit_credit_card</strong><span style=\"line-height: 1.3; color: rgb(0, 0, 0);\">\u00a0- Use specified debit/credit card for auto-charging on billing_run. Integer. Optional.</span></li></ul><p><span style=\"font-size: 16px;\">Returns:</span></p><ul><li><span style=\"font-size: 16px;\"><strong style=\"line-height: 1.3; color: rgb(0, 0, 0);\">result</strong><span style=\"line-height: 1.3; color: rgb(0, 0, 0);\">\u00a0-\u00a0</span><i style=\"line-height: 1.3; color: rgb(0, 0, 0);\">OK</i><span style=\"line-height: 1.3; color: rgb(0, 0, 0);\">. Means that update was successful. String.</span></span></li><li><span style=\"font-size: 16px;\"><span dir=\"ltr\" style=\"line-height: 1.3; color: rgb(0, 0, 0);\"><strong>XMLRPC fault</strong> in case of other error.</span></span></li></ul>",
    "description_text": " Manipulate Low Balance  getLowBalance()     This API call is used to retrieve Low Balance information of an account or customer.  Note!\u00a0Either i_account or i_customer is to be supplied.     Parameters:   i_account - i_account of account. Integer. Required.  i_customer - i_customer of customer. Integer. Required.      Returns:   result\u00a0-\u00a0OK. Means operation was successful. String.  threshold\u00a0- Low Balance Threshold value. Double.  notify_by_email\u00a0- if account/customer should be notified. Boolean.  charge_card\u00a0- if account/customer should be auto-charged. Boolean.  charge_amount\u00a0- amount to be charged. Double.  i_debit_credit_card\u00a0- Use specified debit/credit card for auto-charging. Integer.         Next parameters are only applicable for accounts:   br_charge_card\u00a0- if an account should be auto-charged on billing run. Boolean.  br_charge_amount\u00a0- amount to be charged on billing run. Double.  br_i_debit_credit_card\u00a0- Use specified debit/credit card for auto-charging on billing_run. Integer.       XMLRPC fault in case of other error.      setLowBalance()     This API call is used to set Low Balance parameters of an account or customer.  Note!\u00a0Either i_account or i_customer is to be supplied.     Parameters:   i_account -\u00a0i_account\u00a0of account. Integer. Required.  i_customer -\u00a0i_customer\u00a0of customer. Integer. Required.  threshold\u00a0- Low Balance Threshold value. Double. Optional.\u00a0Null\u00a0value means that threshold is disabled.  notify_by_email\u00a0- if account/customer should be notified. Boolean. Optional.  charge_card\u00a0- if account/customer should be auto-charged. Boolean. Optional.  charge_amount\u00a0- amount to be charged. Double. Optional.  i_debit_credit_card\u00a0- Use specified debit/credit card for auto-charging. Integer. Optional.\u00a0Null\u00a0value means to use primary debit/credit card.      Next parameters are only applicable for accounts:   br_charge_card\u00a0- if an account should be auto-charged on billing run. Boolean. Optional.  br_charge_amount\u00a0- amount to be charged on billing run. Double. Optional.\u00a0Null\u00a0value means\u00a0Plan Price.  br_i_debit_credit_card\u00a0- Use specified debit/credit card for auto-charging on billing_run. Integer. Optional.   Returns:   result\u00a0-\u00a0OK. Means that update was successful. String.  XMLRPC fault in case of other error.  ",
    "seo_data": {
      "meta_title": "",
      "meta_description": "",
      "meta_keywords": ""
    },
    "tags": [],
    "attachments": [],
    "cloud_files": [],
    "thumbs_up": 1,
    "thumbs_down": 3,
    "hits": 663,
    "suggested": 0,
    "feedback_count": 0
  }
]